//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Generated;

/// <summary>
/// ogmios
/// </summary>
public readonly partial struct Ogmios
{
    /// <summary>
    /// QueryLedgerStateEraMismatch
    /// </summary>
    public readonly partial struct QueryLedgerStateEraMismatch
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct MethodEntity
        {
            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;
                if (level > ValidationLevel.Flag && !result.IsUsingResults)
                {
                    result = result.UsingResults();
                }

                if (level > ValidationLevel.Basic)
                {
                    if (!result.IsUsingStack)
                    {
                        result = result.UsingStack();
                    }

                    result = result.PushSchemaLocation("https://endjin.com/Users/davebeaumont/source/cardano-public/OgmiosDotnet/src/Ogmios.Schema/Ogmios/v6.12/Source/ogmios.json#/properties/QueryLedgerStateEraMismatch/properties/method");
                }

                JsonValueKind valueKind = this.ValueKind;

                result = CorvusValidation.TypeValidationHandler(valueKind, result, level);

                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = CorvusValidation.CompositionAnyOfValidationHandler(this, result, level);

                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation();
                }

                return result;
            }

            /// <summary>
            /// Constant values for the enum keyword.
            /// </summary>
            public static class EnumValues
            {
                /// <summary>
                /// Gets the string 'queryLedgerState/constitution'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateConstitution { get; } = CorvusValidation.Enum1.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/constitution'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateConstitutionUtf8 => CorvusValidation.Enum1Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/constitutionalCommittee'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateConstitutionalCommittee { get; } = CorvusValidation.Enum2.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/constitutionalCommittee'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateConstitutionalCommitteeUtf8 => CorvusValidation.Enum2Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/delegateRepresentatives'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateDelegateRepresentatives { get; } = CorvusValidation.Enum3.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/delegateRepresentatives'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateDelegateRepresentativesUtf8 => CorvusValidation.Enum3Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/epoch'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateEpoch { get; } = CorvusValidation.Enum4.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/epoch'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateEpochUtf8 => CorvusValidation.Enum4Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/eraStart'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateEraStart { get; } = CorvusValidation.Enum5.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/eraStart'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateEraStartUtf8 => CorvusValidation.Enum5Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/eraSummaries'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateEraSummaries { get; } = CorvusValidation.Enum6.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/eraSummaries'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateEraSummariesUtf8 => CorvusValidation.Enum6Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/governanceProposals'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateGovernanceProposals { get; } = CorvusValidation.Enum7.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/governanceProposals'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateGovernanceProposalsUtf8 => CorvusValidation.Enum7Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/liveStakeDistribution'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateLiveStakeDistribution { get; } = CorvusValidation.Enum8.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/liveStakeDistribution'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateLiveStakeDistributionUtf8 => CorvusValidation.Enum8Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/nonces'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateNonces { get; } = CorvusValidation.Enum9.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/nonces'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateNoncesUtf8 => CorvusValidation.Enum9Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/operationalCertificates'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateOperationalCertificates { get; } = CorvusValidation.Enum10.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/operationalCertificates'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateOperationalCertificatesUtf8 => CorvusValidation.Enum10Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/projectedRewards'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateProjectedRewards { get; } = CorvusValidation.Enum11.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/projectedRewards'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateProjectedRewardsUtf8 => CorvusValidation.Enum11Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/protocolParameters'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateProtocolParameters { get; } = CorvusValidation.Enum12.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/protocolParameters'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateProtocolParametersUtf8 => CorvusValidation.Enum12Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/proposedProtocolParameters'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateProposedProtocolParameters { get; } = CorvusValidation.Enum13.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/proposedProtocolParameters'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateProposedProtocolParametersUtf8 => CorvusValidation.Enum13Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/rewardAccountSummaries'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateRewardAccountSummaries { get; } = CorvusValidation.Enum14.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/rewardAccountSummaries'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateRewardAccountSummariesUtf8 => CorvusValidation.Enum14Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/rewardsProvenance'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateRewardsProvenance { get; } = CorvusValidation.Enum15.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/rewardsProvenance'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateRewardsProvenanceUtf8 => CorvusValidation.Enum15Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/stakePools'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateStakePools { get; } = CorvusValidation.Enum16.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/stakePools'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateStakePoolsUtf8 => CorvusValidation.Enum16Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/utxo'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateUtxo { get; } = CorvusValidation.Enum17.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/utxo'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateUtxoUtf8 => CorvusValidation.Enum17Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/tip'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateTip { get; } = CorvusValidation.Enum18.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/tip'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateTipUtf8 => CorvusValidation.Enum18Utf8;

                /// <summary>
                /// Gets the string 'queryLedgerState/treasuryAndReserves'
                /// as a <see cref="Generated.Ogmios.QueryLedgerStateEraMismatch.MethodEntity"/>.
                /// </summary>
                public static MethodEntity QueryLedgerStateTreasuryAndReserves { get; } = CorvusValidation.Enum19.As<MethodEntity>();

                /// <summary>
                /// Gets the string 'queryLedgerState/treasuryAndReserves'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> QueryLedgerStateTreasuryAndReservesUtf8 => CorvusValidation.Enum19Utf8;
            }

            /// <summary>
            /// Validation constants for the type.
            /// </summary>
            public static partial class CorvusValidation
            {
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum1 = JsonString.ParseValue("\"queryLedgerState/constitution\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum2 = JsonString.ParseValue("\"queryLedgerState/constitutionalCommittee\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum3 = JsonString.ParseValue("\"queryLedgerState/delegateRepresentatives\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum4 = JsonString.ParseValue("\"queryLedgerState/epoch\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum5 = JsonString.ParseValue("\"queryLedgerState/eraStart\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum6 = JsonString.ParseValue("\"queryLedgerState/eraSummaries\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum7 = JsonString.ParseValue("\"queryLedgerState/governanceProposals\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum8 = JsonString.ParseValue("\"queryLedgerState/liveStakeDistribution\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum9 = JsonString.ParseValue("\"queryLedgerState/nonces\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum10 = JsonString.ParseValue("\"queryLedgerState/operationalCertificates\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum11 = JsonString.ParseValue("\"queryLedgerState/projectedRewards\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum12 = JsonString.ParseValue("\"queryLedgerState/protocolParameters\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum13 = JsonString.ParseValue("\"queryLedgerState/proposedProtocolParameters\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum14 = JsonString.ParseValue("\"queryLedgerState/rewardAccountSummaries\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum15 = JsonString.ParseValue("\"queryLedgerState/rewardsProvenance\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum16 = JsonString.ParseValue("\"queryLedgerState/stakePools\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum17 = JsonString.ParseValue("\"queryLedgerState/utxo\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum18 = JsonString.ParseValue("\"queryLedgerState/tip\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum19 = JsonString.ParseValue("\"queryLedgerState/treasuryAndReserves\"");

                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum1Utf8 => "\"queryLedgerState/constitution\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum2Utf8 => "\"queryLedgerState/constitutionalCommittee\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum3Utf8 => "\"queryLedgerState/delegateRepresentatives\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum4Utf8 => "\"queryLedgerState/epoch\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum5Utf8 => "\"queryLedgerState/eraStart\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum6Utf8 => "\"queryLedgerState/eraSummaries\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum7Utf8 => "\"queryLedgerState/governanceProposals\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum8Utf8 => "\"queryLedgerState/liveStakeDistribution\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum9Utf8 => "\"queryLedgerState/nonces\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum10Utf8 => "\"queryLedgerState/operationalCertificates\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum11Utf8 => "\"queryLedgerState/projectedRewards\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum12Utf8 => "\"queryLedgerState/protocolParameters\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum13Utf8 => "\"queryLedgerState/proposedProtocolParameters\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum14Utf8 => "\"queryLedgerState/rewardAccountSummaries\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum15Utf8 => "\"queryLedgerState/rewardsProvenance\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum16Utf8 => "\"queryLedgerState/stakePools\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum17Utf8 => "\"queryLedgerState/utxo\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum18Utf8 => "\"queryLedgerState/tip\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum19Utf8 => "\"queryLedgerState/treasuryAndReserves\""u8;

                /// <summary>
                /// Core type validation.
                /// </summary>
                /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
                /// <param name="validationContext">The current validation context.</param>
                /// <param name="level">The current validation level.</param>
                /// <returns>The resulting validation context after validation.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                internal static ValidationContext TypeValidationHandler(
                    JsonValueKind valueKind,
                    in ValidationContext validationContext,
                    ValidationLevel level = ValidationLevel.Flag)
                {
                    return Corvus.Json.ValidateWithoutCoreType.TypeString(valueKind, validationContext, level, "type");
                }

                /// <summary>
                /// Composition validation (any-of).
                /// </summary>
                /// <param name="value">The value to validate.</param>
                /// <param name="validationContext">The current validation context.</param>
                /// <param name="level">The current validation level.</param>
                /// <returns>The resulting validation context after validation.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                internal static ValidationContext CompositionAnyOfValidationHandler(
                    in MethodEntity value,
                    in ValidationContext validationContext,
                    ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext;

                    result = ValidateEnum(value, result, level);
                    if (!result.IsValid && level == ValidationLevel.Flag)
                    {
                        return result;
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    static ValidationContext ValidateEnum(in MethodEntity value, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        bool enumFoundValid = false;

                        enumFoundValid = value.Equals(CorvusValidation.Enum1);
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum2);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum3);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum4);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum5);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum6);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum7);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum8);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum9);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum10);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum11);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum12);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum13);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum14);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum15);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum16);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum17);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum18);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum19);
                        }

                        if (enumFoundValid)
                        {
                            if (level >= ValidationLevel.Verbose)
                            {
                                result = result.WithResult(isValid: true, "Validation enum - validated against the enumeration.", "enum");
                            }
                        }
                        else
                        {
                            if (level == ValidationLevel.Flag)
                            {
                                result = result.WithResult(isValid: false);
                            }
                            else
                            {
                                result = result.WithResult(isValid: false, "Validation enum - did not validate against the enumeration.", "enum");
                            }
                        }

                        return result;
                    }

                    return result;
                }
            }
        }
    }
}
