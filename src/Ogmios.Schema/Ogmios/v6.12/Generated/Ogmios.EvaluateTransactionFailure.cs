//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Buffers;
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Generated;

/// <summary>
/// ogmios
/// </summary>
public readonly partial struct Ogmios
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(Corvus.Json.Internal.JsonValueConverter<EvaluateTransactionFailure>))]
    public readonly partial struct EvaluateTransactionFailure
        : IJsonValue<Generated.Ogmios.EvaluateTransactionFailure>
    {
        private readonly Backing backing;
        private readonly JsonElement jsonElementBacking;
        private readonly ImmutableList<JsonObjectProperty> objectBacking;

        /// <summary>
        /// Initializes a new instance of the <see cref="EvaluateTransactionFailure"/> struct.
        /// </summary>
        public EvaluateTransactionFailure()
        {
            this.jsonElementBacking = default;
            this.backing = Backing.JsonElement;
            this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EvaluateTransactionFailure"/> struct.
        /// </summary>
        /// <param name="value">The value from which to construct the instance.</param>
        public EvaluateTransactionFailure(in JsonElement value)
        {
            this.jsonElementBacking = value;
            this.backing = Backing.JsonElement;
            this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EvaluateTransactionFailure"/> struct.
        /// </summary>
        /// <param name="value">The value from which to construct the instance.</param>
        public EvaluateTransactionFailure(ImmutableList<JsonObjectProperty> value)
        {
            this.backing = Backing.Object;
            this.jsonElementBacking = default;
            this.objectBacking = value;
        }

        /// <summary>
        /// Gets the schema location from which this type was generated.
        /// </summary>
        public static string SchemaLocation { get; } = "https://endjin.com/Users/davebeaumont/source/cardano-public/OgmiosDotnet/src/Ogmios.Schema/Ogmios/v6.12/Source/ogmios.json#/definitions/EvaluateTransactionFailure";

        /// <summary>
        /// Gets a Null instance.
        /// </summary>
        public static EvaluateTransactionFailure Null { get; } = new(JsonValueHelpers.NullElement);

        /// <summary>
        /// Gets an Undefined instance.
        /// </summary>
        public static EvaluateTransactionFailure Undefined { get; }

        /// <summary>
        /// Gets the default instance.
        /// </summary>
        public static EvaluateTransactionFailure DefaultInstance { get; }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    return new(this.objectBacking);
                }

                if ((this.backing & Backing.Null) != 0)
                {
                    return JsonAny.Null;
                }

                return JsonAny.Undefined;
            }
        }

        /// <inheritdoc/>
        public JsonElement AsJsonElement
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return this.jsonElementBacking;
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    return JsonValueHelpers.ObjectToJsonElement(this.objectBacking);
                }

                if ((this.backing & Backing.Null) != 0)
                {
                    return JsonValueHelpers.NullElement;
                }

                return default;
            }
        }

        /// <inheritdoc/>
        JsonString IJsonValue.AsString
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        JsonBoolean IJsonValue.AsBoolean
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        JsonNumber IJsonValue.AsNumber
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        public JsonObject AsObject
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    return new(this.objectBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        JsonArray IJsonValue.AsArray
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra" />.
        /// </summary>
        public Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra AsEvaluateTransactionFailureIncompatibleEra
        {
            get
            {
                return this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra" />.
        /// </summary>
        public bool IsEvaluateTransactionFailureIncompatibleEra
        {
            get
            {
                return this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra" />.
        /// </summary>
        public Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra AsEvaluateTransactionFailureUnsupportedEra
        {
            get
            {
                return this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra" />.
        /// </summary>
        public bool IsEvaluateTransactionFailureUnsupportedEra
        {
            get
            {
                return this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo" />.
        /// </summary>
        public Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo AsEvaluateTransactionFailureOverlappingAdditionalUtxo
        {
            get
            {
                return this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo" />.
        /// </summary>
        public bool IsEvaluateTransactionFailureOverlappingAdditionalUtxo
        {
            get
            {
                return this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld" />.
        /// </summary>
        public Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld AsEvaluateTransactionFailureNodeTipTooOld
        {
            get
            {
                return this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld" />.
        /// </summary>
        public bool IsEvaluateTransactionFailureNodeTipTooOld
        {
            get
            {
                return this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext" />.
        /// </summary>
        public Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext AsEvaluateTransactionFailureCannotCreateEvaluationContext
        {
            get
            {
                return this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext" />.
        /// </summary>
        public bool IsEvaluateTransactionFailureCannotCreateEvaluationContext
        {
            get
            {
                return this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure" />.
        /// </summary>
        public Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure AsEvaluateTransactionFailureScriptExecutionFailure
        {
            get
            {
                return this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure" />.
        /// </summary>
        public bool IsEvaluateTransactionFailureScriptExecutionFailure
        {
            get
            {
                return this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure>().IsValid();
            }
        }

        /// <inheritdoc/>
        public bool HasJsonElementBacking
        {
            get
            {
                return (this.backing & Backing.JsonElement) != 0;
            }
        }

        /// <inheritdoc/>
        public bool HasDotnetBacking
        {
            get
            {
                return (this.backing & Backing.Dotnet) != 0;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return this.jsonElementBacking.ValueKind;
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    return JsonValueKind.Object;
                }

                return JsonValueKind.Undefined;
            }
        }

        /// <summary>
        /// Conversion from JsonAny.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator EvaluateTransactionFailure(JsonAny value)
        {
            return value.As<EvaluateTransactionFailure>();
        }

        /// <summary>
        /// Conversion to JsonAny.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonAny(EvaluateTransactionFailure value)
        {
            return value.AsAny;
        }

        /// <summary>
        /// Conversion to <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra(EvaluateTransactionFailure value)
        {
            return value.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra>();
        }

        /// <summary>
        /// Conversion from <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator EvaluateTransactionFailure(Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra value)
        {
            return value.As<EvaluateTransactionFailure>();
        }

        /// <summary>
        /// Conversion to <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra(EvaluateTransactionFailure value)
        {
            return value.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra>();
        }

        /// <summary>
        /// Conversion from <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator EvaluateTransactionFailure(Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra value)
        {
            return value.As<EvaluateTransactionFailure>();
        }

        /// <summary>
        /// Conversion to <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo(EvaluateTransactionFailure value)
        {
            return value.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo>();
        }

        /// <summary>
        /// Conversion from <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator EvaluateTransactionFailure(Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo value)
        {
            return value.As<EvaluateTransactionFailure>();
        }

        /// <summary>
        /// Conversion to <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld(EvaluateTransactionFailure value)
        {
            return value.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld>();
        }

        /// <summary>
        /// Conversion from <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator EvaluateTransactionFailure(Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld value)
        {
            return value.As<EvaluateTransactionFailure>();
        }

        /// <summary>
        /// Conversion to <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext(EvaluateTransactionFailure value)
        {
            return value.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext>();
        }

        /// <summary>
        /// Conversion from <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator EvaluateTransactionFailure(Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext value)
        {
            return value.As<EvaluateTransactionFailure>();
        }

        /// <summary>
        /// Conversion to <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure(EvaluateTransactionFailure value)
        {
            return value.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure>();
        }

        /// <summary>
        /// Conversion from <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator EvaluateTransactionFailure(Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure value)
        {
            return value.As<EvaluateTransactionFailure>();
        }

        /// <summary>
        /// Operator ==.
        /// </summary>
        /// <param name="left">The lhs of the operator.</param>
        /// <param name="right">The rhs of the operator.</param>
        /// <returns>
        /// <c>True</c> if the values are equal.
        /// </returns>
        public static bool operator ==(in EvaluateTransactionFailure left, in EvaluateTransactionFailure right)
        {
            return left.Equals(right);
        }

        /// <summary>
        /// Operator !=.
        /// </summary>
        /// <param name="left">The lhs of the operator.</param>
        /// <param name="right">The rhs of the operator.</param>
        /// <returns>
        /// <c>True</c> if the values are not equal.
        /// </returns>
        public static bool operator !=(in EvaluateTransactionFailure left, in EvaluateTransactionFailure right)
        {
            return !left.Equals(right);
        }

        /// <summary>
        /// Gets an instance of the JSON value from a <see cref="JsonElement"/> value.
        /// </summary>
        /// <param name="value">The <see cref="JsonElement"/> value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the <see cref="JsonElement"/>.</returns>
        /// <remarks>The returned value will have a <see cref = "IJsonValue.ValueKind"/> of <see cref = "JsonValueKind.Undefined"/> if the
        /// value cannot be constructed from the given instance (e.g. because they have an incompatible .NET backing type).
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static EvaluateTransactionFailure FromJson(in JsonElement value)
        {
            return new(value);
        }

        /// <summary>
        /// Gets an instance of the JSON value from a <see cref="JsonAny"/> value.
        /// </summary>
        /// <param name="value">The <see cref="JsonAny"/> value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the <see cref="JsonAny"/> value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static EvaluateTransactionFailure FromAny(in JsonAny value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new(value.AsObject.AsPropertyBacking()),
                JsonValueKind.Null => Null,
                _ => Undefined,
            };
        }

#if NET8_0_OR_GREATER
        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static EvaluateTransactionFailure IJsonValue<EvaluateTransactionFailure>.FromBoolean<TValue>(in TValue value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return Undefined;
        }
#endif

#if NET8_0_OR_GREATER
        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static EvaluateTransactionFailure IJsonValue<EvaluateTransactionFailure>.FromString<TValue>(in TValue value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return Undefined;
        }
#endif

#if NET8_0_OR_GREATER
        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static EvaluateTransactionFailure IJsonValue<EvaluateTransactionFailure>.FromNumber<TValue>(in TValue value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return Undefined;
        }
#endif

        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static EvaluateTransactionFailure FromObject<TValue>(in TValue value)
            where TValue : struct, IJsonObject<TValue>
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new(value.AsPropertyBacking()),
                JsonValueKind.Null => Null,
                _ => Undefined,
            };
        }

#if NET8_0_OR_GREATER
        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static EvaluateTransactionFailure IJsonValue<EvaluateTransactionFailure>.FromArray<TValue>(in TValue value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return Undefined;
        }
#endif

        /// <summary>
        /// Parses the EvaluateTransactionFailure.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static EvaluateTransactionFailure Parse(string source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the EvaluateTransactionFailure.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static EvaluateTransactionFailure Parse(Stream source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the EvaluateTransactionFailure.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static EvaluateTransactionFailure Parse(ReadOnlyMemory<byte> source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the EvaluateTransactionFailure.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static EvaluateTransactionFailure Parse(ReadOnlyMemory<char> source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the EvaluateTransactionFailure.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static EvaluateTransactionFailure Parse(ReadOnlySequence<byte> source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the EvaluateTransactionFailure.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static EvaluateTransactionFailure ParseValue(string source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<EvaluateTransactionFailure>.ParseValue(source);
#else
            return JsonValueHelpers.ParseValue<EvaluateTransactionFailure>(source.AsSpan());
#endif
        }

        /// <summary>
        /// Parses the EvaluateTransactionFailure.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static EvaluateTransactionFailure ParseValue(ReadOnlySpan<char> source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<EvaluateTransactionFailure>.ParseValue(source);
#else
            return JsonValueHelpers.ParseValue<EvaluateTransactionFailure>(source);
#endif
        }

        /// <summary>
        /// Parses the EvaluateTransactionFailure.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static EvaluateTransactionFailure ParseValue(ReadOnlySpan<byte> source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<EvaluateTransactionFailure>.ParseValue(source);
#else
            return JsonValueHelpers.ParseValue<EvaluateTransactionFailure>(source);
#endif
        }

        /// <summary>
        /// Parses the EvaluateTransactionFailure.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static EvaluateTransactionFailure ParseValue(ref Utf8JsonReader source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<EvaluateTransactionFailure>.ParseValue(ref source);
#else
            return JsonValueHelpers.ParseValue<EvaluateTransactionFailure>(ref source);
#endif
        }

        /// <summary>
        /// Gets the value as an instance of the target value.
        /// </summary>
        /// <typeparam name="TTarget">The type of the target.</typeparam>
        /// <returns>An instance of the target type.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TTarget As<TTarget>()
            where TTarget : struct, IJsonValue<TTarget>
        {
#if NET8_0_OR_GREATER
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return TTarget.FromJson(this.jsonElementBacking);
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return TTarget.FromObject(this.AsObject);
            }

            if ((this.backing & Backing.Null) != 0)
            {
                return TTarget.Null;
            }

            return TTarget.Undefined;
#else
            return this.As<EvaluateTransactionFailure, TTarget>();
#endif
        }

        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            return
                (obj is IJsonValue jv && this.Equals(jv.As<EvaluateTransactionFailure>())) ||
                (obj is null && this.IsNull());
        }

        /// <inheritdoc/>
        public bool Equals<T>(in T other)
            where T : struct, IJsonValue<T>
        {
            return this.Equals(other.As<EvaluateTransactionFailure>());
        }

        /// <summary>
        /// Equality comparison.
        /// </summary>
        /// <param name="other">The other item with which to compare.</param>
        /// <returns><see langword="true"/> if the values were equal.</returns>
        public bool Equals(in EvaluateTransactionFailure other)
        {
            JsonValueKind thisKind = this.ValueKind;
            JsonValueKind otherKind = other.ValueKind;
            if (thisKind != otherKind)
            {
                return false;
            }

            if (thisKind == JsonValueKind.Null || thisKind == JsonValueKind.Undefined)
            {
                return true;
            }

            if (thisKind == JsonValueKind.Object)
            {
                JsonObject thisObject = this.AsObject;
                JsonObject otherObject = other.AsObject;
                int count = 0;
                foreach (JsonObjectProperty property in thisObject.EnumerateObject())
                {
                    if (!otherObject.TryGetProperty(property.Name, out JsonAny value) || !property.Value.Equals(value))
                    {
                        return false;
                    }

                    count++;
                }

                int otherCount = 0;
                foreach (JsonObjectProperty otherProperty in otherObject.EnumerateObject())
                {
                    otherCount++;
                    if (otherCount > count)
                    {
                        return false;
                    }
                }

                return count == otherCount;
            }

            return false;
        }

        /// <inheritdoc/>
        public void WriteTo(Utf8JsonWriter writer)
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                }

                return;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                JsonValueHelpers.WriteProperties(this.objectBacking, writer);

                return;
            }

            if ((this.backing & Backing.Null) != 0)
            {
                writer.WriteNullValue();

                return;
            }
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            return this.ValueKind switch
            {
                JsonValueKind.Array => JsonValueHelpers.GetArrayHashCode(((IJsonValue)this).AsArray),
                JsonValueKind.Object => JsonValueHelpers.GetObjectHashCode(this),
                JsonValueKind.Number => JsonValueHelpers.GetHashCodeForNumber(((IJsonValue)this).AsNumber),
                JsonValueKind.String => JsonValueHelpers.GetHashCodeForString(((IJsonValue)this).AsString),
                JsonValueKind.True => true.GetHashCode(),
                JsonValueKind.False => false.GetHashCode(),
                JsonValueKind.Null => JsonValueHelpers.NullHashCode,
                _ => JsonValueHelpers.UndefinedHashCode,
            };
        }

        /// <inheritdoc/>
        public override string ToString()
        {
            return this.Serialize();
        }

        /// <summary>
        /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <typeparam name="TIn">The immutable context to pass in to the match function.</typeparam>
        /// <typeparam name="TOut">The result of calling the match function.</typeparam>
        /// <param name="context">The context to pass to the match function.</param>
        /// <param name="matchEvaluateTransactionFailureIncompatibleEra">Match a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra"/>.</param>
        /// <param name="matchEvaluateTransactionFailureUnsupportedEra">Match a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra"/>.</param>
        /// <param name="matchEvaluateTransactionFailureOverlappingAdditionalUtxo">Match a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo"/>.</param>
        /// <param name="matchEvaluateTransactionFailureNodeTipTooOld">Match a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld"/>.</param>
        /// <param name="matchEvaluateTransactionFailureCannotCreateEvaluationContext">Match a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext"/>.</param>
        /// <param name="matchEvaluateTransactionFailureScriptExecutionFailure">Match a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure"/>.</param>
        /// <param name="defaultMatch">Match any other value.</param>
        /// <returns>An instance of the value returned by the match function.</returns>
        public TOut Match<TIn, TOut>(
            in TIn context,
            Matcher<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra, TIn, TOut> matchEvaluateTransactionFailureIncompatibleEra,
            Matcher<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra, TIn, TOut> matchEvaluateTransactionFailureUnsupportedEra,
            Matcher<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo, TIn, TOut> matchEvaluateTransactionFailureOverlappingAdditionalUtxo,
            Matcher<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld, TIn, TOut> matchEvaluateTransactionFailureNodeTipTooOld,
            Matcher<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext, TIn, TOut> matchEvaluateTransactionFailureCannotCreateEvaluationContext,
            Matcher<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure, TIn, TOut> matchEvaluateTransactionFailureScriptExecutionFailure,
            Matcher<Generated.Ogmios.EvaluateTransactionFailure, TIn, TOut> defaultMatch)
        {
            Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra matchEvaluateTransactionFailureIncompatibleEraValue = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra>();
            if (matchEvaluateTransactionFailureIncompatibleEraValue.IsValid())
            {
                return matchEvaluateTransactionFailureIncompatibleEra(matchEvaluateTransactionFailureIncompatibleEraValue, context);
            }

            Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra matchEvaluateTransactionFailureUnsupportedEraValue = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra>();
            if (matchEvaluateTransactionFailureUnsupportedEraValue.IsValid())
            {
                return matchEvaluateTransactionFailureUnsupportedEra(matchEvaluateTransactionFailureUnsupportedEraValue, context);
            }

            Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo matchEvaluateTransactionFailureOverlappingAdditionalUtxoValue = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo>();
            if (matchEvaluateTransactionFailureOverlappingAdditionalUtxoValue.IsValid())
            {
                return matchEvaluateTransactionFailureOverlappingAdditionalUtxo(matchEvaluateTransactionFailureOverlappingAdditionalUtxoValue, context);
            }

            Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld matchEvaluateTransactionFailureNodeTipTooOldValue = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld>();
            if (matchEvaluateTransactionFailureNodeTipTooOldValue.IsValid())
            {
                return matchEvaluateTransactionFailureNodeTipTooOld(matchEvaluateTransactionFailureNodeTipTooOldValue, context);
            }

            Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext matchEvaluateTransactionFailureCannotCreateEvaluationContextValue = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext>();
            if (matchEvaluateTransactionFailureCannotCreateEvaluationContextValue.IsValid())
            {
                return matchEvaluateTransactionFailureCannotCreateEvaluationContext(matchEvaluateTransactionFailureCannotCreateEvaluationContextValue, context);
            }

            Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure matchEvaluateTransactionFailureScriptExecutionFailureValue = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure>();
            if (matchEvaluateTransactionFailureScriptExecutionFailureValue.IsValid())
            {
                return matchEvaluateTransactionFailureScriptExecutionFailure(matchEvaluateTransactionFailureScriptExecutionFailureValue, context);
            }

            return defaultMatch(this, context);
        }

        /// <summary>
        /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <typeparam name="TOut">The result of calling the match function.</typeparam>
        /// <param name="matchEvaluateTransactionFailureIncompatibleEra">Match a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra"/>.</param>
        /// <param name="matchEvaluateTransactionFailureUnsupportedEra">Match a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra"/>.</param>
        /// <param name="matchEvaluateTransactionFailureOverlappingAdditionalUtxo">Match a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo"/>.</param>
        /// <param name="matchEvaluateTransactionFailureNodeTipTooOld">Match a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld"/>.</param>
        /// <param name="matchEvaluateTransactionFailureCannotCreateEvaluationContext">Match a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext"/>.</param>
        /// <param name="matchEvaluateTransactionFailureScriptExecutionFailure">Match a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure"/>.</param>
        /// <param name="defaultMatch">Match any other value.</param>
        /// <returns>An instance of the value returned by the match function.</returns>
        public TOut Match<TOut>(
            Matcher<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra, TOut> matchEvaluateTransactionFailureIncompatibleEra,
            Matcher<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra, TOut> matchEvaluateTransactionFailureUnsupportedEra,
            Matcher<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo, TOut> matchEvaluateTransactionFailureOverlappingAdditionalUtxo,
            Matcher<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld, TOut> matchEvaluateTransactionFailureNodeTipTooOld,
            Matcher<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext, TOut> matchEvaluateTransactionFailureCannotCreateEvaluationContext,
            Matcher<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure, TOut> matchEvaluateTransactionFailureScriptExecutionFailure,
            Matcher<Generated.Ogmios.EvaluateTransactionFailure, TOut> defaultMatch)
        {
            Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra matchEvaluateTransactionFailureIncompatibleEraValue = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra>();
            if (matchEvaluateTransactionFailureIncompatibleEraValue.IsValid())
            {
                return matchEvaluateTransactionFailureIncompatibleEra(matchEvaluateTransactionFailureIncompatibleEraValue);
            }

            Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra matchEvaluateTransactionFailureUnsupportedEraValue = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra>();
            if (matchEvaluateTransactionFailureUnsupportedEraValue.IsValid())
            {
                return matchEvaluateTransactionFailureUnsupportedEra(matchEvaluateTransactionFailureUnsupportedEraValue);
            }

            Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo matchEvaluateTransactionFailureOverlappingAdditionalUtxoValue = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo>();
            if (matchEvaluateTransactionFailureOverlappingAdditionalUtxoValue.IsValid())
            {
                return matchEvaluateTransactionFailureOverlappingAdditionalUtxo(matchEvaluateTransactionFailureOverlappingAdditionalUtxoValue);
            }

            Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld matchEvaluateTransactionFailureNodeTipTooOldValue = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld>();
            if (matchEvaluateTransactionFailureNodeTipTooOldValue.IsValid())
            {
                return matchEvaluateTransactionFailureNodeTipTooOld(matchEvaluateTransactionFailureNodeTipTooOldValue);
            }

            Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext matchEvaluateTransactionFailureCannotCreateEvaluationContextValue = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext>();
            if (matchEvaluateTransactionFailureCannotCreateEvaluationContextValue.IsValid())
            {
                return matchEvaluateTransactionFailureCannotCreateEvaluationContext(matchEvaluateTransactionFailureCannotCreateEvaluationContextValue);
            }

            Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure matchEvaluateTransactionFailureScriptExecutionFailureValue = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure>();
            if (matchEvaluateTransactionFailureScriptExecutionFailureValue.IsValid())
            {
                return matchEvaluateTransactionFailureScriptExecutionFailure(matchEvaluateTransactionFailureScriptExecutionFailureValue);
            }

            return defaultMatch(this);
        }

        /// <summary>
        /// Gets the value as a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsEvaluateTransactionFailureIncompatibleEra(out Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra result)
        {
            result = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureIncompatibleEra>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsEvaluateTransactionFailureUnsupportedEra(out Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra result)
        {
            result = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureUnsupportedEra>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsEvaluateTransactionFailureOverlappingAdditionalUtxo(out Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo result)
        {
            result = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureOverlappingAdditionalUtxo>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsEvaluateTransactionFailureNodeTipTooOld(out Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld result)
        {
            result = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureNodeTipTooOld>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsEvaluateTransactionFailureCannotCreateEvaluationContext(out Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext result)
        {
            result = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureCannotCreateEvaluationContext>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsEvaluateTransactionFailureScriptExecutionFailure(out Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure result)
        {
            result = this.As<Generated.Ogmios.EvaluateTransactionFailure.EvaluateTransactionFailureScriptExecutionFailure>();
            return result.IsValid();
        }
    }
}
