//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using System.Text.RegularExpressions;
using Corvus.Json;

namespace Generated;

/// <summary>
/// ogmios
/// </summary>
public readonly partial struct Ogmios
{
    /// <summary>
    /// AnyStakeCredential
    /// </summary>
    public readonly partial struct AnyStakeCredential
    {
        /// <summary>
        /// Bech32&lt;stake_vkh, script&gt;
        /// </summary>
        /// <remarks>
        /// <para>
        /// A Blake2b 28-byte hash digest of a verification key or script.
        /// </para>
        /// <para>
        /// Examples:
        /// <example>
        /// <code>
        /// script1dss9g887v3rdmadpq3n44d5ph3ma4aha2rtxfdsnnftykaau8x7
        /// </code>
        /// </example>
        /// <example>
        /// <code>
        /// stake_vkh1dss9g887v3rdmadpq3n44d5ph3ma4aha2rtxfdsnnftyklueu8u
        /// </code>
        /// </example>
        /// </para>
        /// </remarks>
        public readonly partial struct Bech32StakeVkhScript
        {
            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;
                if (level > ValidationLevel.Flag && !result.IsUsingResults)
                {
                    result = result.UsingResults();
                }

                if (level > ValidationLevel.Basic)
                {
                    if (!result.IsUsingStack)
                    {
                        result = result.UsingStack();
                    }

                    result = result.PushSchemaLocation("OgmiosDotnet/src/Ogmios.Schema/Ogmios/v6.12/Source/ogmios.json#/definitions/AnyStakeCredential/oneOf/1");
                }

                JsonValueKind valueKind = this.ValueKind;

                result = CorvusValidation.TypeValidationHandler(valueKind, result, level);

                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = CorvusValidation.FormatValidationHandler(this, valueKind, result, level);

                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = CorvusValidation.StringValidationHandler(this, valueKind, result, level);

                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation();
                }

                return result;
            }

            /// <summary>
            /// Validation constants for the type.
            /// </summary>
            public static partial class CorvusValidation
            {
                /// <summary>
                /// A regular expression for the <c>pattern</c> keyword.
                /// </summary>
                public static readonly Regex Pattern = CreatePattern();

                /// <summary>
                /// Core type validation.
                /// </summary>
                /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
                /// <param name="validationContext">The current validation context.</param>
                /// <param name="level">The current validation level.</param>
                /// <returns>The resulting validation context after validation.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                internal static ValidationContext TypeValidationHandler(
                    JsonValueKind valueKind,
                    in ValidationContext validationContext,
                    ValidationLevel level = ValidationLevel.Flag)
                {
                    return Corvus.Json.ValidateWithoutCoreType.TypeString(valueKind, validationContext, level, "type");
                }

                /// <summary>
                /// Numeric and string format validation.
                /// </summary>
                /// <param name="value">The value to validate.</param>
                /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
                /// <param name="validationContext">The current validation context.</param>
                /// <param name="level">The current validation level.</param>
                /// <returns>The resulting validation context after validation.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                internal static ValidationContext FormatValidationHandler(
                    in Bech32StakeVkhScript value,
                    JsonValueKind valueKind,
                    in ValidationContext validationContext,
                    ValidationLevel level = ValidationLevel.Flag)
                {
                    return validationContext;
                }

                /// <summary>
                /// String validation.
                /// </summary>
                /// <param name="value">The value to validate.</param>
                /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
                /// <param name="validationContext">The current validation context.</param>
                /// <param name="level">The current validation level.</param>
                /// <returns>The resulting validation context after validation.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                internal static ValidationContext StringValidationHandler(
                    in Bech32StakeVkhScript value,
                    JsonValueKind valueKind,
                    in ValidationContext validationContext,
                    ValidationLevel level = ValidationLevel.Flag)
                {
                    if (valueKind != JsonValueKind.String)
                    {
                        if (level == ValidationLevel.Verbose)
                        {
                            ValidationContext ignoredResult = validationContext;
                            ignoredResult = ignoredResult.WithResult(isValid: true, "Validation pattern - ignored because the value is not a string", "pattern");

                            return ignoredResult;
                        }

                        return validationContext;
                    }

                    ValidationContext result = validationContext;
                    value.TryGetValue(StringValidator, new Corvus.Json.Validate.ValidationContextWrapper(result, level), out result);

                    return result;

                    static bool StringValidator(ReadOnlySpan<char> input, in Corvus.Json.Validate.ValidationContextWrapper context, out ValidationContext result)
                    {
                        result = context.Context;

                        if (Pattern.IsMatch(input))
                        {
                            if (context.Level == ValidationLevel.Verbose)
                            {
                                result = result.WithResult(isValid: true, validationLocationReducedPathModifier: new JsonReference("pattern"), $"Validation pattern - {input.ToString()} matched '^(stake_vkh|script)1[0-9a-z]*$'");
                            }
                        }
                        else
                        {
                            if (context.Level == ValidationLevel.Flag)
                            {
                                result = context.Context.WithResult(isValid: false);
                                return true;
                            }
                            else if (context.Level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, validationLocationReducedPathModifier: new JsonReference("pattern"), $"Validation pattern - {input.ToString()} did not match '^(stake_vkh|script)1[0-9a-z]*$'");
                            }
                            else
                            {
                                result = result.WithResult(isValid: false, validationLocationReducedPathModifier: new JsonReference("pattern"), "Validation pattern - The value did not match '^(stake_vkh|script)1[0-9a-z]*$'");
                            }
                        }

                        return true;
                    }
                }

#if NET8_0_OR_GREATER && !DYNAMIC_BUILD
                [GeneratedRegex("^(stake_vkh|script)1[0-9a-z]*$")]
                private static partial Regex CreatePattern();
#else
                private static Regex CreatePattern() => new("^(stake_vkh|script)1[0-9a-z]*$", RegexOptions.Compiled);
#endif
            }
        }
    }
}
