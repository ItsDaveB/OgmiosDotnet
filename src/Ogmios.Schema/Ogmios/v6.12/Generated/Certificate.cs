//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Buffers;
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Generated;
/// <summary>
/// Certificate
/// </summary>
[System.Text.Json.Serialization.JsonConverter(typeof(Corvus.Json.Internal.JsonValueConverter<Certificate>))]
public readonly partial struct Certificate
    : IJsonValue<Generated.Certificate>
{
    private readonly Backing backing;
    private readonly JsonElement jsonElementBacking;
    private readonly ImmutableList<JsonObjectProperty> objectBacking;

    /// <summary>
    /// Initializes a new instance of the <see cref="Certificate"/> struct.
    /// </summary>
    public Certificate()
    {
        this.jsonElementBacking = default;
        this.backing = Backing.JsonElement;
        this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Certificate"/> struct.
    /// </summary>
    /// <param name="value">The value from which to construct the instance.</param>
    public Certificate(in JsonElement value)
    {
        this.jsonElementBacking = value;
        this.backing = Backing.JsonElement;
        this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Certificate"/> struct.
    /// </summary>
    /// <param name="value">The value from which to construct the instance.</param>
    public Certificate(ImmutableList<JsonObjectProperty> value)
    {
        this.backing = Backing.Object;
        this.jsonElementBacking = default;
        this.objectBacking = value;
    }

    /// <summary>
    /// Gets the schema location from which this type was generated.
    /// </summary>
    public static string SchemaLocation { get; } = "https://endjin.com/Users/davebeaumont/source/cardano-public/OgmiosDotnet/src/Ogmios.Schema/Ogmios/v6.12/Source/cardano.json#/definitions/Certificate";

    /// <summary>
    /// Gets a Null instance.
    /// </summary>
    public static Certificate Null { get; } = new(JsonValueHelpers.NullElement);

    /// <summary>
    /// Gets an Undefined instance.
    /// </summary>
    public static Certificate Undefined { get; }

    /// <summary>
    /// Gets the default instance.
    /// </summary>
    public static Certificate DefaultInstance { get; }

    /// <inheritdoc/>
    public JsonAny AsAny
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return new(this.objectBacking);
            }

            if ((this.backing & Backing.Null) != 0)
            {
                return JsonAny.Null;
            }

            return JsonAny.Undefined;
        }
    }

    /// <inheritdoc/>
    public JsonElement AsJsonElement
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return JsonValueHelpers.ObjectToJsonElement(this.objectBacking);
            }

            if ((this.backing & Backing.Null) != 0)
            {
                return JsonValueHelpers.NullElement;
            }

            return default;
        }
    }

    /// <inheritdoc/>
    JsonString IJsonValue.AsString
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    JsonBoolean IJsonValue.AsBoolean
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    JsonNumber IJsonValue.AsNumber
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    public JsonObject AsObject
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return new(this.objectBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    JsonArray IJsonValue.AsArray
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.Certificate.StakeDelegation" />.
    /// </summary>
    public Generated.Certificate.StakeDelegation AsStakeDelegation
    {
        get
        {
            return this.As<Generated.Certificate.StakeDelegation>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.Certificate.StakeDelegation" />.
    /// </summary>
    public bool IsStakeDelegation
    {
        get
        {
            return this.As<Generated.Certificate.StakeDelegation>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.Certificate.StakeCredentialRegistration" />.
    /// </summary>
    public Generated.Certificate.StakeCredentialRegistration AsStakeCredentialRegistration
    {
        get
        {
            return this.As<Generated.Certificate.StakeCredentialRegistration>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.Certificate.StakeCredentialRegistration" />.
    /// </summary>
    public bool IsStakeCredentialRegistration
    {
        get
        {
            return this.As<Generated.Certificate.StakeCredentialRegistration>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.Certificate.DelegateRepresentativeRetirement" />.
    /// </summary>
    public Generated.Certificate.DelegateRepresentativeRetirement AsDelegateRepresentativeRetirement
    {
        get
        {
            return this.As<Generated.Certificate.DelegateRepresentativeRetirement>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.Certificate.DelegateRepresentativeRetirement" />.
    /// </summary>
    public bool IsDelegateRepresentativeRetirement
    {
        get
        {
            return this.As<Generated.Certificate.DelegateRepresentativeRetirement>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.Certificate.StakeCredentialDeregistration" />.
    /// </summary>
    public Generated.Certificate.StakeCredentialDeregistration AsStakeCredentialDeregistration
    {
        get
        {
            return this.As<Generated.Certificate.StakeCredentialDeregistration>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.Certificate.StakeCredentialDeregistration" />.
    /// </summary>
    public bool IsStakeCredentialDeregistration
    {
        get
        {
            return this.As<Generated.Certificate.StakeCredentialDeregistration>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.Certificate.StakePoolRegistration" />.
    /// </summary>
    public Generated.Certificate.StakePoolRegistration AsStakePoolRegistration
    {
        get
        {
            return this.As<Generated.Certificate.StakePoolRegistration>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.Certificate.StakePoolRegistration" />.
    /// </summary>
    public bool IsStakePoolRegistration
    {
        get
        {
            return this.As<Generated.Certificate.StakePoolRegistration>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.Certificate.StakePoolRetirement" />.
    /// </summary>
    public Generated.Certificate.StakePoolRetirement AsStakePoolRetirement
    {
        get
        {
            return this.As<Generated.Certificate.StakePoolRetirement>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.Certificate.StakePoolRetirement" />.
    /// </summary>
    public bool IsStakePoolRetirement
    {
        get
        {
            return this.As<Generated.Certificate.StakePoolRetirement>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.Certificate.GenesisDelegation" />.
    /// </summary>
    public Generated.Certificate.GenesisDelegation AsGenesisDelegation
    {
        get
        {
            return this.As<Generated.Certificate.GenesisDelegation>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.Certificate.GenesisDelegation" />.
    /// </summary>
    public bool IsGenesisDelegation
    {
        get
        {
            return this.As<Generated.Certificate.GenesisDelegation>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.Certificate.ConstitutionalCommitteeDelegation" />.
    /// </summary>
    public Generated.Certificate.ConstitutionalCommitteeDelegation AsConstitutionalCommitteeDelegation
    {
        get
        {
            return this.As<Generated.Certificate.ConstitutionalCommitteeDelegation>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.Certificate.ConstitutionalCommitteeDelegation" />.
    /// </summary>
    public bool IsConstitutionalCommitteeDelegation
    {
        get
        {
            return this.As<Generated.Certificate.ConstitutionalCommitteeDelegation>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.Certificate.ConstitutionalCommitteeRetirement" />.
    /// </summary>
    public Generated.Certificate.ConstitutionalCommitteeRetirement AsConstitutionalCommitteeRetirement
    {
        get
        {
            return this.As<Generated.Certificate.ConstitutionalCommitteeRetirement>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.Certificate.ConstitutionalCommitteeRetirement" />.
    /// </summary>
    public bool IsConstitutionalCommitteeRetirement
    {
        get
        {
            return this.As<Generated.Certificate.ConstitutionalCommitteeRetirement>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.Certificate.DelegateRepresentativeRegistration" />.
    /// </summary>
    public Generated.Certificate.DelegateRepresentativeRegistration AsDelegateRepresentativeRegistration
    {
        get
        {
            return this.As<Generated.Certificate.DelegateRepresentativeRegistration>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.Certificate.DelegateRepresentativeRegistration" />.
    /// </summary>
    public bool IsDelegateRepresentativeRegistration
    {
        get
        {
            return this.As<Generated.Certificate.DelegateRepresentativeRegistration>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.Certificate.DelegateRepresentativeUpdate" />.
    /// </summary>
    public Generated.Certificate.DelegateRepresentativeUpdate AsDelegateRepresentativeUpdate
    {
        get
        {
            return this.As<Generated.Certificate.DelegateRepresentativeUpdate>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.Certificate.DelegateRepresentativeUpdate" />.
    /// </summary>
    public bool IsDelegateRepresentativeUpdate
    {
        get
        {
            return this.As<Generated.Certificate.DelegateRepresentativeUpdate>().IsValid();
        }
    }

    /// <inheritdoc/>
    public bool HasJsonElementBacking
    {
        get
        {
            return (this.backing & Backing.JsonElement) != 0;
        }
    }

    /// <inheritdoc/>
    public bool HasDotnetBacking
    {
        get
        {
            return (this.backing & Backing.Dotnet) != 0;
        }
    }

    /// <inheritdoc/>
    public JsonValueKind ValueKind
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking.ValueKind;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return JsonValueKind.Object;
            }

            return JsonValueKind.Undefined;
        }
    }

    /// <summary>
    /// Conversion from JsonAny.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Certificate(JsonAny value)
    {
        return value.As<Certificate>();
    }

    /// <summary>
    /// Conversion to JsonAny.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator JsonAny(Certificate value)
    {
        return value.AsAny;
    }

    /// <summary>
    /// Conversion to <see cref="Generated.Certificate.StakeDelegation"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.Certificate.StakeDelegation(Certificate value)
    {
        return value.As<Generated.Certificate.StakeDelegation>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.Certificate.StakeDelegation"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Certificate(Generated.Certificate.StakeDelegation value)
    {
        return value.As<Certificate>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.Certificate.StakeCredentialRegistration"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.Certificate.StakeCredentialRegistration(Certificate value)
    {
        return value.As<Generated.Certificate.StakeCredentialRegistration>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.Certificate.StakeCredentialRegistration"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Certificate(Generated.Certificate.StakeCredentialRegistration value)
    {
        return value.As<Certificate>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.Certificate.DelegateRepresentativeRetirement"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.Certificate.DelegateRepresentativeRetirement(Certificate value)
    {
        return value.As<Generated.Certificate.DelegateRepresentativeRetirement>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.Certificate.DelegateRepresentativeRetirement"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Certificate(Generated.Certificate.DelegateRepresentativeRetirement value)
    {
        return value.As<Certificate>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.Certificate.StakeCredentialDeregistration"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.Certificate.StakeCredentialDeregistration(Certificate value)
    {
        return value.As<Generated.Certificate.StakeCredentialDeregistration>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.Certificate.StakeCredentialDeregistration"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Certificate(Generated.Certificate.StakeCredentialDeregistration value)
    {
        return value.As<Certificate>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.Certificate.StakePoolRegistration"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.Certificate.StakePoolRegistration(Certificate value)
    {
        return value.As<Generated.Certificate.StakePoolRegistration>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.Certificate.StakePoolRegistration"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Certificate(Generated.Certificate.StakePoolRegistration value)
    {
        return value.As<Certificate>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.Certificate.StakePoolRetirement"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.Certificate.StakePoolRetirement(Certificate value)
    {
        return value.As<Generated.Certificate.StakePoolRetirement>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.Certificate.StakePoolRetirement"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Certificate(Generated.Certificate.StakePoolRetirement value)
    {
        return value.As<Certificate>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.Certificate.GenesisDelegation"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.Certificate.GenesisDelegation(Certificate value)
    {
        return value.As<Generated.Certificate.GenesisDelegation>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.Certificate.GenesisDelegation"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Certificate(Generated.Certificate.GenesisDelegation value)
    {
        return value.As<Certificate>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.Certificate.ConstitutionalCommitteeDelegation"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.Certificate.ConstitutionalCommitteeDelegation(Certificate value)
    {
        return value.As<Generated.Certificate.ConstitutionalCommitteeDelegation>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.Certificate.ConstitutionalCommitteeDelegation"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Certificate(Generated.Certificate.ConstitutionalCommitteeDelegation value)
    {
        return value.As<Certificate>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.Certificate.ConstitutionalCommitteeRetirement"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.Certificate.ConstitutionalCommitteeRetirement(Certificate value)
    {
        return value.As<Generated.Certificate.ConstitutionalCommitteeRetirement>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.Certificate.ConstitutionalCommitteeRetirement"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Certificate(Generated.Certificate.ConstitutionalCommitteeRetirement value)
    {
        return value.As<Certificate>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.Certificate.DelegateRepresentativeRegistration"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.Certificate.DelegateRepresentativeRegistration(Certificate value)
    {
        return value.As<Generated.Certificate.DelegateRepresentativeRegistration>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.Certificate.DelegateRepresentativeRegistration"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Certificate(Generated.Certificate.DelegateRepresentativeRegistration value)
    {
        return value.As<Certificate>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.Certificate.DelegateRepresentativeUpdate"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.Certificate.DelegateRepresentativeUpdate(Certificate value)
    {
        return value.As<Generated.Certificate.DelegateRepresentativeUpdate>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.Certificate.DelegateRepresentativeUpdate"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Certificate(Generated.Certificate.DelegateRepresentativeUpdate value)
    {
        return value.As<Certificate>();
    }

    /// <summary>
    /// Operator ==.
    /// </summary>
    /// <param name="left">The lhs of the operator.</param>
    /// <param name="right">The rhs of the operator.</param>
    /// <returns>
    /// <c>True</c> if the values are equal.
    /// </returns>
    public static bool operator ==(in Certificate left, in Certificate right)
    {
        return left.Equals(right);
    }

    /// <summary>
    /// Operator !=.
    /// </summary>
    /// <param name="left">The lhs of the operator.</param>
    /// <param name="right">The rhs of the operator.</param>
    /// <returns>
    /// <c>True</c> if the values are not equal.
    /// </returns>
    public static bool operator !=(in Certificate left, in Certificate right)
    {
        return !left.Equals(right);
    }

    /// <summary>
    /// Gets an instance of the JSON value from a <see cref="JsonElement"/> value.
    /// </summary>
    /// <param name="value">The <see cref="JsonElement"/> value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the <see cref="JsonElement"/>.</returns>
    /// <remarks>The returned value will have a <see cref = "IJsonValue.ValueKind"/> of <see cref = "JsonValueKind.Undefined"/> if the
    /// value cannot be constructed from the given instance (e.g. because they have an incompatible .NET backing type).
    /// </remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Certificate FromJson(in JsonElement value)
    {
        return new(value);
    }

    /// <summary>
    /// Gets an instance of the JSON value from a <see cref="JsonAny"/> value.
    /// </summary>
    /// <param name="value">The <see cref="JsonAny"/> value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the <see cref="JsonAny"/> value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Certificate FromAny(in JsonAny value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsObject.AsPropertyBacking()),
            JsonValueKind.Null => Null,
            _ => Undefined,
        };
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static Certificate IJsonValue<Certificate>.FromBoolean<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static Certificate IJsonValue<Certificate>.FromString<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static Certificate IJsonValue<Certificate>.FromNumber<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Certificate FromObject<TValue>(in TValue value)
        where TValue : struct, IJsonObject<TValue>
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            JsonValueKind.Null => Null,
            _ => Undefined,
        };
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static Certificate IJsonValue<Certificate>.FromArray<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

    /// <summary>
    /// Parses the Certificate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static Certificate Parse(string source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the Certificate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static Certificate Parse(Stream source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the Certificate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static Certificate Parse(ReadOnlyMemory<byte> source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the Certificate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static Certificate Parse(ReadOnlyMemory<char> source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the Certificate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static Certificate Parse(ReadOnlySequence<byte> source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the Certificate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static Certificate ParseValue(string source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<Certificate>.ParseValue(source);
#else
        return JsonValueHelpers.ParseValue<Certificate>(source.AsSpan());
#endif
    }

    /// <summary>
    /// Parses the Certificate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static Certificate ParseValue(ReadOnlySpan<char> source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<Certificate>.ParseValue(source);
#else
        return JsonValueHelpers.ParseValue<Certificate>(source);
#endif
    }

    /// <summary>
    /// Parses the Certificate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static Certificate ParseValue(ReadOnlySpan<byte> source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<Certificate>.ParseValue(source);
#else
        return JsonValueHelpers.ParseValue<Certificate>(source);
#endif
    }

    /// <summary>
    /// Parses the Certificate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static Certificate ParseValue(ref Utf8JsonReader source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<Certificate>.ParseValue(ref source);
#else
        return JsonValueHelpers.ParseValue<Certificate>(ref source);
#endif
    }

    /// <summary>
    /// Gets the value as an instance of the target value.
    /// </summary>
    /// <typeparam name="TTarget">The type of the target.</typeparam>
    /// <returns>An instance of the target type.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public TTarget As<TTarget>()
        where TTarget : struct, IJsonValue<TTarget>
    {
#if NET8_0_OR_GREATER
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return TTarget.FromJson(this.jsonElementBacking);
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return TTarget.FromObject(this.AsObject);
        }

        if ((this.backing & Backing.Null) != 0)
        {
            return TTarget.Null;
        }

        return TTarget.Undefined;
#else
        return this.As<Certificate, TTarget>();
#endif
    }

    /// <inheritdoc/>
    public override bool Equals(object? obj)
    {
        return
            (obj is IJsonValue jv && this.Equals(jv.As<Certificate>())) ||
            (obj is null && this.IsNull());
    }

    /// <inheritdoc/>
    public bool Equals<T>(in T other)
        where T : struct, IJsonValue<T>
    {
        return this.Equals(other.As<Certificate>());
    }

    /// <summary>
    /// Equality comparison.
    /// </summary>
    /// <param name="other">The other item with which to compare.</param>
    /// <returns><see langword="true"/> if the values were equal.</returns>
    public bool Equals(in Certificate other)
    {
        JsonValueKind thisKind = this.ValueKind;
        JsonValueKind otherKind = other.ValueKind;
        if (thisKind != otherKind)
        {
            return false;
        }

        if (thisKind == JsonValueKind.Null || thisKind == JsonValueKind.Undefined)
        {
            return true;
        }

        if (thisKind == JsonValueKind.Object)
        {
            JsonObject thisObject = this.AsObject;
            JsonObject otherObject = other.AsObject;
            int count = 0;
            foreach (JsonObjectProperty property in thisObject.EnumerateObject())
            {
                if (!otherObject.TryGetProperty(property.Name, out JsonAny value) || !property.Value.Equals(value))
                {
                    return false;
                }

                count++;
            }

            int otherCount = 0;
            foreach (JsonObjectProperty otherProperty in otherObject.EnumerateObject())
            {
                otherCount++;
                if (otherCount > count)
                {
                    return false;
                }
            }

            return count == otherCount;
        }

        return false;
    }

    /// <inheritdoc/>
    public void WriteTo(Utf8JsonWriter writer)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
            }

            return;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            JsonValueHelpers.WriteProperties(this.objectBacking, writer);

            return;
        }

        if ((this.backing & Backing.Null) != 0)
        {
            writer.WriteNullValue();

            return;
        }
    }

    /// <inheritdoc/>
    public override int GetHashCode()
    {
        return this.ValueKind switch
        {
            JsonValueKind.Array => JsonValueHelpers.GetArrayHashCode(((IJsonValue)this).AsArray),
            JsonValueKind.Object => JsonValueHelpers.GetObjectHashCode(this),
            JsonValueKind.Number => JsonValueHelpers.GetHashCodeForNumber(((IJsonValue)this).AsNumber),
            JsonValueKind.String => JsonValueHelpers.GetHashCodeForString(((IJsonValue)this).AsString),
            JsonValueKind.True => true.GetHashCode(),
            JsonValueKind.False => false.GetHashCode(),
            JsonValueKind.Null => JsonValueHelpers.NullHashCode,
            _ => JsonValueHelpers.UndefinedHashCode,
        };
    }

    /// <inheritdoc/>
    public override string ToString()
    {
        return this.Serialize();
    }

    /// <summary>
    /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <typeparam name="TIn">The immutable context to pass in to the match function.</typeparam>
    /// <typeparam name="TOut">The result of calling the match function.</typeparam>
    /// <param name="context">The context to pass to the match function.</param>
    /// <param name="matchStakeDelegation">Match a <see cref="Generated.Certificate.StakeDelegation"/>.</param>
    /// <param name="matchStakeCredentialRegistration">Match a <see cref="Generated.Certificate.StakeCredentialRegistration"/>.</param>
    /// <param name="matchDelegateRepresentativeRetirement">Match a <see cref="Generated.Certificate.DelegateRepresentativeRetirement"/>.</param>
    /// <param name="matchStakeCredentialDeregistration">Match a <see cref="Generated.Certificate.StakeCredentialDeregistration"/>.</param>
    /// <param name="matchStakePoolRegistration">Match a <see cref="Generated.Certificate.StakePoolRegistration"/>.</param>
    /// <param name="matchStakePoolRetirement">Match a <see cref="Generated.Certificate.StakePoolRetirement"/>.</param>
    /// <param name="matchGenesisDelegation">Match a <see cref="Generated.Certificate.GenesisDelegation"/>.</param>
    /// <param name="matchConstitutionalCommitteeDelegation">Match a <see cref="Generated.Certificate.ConstitutionalCommitteeDelegation"/>.</param>
    /// <param name="matchConstitutionalCommitteeRetirement">Match a <see cref="Generated.Certificate.ConstitutionalCommitteeRetirement"/>.</param>
    /// <param name="matchDelegateRepresentativeRegistration">Match a <see cref="Generated.Certificate.DelegateRepresentativeRegistration"/>.</param>
    /// <param name="matchDelegateRepresentativeUpdate">Match a <see cref="Generated.Certificate.DelegateRepresentativeUpdate"/>.</param>
    /// <param name="defaultMatch">Match any other value.</param>
    /// <returns>An instance of the value returned by the match function.</returns>
    public TOut Match<TIn, TOut>(
        in TIn context,
        Matcher<Generated.Certificate.StakeDelegation, TIn, TOut> matchStakeDelegation,
        Matcher<Generated.Certificate.StakeCredentialRegistration, TIn, TOut> matchStakeCredentialRegistration,
        Matcher<Generated.Certificate.DelegateRepresentativeRetirement, TIn, TOut> matchDelegateRepresentativeRetirement,
        Matcher<Generated.Certificate.StakeCredentialDeregistration, TIn, TOut> matchStakeCredentialDeregistration,
        Matcher<Generated.Certificate.StakePoolRegistration, TIn, TOut> matchStakePoolRegistration,
        Matcher<Generated.Certificate.StakePoolRetirement, TIn, TOut> matchStakePoolRetirement,
        Matcher<Generated.Certificate.GenesisDelegation, TIn, TOut> matchGenesisDelegation,
        Matcher<Generated.Certificate.ConstitutionalCommitteeDelegation, TIn, TOut> matchConstitutionalCommitteeDelegation,
        Matcher<Generated.Certificate.ConstitutionalCommitteeRetirement, TIn, TOut> matchConstitutionalCommitteeRetirement,
        Matcher<Generated.Certificate.DelegateRepresentativeRegistration, TIn, TOut> matchDelegateRepresentativeRegistration,
        Matcher<Generated.Certificate.DelegateRepresentativeUpdate, TIn, TOut> matchDelegateRepresentativeUpdate,
        Matcher<Generated.Certificate, TIn, TOut> defaultMatch)
    {
        Generated.Certificate.StakeDelegation matchStakeDelegationValue = this.As<Generated.Certificate.StakeDelegation>();
        if (matchStakeDelegationValue.IsValid())
        {
            return matchStakeDelegation(matchStakeDelegationValue, context);
        }

        Generated.Certificate.StakeCredentialRegistration matchStakeCredentialRegistrationValue = this.As<Generated.Certificate.StakeCredentialRegistration>();
        if (matchStakeCredentialRegistrationValue.IsValid())
        {
            return matchStakeCredentialRegistration(matchStakeCredentialRegistrationValue, context);
        }

        Generated.Certificate.DelegateRepresentativeRetirement matchDelegateRepresentativeRetirementValue = this.As<Generated.Certificate.DelegateRepresentativeRetirement>();
        if (matchDelegateRepresentativeRetirementValue.IsValid())
        {
            return matchDelegateRepresentativeRetirement(matchDelegateRepresentativeRetirementValue, context);
        }

        Generated.Certificate.StakeCredentialDeregistration matchStakeCredentialDeregistrationValue = this.As<Generated.Certificate.StakeCredentialDeregistration>();
        if (matchStakeCredentialDeregistrationValue.IsValid())
        {
            return matchStakeCredentialDeregistration(matchStakeCredentialDeregistrationValue, context);
        }

        Generated.Certificate.StakePoolRegistration matchStakePoolRegistrationValue = this.As<Generated.Certificate.StakePoolRegistration>();
        if (matchStakePoolRegistrationValue.IsValid())
        {
            return matchStakePoolRegistration(matchStakePoolRegistrationValue, context);
        }

        Generated.Certificate.StakePoolRetirement matchStakePoolRetirementValue = this.As<Generated.Certificate.StakePoolRetirement>();
        if (matchStakePoolRetirementValue.IsValid())
        {
            return matchStakePoolRetirement(matchStakePoolRetirementValue, context);
        }

        Generated.Certificate.GenesisDelegation matchGenesisDelegationValue = this.As<Generated.Certificate.GenesisDelegation>();
        if (matchGenesisDelegationValue.IsValid())
        {
            return matchGenesisDelegation(matchGenesisDelegationValue, context);
        }

        Generated.Certificate.ConstitutionalCommitteeDelegation matchConstitutionalCommitteeDelegationValue = this.As<Generated.Certificate.ConstitutionalCommitteeDelegation>();
        if (matchConstitutionalCommitteeDelegationValue.IsValid())
        {
            return matchConstitutionalCommitteeDelegation(matchConstitutionalCommitteeDelegationValue, context);
        }

        Generated.Certificate.ConstitutionalCommitteeRetirement matchConstitutionalCommitteeRetirementValue = this.As<Generated.Certificate.ConstitutionalCommitteeRetirement>();
        if (matchConstitutionalCommitteeRetirementValue.IsValid())
        {
            return matchConstitutionalCommitteeRetirement(matchConstitutionalCommitteeRetirementValue, context);
        }

        Generated.Certificate.DelegateRepresentativeRegistration matchDelegateRepresentativeRegistrationValue = this.As<Generated.Certificate.DelegateRepresentativeRegistration>();
        if (matchDelegateRepresentativeRegistrationValue.IsValid())
        {
            return matchDelegateRepresentativeRegistration(matchDelegateRepresentativeRegistrationValue, context);
        }

        Generated.Certificate.DelegateRepresentativeUpdate matchDelegateRepresentativeUpdateValue = this.As<Generated.Certificate.DelegateRepresentativeUpdate>();
        if (matchDelegateRepresentativeUpdateValue.IsValid())
        {
            return matchDelegateRepresentativeUpdate(matchDelegateRepresentativeUpdateValue, context);
        }

        return defaultMatch(this, context);
    }

    /// <summary>
    /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <typeparam name="TOut">The result of calling the match function.</typeparam>
    /// <param name="matchStakeDelegation">Match a <see cref="Generated.Certificate.StakeDelegation"/>.</param>
    /// <param name="matchStakeCredentialRegistration">Match a <see cref="Generated.Certificate.StakeCredentialRegistration"/>.</param>
    /// <param name="matchDelegateRepresentativeRetirement">Match a <see cref="Generated.Certificate.DelegateRepresentativeRetirement"/>.</param>
    /// <param name="matchStakeCredentialDeregistration">Match a <see cref="Generated.Certificate.StakeCredentialDeregistration"/>.</param>
    /// <param name="matchStakePoolRegistration">Match a <see cref="Generated.Certificate.StakePoolRegistration"/>.</param>
    /// <param name="matchStakePoolRetirement">Match a <see cref="Generated.Certificate.StakePoolRetirement"/>.</param>
    /// <param name="matchGenesisDelegation">Match a <see cref="Generated.Certificate.GenesisDelegation"/>.</param>
    /// <param name="matchConstitutionalCommitteeDelegation">Match a <see cref="Generated.Certificate.ConstitutionalCommitteeDelegation"/>.</param>
    /// <param name="matchConstitutionalCommitteeRetirement">Match a <see cref="Generated.Certificate.ConstitutionalCommitteeRetirement"/>.</param>
    /// <param name="matchDelegateRepresentativeRegistration">Match a <see cref="Generated.Certificate.DelegateRepresentativeRegistration"/>.</param>
    /// <param name="matchDelegateRepresentativeUpdate">Match a <see cref="Generated.Certificate.DelegateRepresentativeUpdate"/>.</param>
    /// <param name="defaultMatch">Match any other value.</param>
    /// <returns>An instance of the value returned by the match function.</returns>
    public TOut Match<TOut>(
        Matcher<Generated.Certificate.StakeDelegation, TOut> matchStakeDelegation,
        Matcher<Generated.Certificate.StakeCredentialRegistration, TOut> matchStakeCredentialRegistration,
        Matcher<Generated.Certificate.DelegateRepresentativeRetirement, TOut> matchDelegateRepresentativeRetirement,
        Matcher<Generated.Certificate.StakeCredentialDeregistration, TOut> matchStakeCredentialDeregistration,
        Matcher<Generated.Certificate.StakePoolRegistration, TOut> matchStakePoolRegistration,
        Matcher<Generated.Certificate.StakePoolRetirement, TOut> matchStakePoolRetirement,
        Matcher<Generated.Certificate.GenesisDelegation, TOut> matchGenesisDelegation,
        Matcher<Generated.Certificate.ConstitutionalCommitteeDelegation, TOut> matchConstitutionalCommitteeDelegation,
        Matcher<Generated.Certificate.ConstitutionalCommitteeRetirement, TOut> matchConstitutionalCommitteeRetirement,
        Matcher<Generated.Certificate.DelegateRepresentativeRegistration, TOut> matchDelegateRepresentativeRegistration,
        Matcher<Generated.Certificate.DelegateRepresentativeUpdate, TOut> matchDelegateRepresentativeUpdate,
        Matcher<Generated.Certificate, TOut> defaultMatch)
    {
        Generated.Certificate.StakeDelegation matchStakeDelegationValue = this.As<Generated.Certificate.StakeDelegation>();
        if (matchStakeDelegationValue.IsValid())
        {
            return matchStakeDelegation(matchStakeDelegationValue);
        }

        Generated.Certificate.StakeCredentialRegistration matchStakeCredentialRegistrationValue = this.As<Generated.Certificate.StakeCredentialRegistration>();
        if (matchStakeCredentialRegistrationValue.IsValid())
        {
            return matchStakeCredentialRegistration(matchStakeCredentialRegistrationValue);
        }

        Generated.Certificate.DelegateRepresentativeRetirement matchDelegateRepresentativeRetirementValue = this.As<Generated.Certificate.DelegateRepresentativeRetirement>();
        if (matchDelegateRepresentativeRetirementValue.IsValid())
        {
            return matchDelegateRepresentativeRetirement(matchDelegateRepresentativeRetirementValue);
        }

        Generated.Certificate.StakeCredentialDeregistration matchStakeCredentialDeregistrationValue = this.As<Generated.Certificate.StakeCredentialDeregistration>();
        if (matchStakeCredentialDeregistrationValue.IsValid())
        {
            return matchStakeCredentialDeregistration(matchStakeCredentialDeregistrationValue);
        }

        Generated.Certificate.StakePoolRegistration matchStakePoolRegistrationValue = this.As<Generated.Certificate.StakePoolRegistration>();
        if (matchStakePoolRegistrationValue.IsValid())
        {
            return matchStakePoolRegistration(matchStakePoolRegistrationValue);
        }

        Generated.Certificate.StakePoolRetirement matchStakePoolRetirementValue = this.As<Generated.Certificate.StakePoolRetirement>();
        if (matchStakePoolRetirementValue.IsValid())
        {
            return matchStakePoolRetirement(matchStakePoolRetirementValue);
        }

        Generated.Certificate.GenesisDelegation matchGenesisDelegationValue = this.As<Generated.Certificate.GenesisDelegation>();
        if (matchGenesisDelegationValue.IsValid())
        {
            return matchGenesisDelegation(matchGenesisDelegationValue);
        }

        Generated.Certificate.ConstitutionalCommitteeDelegation matchConstitutionalCommitteeDelegationValue = this.As<Generated.Certificate.ConstitutionalCommitteeDelegation>();
        if (matchConstitutionalCommitteeDelegationValue.IsValid())
        {
            return matchConstitutionalCommitteeDelegation(matchConstitutionalCommitteeDelegationValue);
        }

        Generated.Certificate.ConstitutionalCommitteeRetirement matchConstitutionalCommitteeRetirementValue = this.As<Generated.Certificate.ConstitutionalCommitteeRetirement>();
        if (matchConstitutionalCommitteeRetirementValue.IsValid())
        {
            return matchConstitutionalCommitteeRetirement(matchConstitutionalCommitteeRetirementValue);
        }

        Generated.Certificate.DelegateRepresentativeRegistration matchDelegateRepresentativeRegistrationValue = this.As<Generated.Certificate.DelegateRepresentativeRegistration>();
        if (matchDelegateRepresentativeRegistrationValue.IsValid())
        {
            return matchDelegateRepresentativeRegistration(matchDelegateRepresentativeRegistrationValue);
        }

        Generated.Certificate.DelegateRepresentativeUpdate matchDelegateRepresentativeUpdateValue = this.As<Generated.Certificate.DelegateRepresentativeUpdate>();
        if (matchDelegateRepresentativeUpdateValue.IsValid())
        {
            return matchDelegateRepresentativeUpdate(matchDelegateRepresentativeUpdateValue);
        }

        return defaultMatch(this);
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.Certificate.StakeDelegation" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsStakeDelegation(out Generated.Certificate.StakeDelegation result)
    {
        result = this.As<Generated.Certificate.StakeDelegation>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.Certificate.StakeCredentialRegistration" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsStakeCredentialRegistration(out Generated.Certificate.StakeCredentialRegistration result)
    {
        result = this.As<Generated.Certificate.StakeCredentialRegistration>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.Certificate.DelegateRepresentativeRetirement" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsDelegateRepresentativeRetirement(out Generated.Certificate.DelegateRepresentativeRetirement result)
    {
        result = this.As<Generated.Certificate.DelegateRepresentativeRetirement>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.Certificate.StakeCredentialDeregistration" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsStakeCredentialDeregistration(out Generated.Certificate.StakeCredentialDeregistration result)
    {
        result = this.As<Generated.Certificate.StakeCredentialDeregistration>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.Certificate.StakePoolRegistration" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsStakePoolRegistration(out Generated.Certificate.StakePoolRegistration result)
    {
        result = this.As<Generated.Certificate.StakePoolRegistration>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.Certificate.StakePoolRetirement" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsStakePoolRetirement(out Generated.Certificate.StakePoolRetirement result)
    {
        result = this.As<Generated.Certificate.StakePoolRetirement>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.Certificate.GenesisDelegation" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsGenesisDelegation(out Generated.Certificate.GenesisDelegation result)
    {
        result = this.As<Generated.Certificate.GenesisDelegation>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.Certificate.ConstitutionalCommitteeDelegation" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsConstitutionalCommitteeDelegation(out Generated.Certificate.ConstitutionalCommitteeDelegation result)
    {
        result = this.As<Generated.Certificate.ConstitutionalCommitteeDelegation>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.Certificate.ConstitutionalCommitteeRetirement" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsConstitutionalCommitteeRetirement(out Generated.Certificate.ConstitutionalCommitteeRetirement result)
    {
        result = this.As<Generated.Certificate.ConstitutionalCommitteeRetirement>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.Certificate.DelegateRepresentativeRegistration" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsDelegateRepresentativeRegistration(out Generated.Certificate.DelegateRepresentativeRegistration result)
    {
        result = this.As<Generated.Certificate.DelegateRepresentativeRegistration>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.Certificate.DelegateRepresentativeUpdate" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsDelegateRepresentativeUpdate(out Generated.Certificate.DelegateRepresentativeUpdate result)
    {
        result = this.As<Generated.Certificate.DelegateRepresentativeUpdate>();
        return result.IsValid();
    }
}
