//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Generated;
/// <summary>
/// ProtocolParameters
/// </summary>
public readonly partial struct ProtocolParameters
    : IJsonObject<Generated.ProtocolParameters>
{
    /// <summary>
    /// Conversion from <see cref="ImmutableList{JsonObjectProperty}"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator ProtocolParameters(ImmutableList<JsonObjectProperty> value)
    {
        return new(value);
    }

    /// <summary>
    /// Conversion to <see cref="ImmutableList{JsonObjectProperty}"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator ImmutableList<JsonObjectProperty>(ProtocolParameters value)
    {
        return
            __CorvusObjectHelpers.GetPropertyBacking(value);
    }

    /// <summary>
    /// Conversion from JsonObject.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator ProtocolParameters(JsonObject value)
    {
        if (value.HasDotnetBacking && value.ValueKind == JsonValueKind.Object)
        {
            return new(
                __CorvusObjectHelpers.GetPropertyBacking(value));
        }

        return new(value.AsJsonElement);
    }

    /// <summary>
    /// Conversion to JsonObject.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator JsonObject(ProtocolParameters value)
    {
        return
            value.AsObject;
    }

    /// <inheritdoc/>
    public Corvus.Json.JsonAny this[in JsonPropertyName name]
    {
        get
        {
            if (this.TryGetProperty(name, out Corvus.Json.JsonAny result))
            {
                return result;
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the number of properties in the object.
    /// </summary>
    public int Count
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking.GetPropertyCount();
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return this.objectBacking.Count;
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the (optional) <c>collateralPercentage</c> property.
    /// </summary>
    public Generated.UInt64 CollateralPercentage
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.CollateralPercentageUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.CollateralPercentage, out JsonAny result))
                {
                    return result.As<Generated.UInt64>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>constitutionalCommitteeMaxTermLength</c> property.
    /// </summary>
    public Generated.UInt64 ConstitutionalCommitteeMaxTermLength
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ConstitutionalCommitteeMaxTermLengthUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ConstitutionalCommitteeMaxTermLength, out JsonAny result))
                {
                    return result.As<Generated.UInt64>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>constitutionalCommitteeMinSize</c> property.
    /// </summary>
    public Generated.UInt16 ConstitutionalCommitteeMinSize
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ConstitutionalCommitteeMinSizeUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ConstitutionalCommitteeMinSize, out JsonAny result))
                {
                    return result.As<Generated.UInt16>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>delegateRepresentativeDeposit</c> property.
    /// </summary>
    public Generated.ValueAdaOnly DelegateRepresentativeDeposit
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DelegateRepresentativeDepositUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.DelegateRepresentativeDeposit, out JsonAny result))
                {
                    return result.As<Generated.ValueAdaOnly>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>delegateRepresentativeMaxIdleTime</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// An epoch number or length.
    /// </para>
    /// </remarks>
    public Generated.Epoch DelegateRepresentativeMaxIdleTime
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DelegateRepresentativeMaxIdleTimeUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.DelegateRepresentativeMaxIdleTime, out JsonAny result))
                {
                    return result.As<Generated.Epoch>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>delegateRepresentativeVotingThresholds</c> property.
    /// </summary>
    public Generated.DelegateRepresentativeVotingThresholds DelegateRepresentativeVotingThresholds
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DelegateRepresentativeVotingThresholdsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.DelegateRepresentativeVotingThresholds, out JsonAny result))
                {
                    return result.As<Generated.DelegateRepresentativeVotingThresholds>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>desiredNumberOfStakePools</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.UInt64 DesiredNumberOfStakePools
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DesiredNumberOfStakePoolsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.DesiredNumberOfStakePools, out JsonAny result))
                {
                    return result.As<Generated.UInt64>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>extraEntropy</c> property.
    /// </summary>
    public Generated.Nonce ExtraEntropy
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ExtraEntropyUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ExtraEntropy, out JsonAny result))
                {
                    return result.As<Generated.Nonce>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>federatedBlockProductionRatio</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A ratio of two integers, to express exact fractions.
    /// </para>
    /// </remarks>
    public Generated.Ratio FederatedBlockProductionRatio
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.FederatedBlockProductionRatioUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.FederatedBlockProductionRatio, out JsonAny result))
                {
                    return result.As<Generated.Ratio>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>governanceActionDeposit</c> property.
    /// </summary>
    public Generated.ValueAdaOnly GovernanceActionDeposit
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.GovernanceActionDepositUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.GovernanceActionDeposit, out JsonAny result))
                {
                    return result.As<Generated.ValueAdaOnly>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>governanceActionLifetime</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// An epoch number or length.
    /// </para>
    /// </remarks>
    public Generated.Epoch GovernanceActionLifetime
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.GovernanceActionLifetimeUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.GovernanceActionLifetime, out JsonAny result))
                {
                    return result.As<Generated.Epoch>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>maxBlockBodySize</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.NumberOfBytes MaxBlockBodySize
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxBlockBodySizeUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxBlockBodySize, out JsonAny result))
                {
                    return result.As<Generated.NumberOfBytes>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>maxBlockHeaderSize</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.NumberOfBytes MaxBlockHeaderSize
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxBlockHeaderSizeUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxBlockHeaderSize, out JsonAny result))
                {
                    return result.As<Generated.NumberOfBytes>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxCollateralInputs</c> property.
    /// </summary>
    public Generated.UInt64 MaxCollateralInputs
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxCollateralInputsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxCollateralInputs, out JsonAny result))
                {
                    return result.As<Generated.UInt64>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxExecutionUnitsPerBlock</c> property.
    /// </summary>
    public Generated.ExecutionUnits MaxExecutionUnitsPerBlock
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxExecutionUnitsPerBlockUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxExecutionUnitsPerBlock, out JsonAny result))
                {
                    return result.As<Generated.ExecutionUnits>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxExecutionUnitsPerTransaction</c> property.
    /// </summary>
    public Generated.ExecutionUnits MaxExecutionUnitsPerTransaction
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxExecutionUnitsPerTransactionUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxExecutionUnitsPerTransaction, out JsonAny result))
                {
                    return result.As<Generated.ExecutionUnits>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxReferenceScriptsSize</c> property.
    /// </summary>
    public Generated.NumberOfBytes MaxReferenceScriptsSize
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxReferenceScriptsSizeUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxReferenceScriptsSize, out JsonAny result))
                {
                    return result.As<Generated.NumberOfBytes>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxTransactionSize</c> property.
    /// </summary>
    public Generated.NumberOfBytes MaxTransactionSize
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxTransactionSizeUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxTransactionSize, out JsonAny result))
                {
                    return result.As<Generated.NumberOfBytes>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxValueSize</c> property.
    /// </summary>
    public Generated.NumberOfBytes MaxValueSize
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxValueSizeUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxValueSize, out JsonAny result))
                {
                    return result.As<Generated.NumberOfBytes>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>minFeeCoefficient</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.UInt64 MinFeeCoefficient
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinFeeCoefficientUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MinFeeCoefficient, out JsonAny result))
                {
                    return result.As<Generated.UInt64>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>minFeeConstant</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.ValueAdaOnly MinFeeConstant
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinFeeConstantUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MinFeeConstant, out JsonAny result))
                {
                    return result.As<Generated.ValueAdaOnly>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>minFeeReferenceScripts</c> property.
    /// </summary>
    public Generated.ProtocolParameters.RequiredBaseAndMultiplierAndRange MinFeeReferenceScripts
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinFeeReferenceScriptsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MinFeeReferenceScripts, out JsonAny result))
                {
                    return result.As<Generated.ProtocolParameters.RequiredBaseAndMultiplierAndRange>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>minStakePoolCost</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.ValueAdaOnly MinStakePoolCost
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinStakePoolCostUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MinStakePoolCost, out JsonAny result))
                {
                    return result.As<Generated.ValueAdaOnly>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>minUtxoDepositCoefficient</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.UInt64 MinUtxoDepositCoefficient
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinUtxoDepositCoefficientUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MinUtxoDepositCoefficient, out JsonAny result))
                {
                    return result.As<Generated.UInt64>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>minUtxoDepositConstant</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.ValueAdaOnly MinUtxoDepositConstant
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinUtxoDepositConstantUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MinUtxoDepositConstant, out JsonAny result))
                {
                    return result.As<Generated.ValueAdaOnly>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>monetaryExpansion</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// <para>
    /// A ratio of two integers, to express exact fractions.
    /// </para>
    /// </remarks>
    public Generated.Ratio MonetaryExpansion
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MonetaryExpansionUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MonetaryExpansion, out JsonAny result))
                {
                    return result.As<Generated.Ratio>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>plutusCostModels</c> property.
    /// </summary>
    public Generated.CostModels PlutusCostModels
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PlutusCostModelsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.PlutusCostModels, out JsonAny result))
                {
                    return result.As<Generated.CostModels>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>scriptExecutionPrices</c> property.
    /// </summary>
    public Generated.ScriptExecutionPrices ScriptExecutionPrices
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ScriptExecutionPricesUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ScriptExecutionPrices, out JsonAny result))
                {
                    return result.As<Generated.ScriptExecutionPrices>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>stakeCredentialDeposit</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.ValueAdaOnly StakeCredentialDeposit
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.StakeCredentialDepositUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.StakeCredentialDeposit, out JsonAny result))
                {
                    return result.As<Generated.ValueAdaOnly>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>stakePoolDeposit</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.ValueAdaOnly StakePoolDeposit
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.StakePoolDepositUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.StakePoolDeposit, out JsonAny result))
                {
                    return result.As<Generated.ValueAdaOnly>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>stakePoolPledgeInfluence</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// <para>
    /// A ratio of two integers, to express exact fractions.
    /// </para>
    /// </remarks>
    public Generated.Ratio StakePoolPledgeInfluence
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.StakePoolPledgeInfluenceUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.StakePoolPledgeInfluence, out JsonAny result))
                {
                    return result.As<Generated.Ratio>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>stakePoolRetirementEpochBound</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.UInt64 StakePoolRetirementEpochBound
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.StakePoolRetirementEpochBoundUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.StakePoolRetirementEpochBound, out JsonAny result))
                {
                    return result.As<Generated.UInt64>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>stakePoolVotingThresholds</c> property.
    /// </summary>
    public Generated.StakePoolVotingThresholds StakePoolVotingThresholds
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.StakePoolVotingThresholdsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.StakePoolVotingThresholds, out JsonAny result))
                {
                    return result.As<Generated.StakePoolVotingThresholds>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>treasuryExpansion</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// <para>
    /// A ratio of two integers, to express exact fractions.
    /// </para>
    /// </remarks>
    public Generated.Ratio TreasuryExpansion
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.TreasuryExpansionUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.TreasuryExpansion, out JsonAny result))
                {
                    return result.As<Generated.Ratio>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>version</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.ProtocolVersion Version
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.VersionUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Version, out JsonAny result))
                {
                    return result.As<Generated.ProtocolVersion>();
                }
            }

            return default;
        }
    }

    /// <inheritdoc/>
    public static ProtocolParameters FromProperties(IDictionary<JsonPropertyName, JsonAny> source)
    {
        return new(source.Select(kvp => new JsonObjectProperty(kvp.Key, kvp.Value)).ToImmutableList());
    }

    /// <inheritdoc/>
    public static ProtocolParameters FromProperties(params (JsonPropertyName Name, JsonAny Value)[] source)
    {
        return new(source.Select(s => new JsonObjectProperty(s.Name, s.Value.AsAny)).ToImmutableList());
    }

    /// <summary>
    /// Creates an instance of the type from the given immutable list of properties.
    /// </summary>
    /// <param name="source">The list of properties.</param>
    /// <returns>An instance of the type initialized from the list of properties.</returns>
    public static ProtocolParameters FromProperties(ImmutableList<JsonObjectProperty> source)
    {
        return new(source);
    }

    /// <summary>
    /// Creates an instance of a <see cref="ProtocolParameters"/>.
    /// </summary>
    public static ProtocolParameters Create(
        in Generated.UInt64 desiredNumberOfStakePools,
        in Generated.NumberOfBytes maxBlockBodySize,
        in Generated.NumberOfBytes maxBlockHeaderSize,
        in Generated.UInt64 minFeeCoefficient,
        in Generated.ValueAdaOnly minFeeConstant,
        in Generated.ValueAdaOnly minStakePoolCost,
        in Generated.UInt64 minUtxoDepositCoefficient,
        in Generated.ValueAdaOnly minUtxoDepositConstant,
        in Generated.Ratio monetaryExpansion,
        in Generated.ValueAdaOnly stakeCredentialDeposit,
        in Generated.ValueAdaOnly stakePoolDeposit,
        in Generated.Ratio stakePoolPledgeInfluence,
        in Generated.UInt64 stakePoolRetirementEpochBound,
        in Generated.Ratio treasuryExpansion,
        in Generated.ProtocolVersion version,
        in Generated.UInt64? collateralPercentage = null,
        in Generated.UInt64? constitutionalCommitteeMaxTermLength = null,
        in Generated.UInt16? constitutionalCommitteeMinSize = null,
        in Generated.ValueAdaOnly? delegateRepresentativeDeposit = null,
        in Generated.Epoch? delegateRepresentativeMaxIdleTime = null,
        in Generated.DelegateRepresentativeVotingThresholds? delegateRepresentativeVotingThresholds = null,
        in Generated.Nonce? extraEntropy = null,
        in Generated.Ratio? federatedBlockProductionRatio = null,
        in Generated.ValueAdaOnly? governanceActionDeposit = null,
        in Generated.Epoch? governanceActionLifetime = null,
        in Generated.UInt64? maxCollateralInputs = null,
        in Generated.ExecutionUnits? maxExecutionUnitsPerBlock = null,
        in Generated.ExecutionUnits? maxExecutionUnitsPerTransaction = null,
        in Generated.NumberOfBytes? maxReferenceScriptsSize = null,
        in Generated.NumberOfBytes? maxTransactionSize = null,
        in Generated.NumberOfBytes? maxValueSize = null,
        in Generated.ProtocolParameters.RequiredBaseAndMultiplierAndRange? minFeeReferenceScripts = null,
        in Generated.CostModels? plutusCostModels = null,
        in Generated.ScriptExecutionPrices? scriptExecutionPrices = null,
        in Generated.StakePoolVotingThresholds? stakePoolVotingThresholds = null)
    {
        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
        builder.Add(JsonPropertyNames.DesiredNumberOfStakePools, desiredNumberOfStakePools.AsAny);
        builder.Add(JsonPropertyNames.MaxBlockBodySize, maxBlockBodySize.AsAny);
        builder.Add(JsonPropertyNames.MaxBlockHeaderSize, maxBlockHeaderSize.AsAny);
        builder.Add(JsonPropertyNames.MinFeeCoefficient, minFeeCoefficient.AsAny);
        builder.Add(JsonPropertyNames.MinFeeConstant, minFeeConstant.AsAny);
        builder.Add(JsonPropertyNames.MinStakePoolCost, minStakePoolCost.AsAny);
        builder.Add(JsonPropertyNames.MinUtxoDepositCoefficient, minUtxoDepositCoefficient.AsAny);
        builder.Add(JsonPropertyNames.MinUtxoDepositConstant, minUtxoDepositConstant.AsAny);
        builder.Add(JsonPropertyNames.MonetaryExpansion, monetaryExpansion.AsAny);
        builder.Add(JsonPropertyNames.StakeCredentialDeposit, stakeCredentialDeposit.AsAny);
        builder.Add(JsonPropertyNames.StakePoolDeposit, stakePoolDeposit.AsAny);
        builder.Add(JsonPropertyNames.StakePoolPledgeInfluence, stakePoolPledgeInfluence.AsAny);
        builder.Add(JsonPropertyNames.StakePoolRetirementEpochBound, stakePoolRetirementEpochBound.AsAny);
        builder.Add(JsonPropertyNames.TreasuryExpansion, treasuryExpansion.AsAny);
        builder.Add(JsonPropertyNames.Version, version.AsAny);

        if (collateralPercentage is not null)
        {
            builder.Add(JsonPropertyNames.CollateralPercentage, collateralPercentage.Value.AsAny);
        }

        if (constitutionalCommitteeMaxTermLength is not null)
        {
            builder.Add(JsonPropertyNames.ConstitutionalCommitteeMaxTermLength, constitutionalCommitteeMaxTermLength.Value.AsAny);
        }

        if (constitutionalCommitteeMinSize is not null)
        {
            builder.Add(JsonPropertyNames.ConstitutionalCommitteeMinSize, constitutionalCommitteeMinSize.Value.AsAny);
        }

        if (delegateRepresentativeDeposit is not null)
        {
            builder.Add(JsonPropertyNames.DelegateRepresentativeDeposit, delegateRepresentativeDeposit.Value.AsAny);
        }

        if (delegateRepresentativeMaxIdleTime is not null)
        {
            builder.Add(JsonPropertyNames.DelegateRepresentativeMaxIdleTime, delegateRepresentativeMaxIdleTime.Value.AsAny);
        }

        if (delegateRepresentativeVotingThresholds is not null)
        {
            builder.Add(JsonPropertyNames.DelegateRepresentativeVotingThresholds, delegateRepresentativeVotingThresholds.Value.AsAny);
        }

        if (extraEntropy is not null)
        {
            builder.Add(JsonPropertyNames.ExtraEntropy, extraEntropy.Value.AsAny);
        }

        if (federatedBlockProductionRatio is not null)
        {
            builder.Add(JsonPropertyNames.FederatedBlockProductionRatio, federatedBlockProductionRatio.Value.AsAny);
        }

        if (governanceActionDeposit is not null)
        {
            builder.Add(JsonPropertyNames.GovernanceActionDeposit, governanceActionDeposit.Value.AsAny);
        }

        if (governanceActionLifetime is not null)
        {
            builder.Add(JsonPropertyNames.GovernanceActionLifetime, governanceActionLifetime.Value.AsAny);
        }

        if (maxCollateralInputs is not null)
        {
            builder.Add(JsonPropertyNames.MaxCollateralInputs, maxCollateralInputs.Value.AsAny);
        }

        if (maxExecutionUnitsPerBlock is not null)
        {
            builder.Add(JsonPropertyNames.MaxExecutionUnitsPerBlock, maxExecutionUnitsPerBlock.Value.AsAny);
        }

        if (maxExecutionUnitsPerTransaction is not null)
        {
            builder.Add(JsonPropertyNames.MaxExecutionUnitsPerTransaction, maxExecutionUnitsPerTransaction.Value.AsAny);
        }

        if (maxReferenceScriptsSize is not null)
        {
            builder.Add(JsonPropertyNames.MaxReferenceScriptsSize, maxReferenceScriptsSize.Value.AsAny);
        }

        if (maxTransactionSize is not null)
        {
            builder.Add(JsonPropertyNames.MaxTransactionSize, maxTransactionSize.Value.AsAny);
        }

        if (maxValueSize is not null)
        {
            builder.Add(JsonPropertyNames.MaxValueSize, maxValueSize.Value.AsAny);
        }

        if (minFeeReferenceScripts is not null)
        {
            builder.Add(JsonPropertyNames.MinFeeReferenceScripts, minFeeReferenceScripts.Value.AsAny);
        }

        if (plutusCostModels is not null)
        {
            builder.Add(JsonPropertyNames.PlutusCostModels, plutusCostModels.Value.AsAny);
        }

        if (scriptExecutionPrices is not null)
        {
            builder.Add(JsonPropertyNames.ScriptExecutionPrices, scriptExecutionPrices.Value.AsAny);
        }

        if (stakePoolVotingThresholds is not null)
        {
            builder.Add(JsonPropertyNames.StakePoolVotingThresholds, stakePoolVotingThresholds.Value.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <inheritdoc/>
    public ImmutableList<JsonObjectProperty> AsPropertyBacking()
    {
        return __CorvusObjectHelpers.GetPropertyBacking(this);
    }
    /// <inheritdoc/>
    public ImmutableList<JsonObjectProperty>.Builder AsPropertyBackingBuilder()
    {
        return __CorvusObjectHelpers.GetPropertyBacking(this).ToBuilder();
    }

    /// <inheritdoc/>
    public JsonObjectEnumerator EnumerateObject()
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return new(this.jsonElementBacking);
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return new(this.objectBacking);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc/>
    public bool HasProperties()
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.Count > 0;
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            using JsonElement.ObjectEnumerator enumerator = this.jsonElementBacking.EnumerateObject();
            return enumerator.MoveNext();
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(in JsonPropertyName name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return name.TryGetProperty(this.jsonElementBacking, out JsonElement _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(string name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(ReadOnlySpan<char> name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(ReadOnlySpan<byte> name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Sets the (optional) <c>collateralPercentage</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithCollateralPercentage(in Generated.UInt64 value)
    {
        return this.SetProperty(JsonPropertyNames.CollateralPercentage, value);
    }

    /// <summary>
    /// Sets the (optional) <c>constitutionalCommitteeMaxTermLength</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithConstitutionalCommitteeMaxTermLength(in Generated.UInt64 value)
    {
        return this.SetProperty(JsonPropertyNames.ConstitutionalCommitteeMaxTermLength, value);
    }

    /// <summary>
    /// Sets the (optional) <c>constitutionalCommitteeMinSize</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithConstitutionalCommitteeMinSize(in Generated.UInt16 value)
    {
        return this.SetProperty(JsonPropertyNames.ConstitutionalCommitteeMinSize, value);
    }

    /// <summary>
    /// Sets the (optional) <c>delegateRepresentativeDeposit</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithDelegateRepresentativeDeposit(in Generated.ValueAdaOnly value)
    {
        return this.SetProperty(JsonPropertyNames.DelegateRepresentativeDeposit, value);
    }

    /// <summary>
    /// Sets the (optional) <c>delegateRepresentativeMaxIdleTime</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    /// <remarks>
    /// <para>
    /// An epoch number or length.
    /// </para>
    /// </remarks>
    public ProtocolParameters WithDelegateRepresentativeMaxIdleTime(in Generated.Epoch value)
    {
        return this.SetProperty(JsonPropertyNames.DelegateRepresentativeMaxIdleTime, value);
    }

    /// <summary>
    /// Sets the (optional) <c>delegateRepresentativeVotingThresholds</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithDelegateRepresentativeVotingThresholds(in Generated.DelegateRepresentativeVotingThresholds value)
    {
        return this.SetProperty(JsonPropertyNames.DelegateRepresentativeVotingThresholds, value);
    }

    /// <summary>
    /// Sets the <c>desiredNumberOfStakePools</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithDesiredNumberOfStakePools(in Generated.UInt64 value)
    {
        return this.SetProperty(JsonPropertyNames.DesiredNumberOfStakePools, value);
    }

    /// <summary>
    /// Sets the (optional) <c>extraEntropy</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithExtraEntropy(in Generated.Nonce value)
    {
        return this.SetProperty(JsonPropertyNames.ExtraEntropy, value);
    }

    /// <summary>
    /// Sets the (optional) <c>federatedBlockProductionRatio</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    /// <remarks>
    /// <para>
    /// A ratio of two integers, to express exact fractions.
    /// </para>
    /// </remarks>
    public ProtocolParameters WithFederatedBlockProductionRatio(in Generated.Ratio value)
    {
        return this.SetProperty(JsonPropertyNames.FederatedBlockProductionRatio, value);
    }

    /// <summary>
    /// Sets the (optional) <c>governanceActionDeposit</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithGovernanceActionDeposit(in Generated.ValueAdaOnly value)
    {
        return this.SetProperty(JsonPropertyNames.GovernanceActionDeposit, value);
    }

    /// <summary>
    /// Sets the (optional) <c>governanceActionLifetime</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    /// <remarks>
    /// <para>
    /// An epoch number or length.
    /// </para>
    /// </remarks>
    public ProtocolParameters WithGovernanceActionLifetime(in Generated.Epoch value)
    {
        return this.SetProperty(JsonPropertyNames.GovernanceActionLifetime, value);
    }

    /// <summary>
    /// Sets the <c>maxBlockBodySize</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithMaxBlockBodySize(in Generated.NumberOfBytes value)
    {
        return this.SetProperty(JsonPropertyNames.MaxBlockBodySize, value);
    }

    /// <summary>
    /// Sets the <c>maxBlockHeaderSize</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithMaxBlockHeaderSize(in Generated.NumberOfBytes value)
    {
        return this.SetProperty(JsonPropertyNames.MaxBlockHeaderSize, value);
    }

    /// <summary>
    /// Sets the (optional) <c>maxCollateralInputs</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithMaxCollateralInputs(in Generated.UInt64 value)
    {
        return this.SetProperty(JsonPropertyNames.MaxCollateralInputs, value);
    }

    /// <summary>
    /// Sets the (optional) <c>maxExecutionUnitsPerBlock</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithMaxExecutionUnitsPerBlock(in Generated.ExecutionUnits value)
    {
        return this.SetProperty(JsonPropertyNames.MaxExecutionUnitsPerBlock, value);
    }

    /// <summary>
    /// Sets the (optional) <c>maxExecutionUnitsPerTransaction</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithMaxExecutionUnitsPerTransaction(in Generated.ExecutionUnits value)
    {
        return this.SetProperty(JsonPropertyNames.MaxExecutionUnitsPerTransaction, value);
    }

    /// <summary>
    /// Sets the (optional) <c>maxReferenceScriptsSize</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithMaxReferenceScriptsSize(in Generated.NumberOfBytes value)
    {
        return this.SetProperty(JsonPropertyNames.MaxReferenceScriptsSize, value);
    }

    /// <summary>
    /// Sets the (optional) <c>maxTransactionSize</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithMaxTransactionSize(in Generated.NumberOfBytes value)
    {
        return this.SetProperty(JsonPropertyNames.MaxTransactionSize, value);
    }

    /// <summary>
    /// Sets the (optional) <c>maxValueSize</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithMaxValueSize(in Generated.NumberOfBytes value)
    {
        return this.SetProperty(JsonPropertyNames.MaxValueSize, value);
    }

    /// <summary>
    /// Sets the <c>minFeeCoefficient</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithMinFeeCoefficient(in Generated.UInt64 value)
    {
        return this.SetProperty(JsonPropertyNames.MinFeeCoefficient, value);
    }

    /// <summary>
    /// Sets the <c>minFeeConstant</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithMinFeeConstant(in Generated.ValueAdaOnly value)
    {
        return this.SetProperty(JsonPropertyNames.MinFeeConstant, value);
    }

    /// <summary>
    /// Sets the (optional) <c>minFeeReferenceScripts</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithMinFeeReferenceScripts(in Generated.ProtocolParameters.RequiredBaseAndMultiplierAndRange value)
    {
        return this.SetProperty(JsonPropertyNames.MinFeeReferenceScripts, value);
    }

    /// <summary>
    /// Sets the <c>minStakePoolCost</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithMinStakePoolCost(in Generated.ValueAdaOnly value)
    {
        return this.SetProperty(JsonPropertyNames.MinStakePoolCost, value);
    }

    /// <summary>
    /// Sets the <c>minUtxoDepositCoefficient</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithMinUtxoDepositCoefficient(in Generated.UInt64 value)
    {
        return this.SetProperty(JsonPropertyNames.MinUtxoDepositCoefficient, value);
    }

    /// <summary>
    /// Sets the <c>minUtxoDepositConstant</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithMinUtxoDepositConstant(in Generated.ValueAdaOnly value)
    {
        return this.SetProperty(JsonPropertyNames.MinUtxoDepositConstant, value);
    }

    /// <summary>
    /// Sets the <c>monetaryExpansion</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    /// <remarks>
    /// <para>
    /// A ratio of two integers, to express exact fractions.
    /// </para>
    /// </remarks>
    public ProtocolParameters WithMonetaryExpansion(in Generated.Ratio value)
    {
        return this.SetProperty(JsonPropertyNames.MonetaryExpansion, value);
    }

    /// <summary>
    /// Sets the (optional) <c>plutusCostModels</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithPlutusCostModels(in Generated.CostModels value)
    {
        return this.SetProperty(JsonPropertyNames.PlutusCostModels, value);
    }

    /// <summary>
    /// Sets the (optional) <c>scriptExecutionPrices</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithScriptExecutionPrices(in Generated.ScriptExecutionPrices value)
    {
        return this.SetProperty(JsonPropertyNames.ScriptExecutionPrices, value);
    }

    /// <summary>
    /// Sets the <c>stakeCredentialDeposit</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithStakeCredentialDeposit(in Generated.ValueAdaOnly value)
    {
        return this.SetProperty(JsonPropertyNames.StakeCredentialDeposit, value);
    }

    /// <summary>
    /// Sets the <c>stakePoolDeposit</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithStakePoolDeposit(in Generated.ValueAdaOnly value)
    {
        return this.SetProperty(JsonPropertyNames.StakePoolDeposit, value);
    }

    /// <summary>
    /// Sets the <c>stakePoolPledgeInfluence</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    /// <remarks>
    /// <para>
    /// A ratio of two integers, to express exact fractions.
    /// </para>
    /// </remarks>
    public ProtocolParameters WithStakePoolPledgeInfluence(in Generated.Ratio value)
    {
        return this.SetProperty(JsonPropertyNames.StakePoolPledgeInfluence, value);
    }

    /// <summary>
    /// Sets the <c>stakePoolRetirementEpochBound</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithStakePoolRetirementEpochBound(in Generated.UInt64 value)
    {
        return this.SetProperty(JsonPropertyNames.StakePoolRetirementEpochBound, value);
    }

    /// <summary>
    /// Sets the (optional) <c>stakePoolVotingThresholds</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithStakePoolVotingThresholds(in Generated.StakePoolVotingThresholds value)
    {
        return this.SetProperty(JsonPropertyNames.StakePoolVotingThresholds, value);
    }

    /// <summary>
    /// Sets the <c>treasuryExpansion</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    /// <remarks>
    /// <para>
    /// A ratio of two integers, to express exact fractions.
    /// </para>
    /// </remarks>
    public ProtocolParameters WithTreasuryExpansion(in Generated.Ratio value)
    {
        return this.SetProperty(JsonPropertyNames.TreasuryExpansion, value);
    }

    /// <summary>
    /// Sets the <c>version</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public ProtocolParameters WithVersion(in Generated.ProtocolVersion value)
    {
        return this.SetProperty(JsonPropertyNames.Version, value);
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(in JsonPropertyName name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(string name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(ReadOnlySpan<byte> name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(in JsonPropertyName name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(string name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(ReadOnlySpan<char> name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(ReadOnlySpan<byte> name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public ProtocolParameters SetProperty<TValue>(in JsonPropertyName name, TValue value)
        where TValue : struct, IJsonValue
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWith(this, name, value.AsAny));
    }

    /// <inheritdoc />
    public ProtocolParameters RemoveProperty(in JsonPropertyName name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public ProtocolParameters RemoveProperty(string name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public ProtocolParameters RemoveProperty(ReadOnlySpan<char> name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public ProtocolParameters RemoveProperty(ReadOnlySpan<byte> name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <summary>
    /// Provides UTF8 and string versions of the JSON property names on the object.
    /// </summary>
    public static class JsonPropertyNames
    {
        /// <summary>
        /// Gets the JSON property name for <see cref="CollateralPercentage"/>.
        /// </summary>
        public const string CollateralPercentage = "collateralPercentage";

        /// <summary>
        /// Gets the JSON property name for <see cref="ConstitutionalCommitteeMaxTermLength"/>.
        /// </summary>
        public const string ConstitutionalCommitteeMaxTermLength = "constitutionalCommitteeMaxTermLength";

        /// <summary>
        /// Gets the JSON property name for <see cref="ConstitutionalCommitteeMinSize"/>.
        /// </summary>
        public const string ConstitutionalCommitteeMinSize = "constitutionalCommitteeMinSize";

        /// <summary>
        /// Gets the JSON property name for <see cref="DelegateRepresentativeDeposit"/>.
        /// </summary>
        public const string DelegateRepresentativeDeposit = "delegateRepresentativeDeposit";

        /// <summary>
        /// Gets the JSON property name for <see cref="DelegateRepresentativeMaxIdleTime"/>.
        /// </summary>
        public const string DelegateRepresentativeMaxIdleTime = "delegateRepresentativeMaxIdleTime";

        /// <summary>
        /// Gets the JSON property name for <see cref="DelegateRepresentativeVotingThresholds"/>.
        /// </summary>
        public const string DelegateRepresentativeVotingThresholds = "delegateRepresentativeVotingThresholds";

        /// <summary>
        /// Gets the JSON property name for <see cref="DesiredNumberOfStakePools"/>.
        /// </summary>
        public const string DesiredNumberOfStakePools = "desiredNumberOfStakePools";

        /// <summary>
        /// Gets the JSON property name for <see cref="ExtraEntropy"/>.
        /// </summary>
        public const string ExtraEntropy = "extraEntropy";

        /// <summary>
        /// Gets the JSON property name for <see cref="FederatedBlockProductionRatio"/>.
        /// </summary>
        public const string FederatedBlockProductionRatio = "federatedBlockProductionRatio";

        /// <summary>
        /// Gets the JSON property name for <see cref="GovernanceActionDeposit"/>.
        /// </summary>
        public const string GovernanceActionDeposit = "governanceActionDeposit";

        /// <summary>
        /// Gets the JSON property name for <see cref="GovernanceActionLifetime"/>.
        /// </summary>
        public const string GovernanceActionLifetime = "governanceActionLifetime";

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxBlockBodySize"/>.
        /// </summary>
        public const string MaxBlockBodySize = "maxBlockBodySize";

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxBlockHeaderSize"/>.
        /// </summary>
        public const string MaxBlockHeaderSize = "maxBlockHeaderSize";

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxCollateralInputs"/>.
        /// </summary>
        public const string MaxCollateralInputs = "maxCollateralInputs";

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxExecutionUnitsPerBlock"/>.
        /// </summary>
        public const string MaxExecutionUnitsPerBlock = "maxExecutionUnitsPerBlock";

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxExecutionUnitsPerTransaction"/>.
        /// </summary>
        public const string MaxExecutionUnitsPerTransaction = "maxExecutionUnitsPerTransaction";

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxReferenceScriptsSize"/>.
        /// </summary>
        public const string MaxReferenceScriptsSize = "maxReferenceScriptsSize";

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxTransactionSize"/>.
        /// </summary>
        public const string MaxTransactionSize = "maxTransactionSize";

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxValueSize"/>.
        /// </summary>
        public const string MaxValueSize = "maxValueSize";

        /// <summary>
        /// Gets the JSON property name for <see cref="MinFeeCoefficient"/>.
        /// </summary>
        public const string MinFeeCoefficient = "minFeeCoefficient";

        /// <summary>
        /// Gets the JSON property name for <see cref="MinFeeConstant"/>.
        /// </summary>
        public const string MinFeeConstant = "minFeeConstant";

        /// <summary>
        /// Gets the JSON property name for <see cref="MinFeeReferenceScripts"/>.
        /// </summary>
        public const string MinFeeReferenceScripts = "minFeeReferenceScripts";

        /// <summary>
        /// Gets the JSON property name for <see cref="MinStakePoolCost"/>.
        /// </summary>
        public const string MinStakePoolCost = "minStakePoolCost";

        /// <summary>
        /// Gets the JSON property name for <see cref="MinUtxoDepositCoefficient"/>.
        /// </summary>
        public const string MinUtxoDepositCoefficient = "minUtxoDepositCoefficient";

        /// <summary>
        /// Gets the JSON property name for <see cref="MinUtxoDepositConstant"/>.
        /// </summary>
        public const string MinUtxoDepositConstant = "minUtxoDepositConstant";

        /// <summary>
        /// Gets the JSON property name for <see cref="MonetaryExpansion"/>.
        /// </summary>
        public const string MonetaryExpansion = "monetaryExpansion";

        /// <summary>
        /// Gets the JSON property name for <see cref="PlutusCostModels"/>.
        /// </summary>
        public const string PlutusCostModels = "plutusCostModels";

        /// <summary>
        /// Gets the JSON property name for <see cref="ScriptExecutionPrices"/>.
        /// </summary>
        public const string ScriptExecutionPrices = "scriptExecutionPrices";

        /// <summary>
        /// Gets the JSON property name for <see cref="StakeCredentialDeposit"/>.
        /// </summary>
        public const string StakeCredentialDeposit = "stakeCredentialDeposit";

        /// <summary>
        /// Gets the JSON property name for <see cref="StakePoolDeposit"/>.
        /// </summary>
        public const string StakePoolDeposit = "stakePoolDeposit";

        /// <summary>
        /// Gets the JSON property name for <see cref="StakePoolPledgeInfluence"/>.
        /// </summary>
        public const string StakePoolPledgeInfluence = "stakePoolPledgeInfluence";

        /// <summary>
        /// Gets the JSON property name for <see cref="StakePoolRetirementEpochBound"/>.
        /// </summary>
        public const string StakePoolRetirementEpochBound = "stakePoolRetirementEpochBound";

        /// <summary>
        /// Gets the JSON property name for <see cref="StakePoolVotingThresholds"/>.
        /// </summary>
        public const string StakePoolVotingThresholds = "stakePoolVotingThresholds";

        /// <summary>
        /// Gets the JSON property name for <see cref="TreasuryExpansion"/>.
        /// </summary>
        public const string TreasuryExpansion = "treasuryExpansion";

        /// <summary>
        /// Gets the JSON property name for <see cref="Version"/>.
        /// </summary>
        public const string Version = "version";

        /// <summary>
        /// Gets the JSON property name for <see cref="CollateralPercentage"/>.
        /// </summary>
        public static ReadOnlySpan<byte> CollateralPercentageUtf8 => "collateralPercentage"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="ConstitutionalCommitteeMaxTermLength"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ConstitutionalCommitteeMaxTermLengthUtf8 => "constitutionalCommitteeMaxTermLength"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="ConstitutionalCommitteeMinSize"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ConstitutionalCommitteeMinSizeUtf8 => "constitutionalCommitteeMinSize"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="DelegateRepresentativeDeposit"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DelegateRepresentativeDepositUtf8 => "delegateRepresentativeDeposit"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="DelegateRepresentativeMaxIdleTime"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DelegateRepresentativeMaxIdleTimeUtf8 => "delegateRepresentativeMaxIdleTime"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="DelegateRepresentativeVotingThresholds"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DelegateRepresentativeVotingThresholdsUtf8 => "delegateRepresentativeVotingThresholds"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="DesiredNumberOfStakePools"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DesiredNumberOfStakePoolsUtf8 => "desiredNumberOfStakePools"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="ExtraEntropy"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ExtraEntropyUtf8 => "extraEntropy"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="FederatedBlockProductionRatio"/>.
        /// </summary>
        public static ReadOnlySpan<byte> FederatedBlockProductionRatioUtf8 => "federatedBlockProductionRatio"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="GovernanceActionDeposit"/>.
        /// </summary>
        public static ReadOnlySpan<byte> GovernanceActionDepositUtf8 => "governanceActionDeposit"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="GovernanceActionLifetime"/>.
        /// </summary>
        public static ReadOnlySpan<byte> GovernanceActionLifetimeUtf8 => "governanceActionLifetime"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxBlockBodySize"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxBlockBodySizeUtf8 => "maxBlockBodySize"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxBlockHeaderSize"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxBlockHeaderSizeUtf8 => "maxBlockHeaderSize"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxCollateralInputs"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxCollateralInputsUtf8 => "maxCollateralInputs"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxExecutionUnitsPerBlock"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxExecutionUnitsPerBlockUtf8 => "maxExecutionUnitsPerBlock"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxExecutionUnitsPerTransaction"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxExecutionUnitsPerTransactionUtf8 => "maxExecutionUnitsPerTransaction"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxReferenceScriptsSize"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxReferenceScriptsSizeUtf8 => "maxReferenceScriptsSize"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxTransactionSize"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxTransactionSizeUtf8 => "maxTransactionSize"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxValueSize"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxValueSizeUtf8 => "maxValueSize"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MinFeeCoefficient"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinFeeCoefficientUtf8 => "minFeeCoefficient"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MinFeeConstant"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinFeeConstantUtf8 => "minFeeConstant"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MinFeeReferenceScripts"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinFeeReferenceScriptsUtf8 => "minFeeReferenceScripts"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MinStakePoolCost"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinStakePoolCostUtf8 => "minStakePoolCost"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MinUtxoDepositCoefficient"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinUtxoDepositCoefficientUtf8 => "minUtxoDepositCoefficient"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MinUtxoDepositConstant"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinUtxoDepositConstantUtf8 => "minUtxoDepositConstant"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MonetaryExpansion"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MonetaryExpansionUtf8 => "monetaryExpansion"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="PlutusCostModels"/>.
        /// </summary>
        public static ReadOnlySpan<byte> PlutusCostModelsUtf8 => "plutusCostModels"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="ScriptExecutionPrices"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ScriptExecutionPricesUtf8 => "scriptExecutionPrices"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="StakeCredentialDeposit"/>.
        /// </summary>
        public static ReadOnlySpan<byte> StakeCredentialDepositUtf8 => "stakeCredentialDeposit"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="StakePoolDeposit"/>.
        /// </summary>
        public static ReadOnlySpan<byte> StakePoolDepositUtf8 => "stakePoolDeposit"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="StakePoolPledgeInfluence"/>.
        /// </summary>
        public static ReadOnlySpan<byte> StakePoolPledgeInfluenceUtf8 => "stakePoolPledgeInfluence"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="StakePoolRetirementEpochBound"/>.
        /// </summary>
        public static ReadOnlySpan<byte> StakePoolRetirementEpochBoundUtf8 => "stakePoolRetirementEpochBound"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="StakePoolVotingThresholds"/>.
        /// </summary>
        public static ReadOnlySpan<byte> StakePoolVotingThresholdsUtf8 => "stakePoolVotingThresholds"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="TreasuryExpansion"/>.
        /// </summary>
        public static ReadOnlySpan<byte> TreasuryExpansionUtf8 => "treasuryExpansion"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Version"/>.
        /// </summary>
        public static ReadOnlySpan<byte> VersionUtf8 => "version"u8;
    }

    private static class __CorvusObjectHelpers
    {
        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonAny"/> built from the object.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBacking(in ProtocolParameters that)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking;
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilder(that.jsonElementBacking).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in ProtocolParameters that, in JsonPropertyName name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in ProtocolParameters that, ReadOnlySpan<char> name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in ProtocolParameters that, ReadOnlySpan<byte> name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in ProtocolParameters that, string name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, with the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWith(in ProtocolParameters that, in JsonPropertyName name, in JsonAny value)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.SetItem(name, value);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderReplacing(that.jsonElementBacking, name, value).ToImmutable();
            }

            throw new InvalidOperationException();
        }
    }
}
