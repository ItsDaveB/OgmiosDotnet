//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Generated;

/// <summary>
/// ogmios
/// </summary>
public readonly partial struct Ogmios
{
    /// <summary>
    /// NextBlockResponse
    /// </summary>
    /// <remarks>
    /// <para>
    /// Response to a &#39;nextBlock&#39; request.
    /// </para>
    /// </remarks>
    public readonly partial struct NextBlockResponse
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct ResultEntity
        {
            /// <summary>
            /// RollBackward
            /// </summary>
            public readonly partial struct RollBackward
            {
                /// <summary>
                /// Generated from JSON Schema.
                /// </summary>
                public readonly partial struct DirectionEntity
                {
                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext;
                        if (level > ValidationLevel.Flag && !result.IsUsingResults)
                        {
                            result = result.UsingResults();
                        }

                        if (level > ValidationLevel.Basic)
                        {
                            if (!result.IsUsingStack)
                            {
                                result = result.UsingStack();
                            }

                            result = result.PushSchemaLocation("OgmiosDotnet/src/Ogmios.Schema/Ogmios/v6.12/Source/ogmios.json#/properties/NextBlockResponse/properties/result/oneOf/1/properties/direction");
                        }

                        JsonValueKind valueKind = this.ValueKind;

                        result = CorvusValidation.TypeValidationHandler(valueKind, result, level);

                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        result = CorvusValidation.CompositionAnyOfValidationHandler(this, result, level);

                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PopLocation();
                        }

                        return result;
                    }

                    /// <summary>
                    /// Constant values for the enum keyword.
                    /// </summary>
                    public static class EnumValues
                    {
                        /// <summary>
                        /// Gets the string 'backward'
                        /// as a <see cref="Generated.Ogmios.NextBlockResponse.ResultEntity.RollBackward.DirectionEntity"/>.
                        /// </summary>
                        public static DirectionEntity Backward { get; } = CorvusValidation.Enum.As<DirectionEntity>();

                        /// <summary>
                        /// Gets the string 'backward'
                        /// as a UTF8 byte array.
                        /// </summary>
                        public static ReadOnlySpan<byte> BackwardUtf8 => CorvusValidation.EnumUtf8;
                    }

                    /// <summary>
                    /// Validation constants for the type.
                    /// </summary>
                    public static partial class CorvusValidation
                    {
                        /// <summary>
                        /// A constant for the <c>enum</c> keyword.
                        /// </summary>
                        public static readonly JsonString Enum = JsonString.ParseValue("\"backward\"");

                        /// <summary>
                        /// A constant for the <c>enum</c> keyword.
                        /// </summary>
                        public static ReadOnlySpan<byte> EnumUtf8 => "\"backward\""u8;

                        /// <summary>
                        /// Core type validation.
                        /// </summary>
                        /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
                        /// <param name="validationContext">The current validation context.</param>
                        /// <param name="level">The current validation level.</param>
                        /// <returns>The resulting validation context after validation.</returns>
                        [MethodImpl(MethodImplOptions.AggressiveInlining)]
                        internal static ValidationContext TypeValidationHandler(
                            JsonValueKind valueKind,
                            in ValidationContext validationContext,
                            ValidationLevel level = ValidationLevel.Flag)
                        {
                            return Corvus.Json.ValidateWithoutCoreType.TypeString(valueKind, validationContext, level, "type");
                        }

                        /// <summary>
                        /// Composition validation (any-of).
                        /// </summary>
                        /// <param name="value">The value to validate.</param>
                        /// <param name="validationContext">The current validation context.</param>
                        /// <param name="level">The current validation level.</param>
                        /// <returns>The resulting validation context after validation.</returns>
                        [MethodImpl(MethodImplOptions.AggressiveInlining)]
                        internal static ValidationContext CompositionAnyOfValidationHandler(
                            in DirectionEntity value,
                            in ValidationContext validationContext,
                            ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext;

                            result = ValidateEnum(value, result, level);
                            if (!result.IsValid && level == ValidationLevel.Flag)
                            {
                                return result;
                            }

                            [MethodImpl(MethodImplOptions.AggressiveInlining)]
                            static ValidationContext ValidateEnum(in DirectionEntity value, in ValidationContext validationContext, ValidationLevel level)
                            {
                                ValidationContext result = validationContext;
                                bool enumFoundValid = false;

                                enumFoundValid = value.Equals(CorvusValidation.Enum);

                                if (enumFoundValid)
                                {
                                    if (level >= ValidationLevel.Verbose)
                                    {
                                        result = result.WithResult(isValid: true, "Validation enum - validated against the enumeration.", "enum");
                                    }
                                }
                                else
                                {
                                    if (level == ValidationLevel.Flag)
                                    {
                                        result = result.WithResult(isValid: false);
                                    }
                                    else
                                    {
                                        result = result.WithResult(isValid: false, "Validation enum - did not validate against the enumeration.", "enum");
                                    }
                                }

                                return result;
                            }

                            return result;
                        }
                    }
                }
            }
        }
    }
}
