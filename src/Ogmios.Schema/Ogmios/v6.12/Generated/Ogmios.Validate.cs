//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Generated;
/// <summary>
/// ogmios
/// </summary>
public readonly partial struct Ogmios
{
    /// <inheritdoc/>
    public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
    {
        ValidationContext result = validationContext;
        if (level > ValidationLevel.Flag && !result.IsUsingResults)
        {
            result = result.UsingResults();
        }

        if (level > ValidationLevel.Basic)
        {
            if (!result.IsUsingStack)
            {
                result = result.UsingStack();
            }

            result = result.PushSchemaLocation("OgmiosDotnet/src/Ogmios.Schema/Ogmios/v6.12/Source/ogmios.json");
        }

        JsonValueKind valueKind = this.ValueKind;
        if (!result.IsUsingEvaluatedProperties)
        {
            result = result.UsingEvaluatedProperties();
        }

        result = CorvusValidation.TypeValidationHandler(valueKind, result, level);

        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        result = CorvusValidation.ObjectValidationHandler(this, valueKind, result, level);

        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.PopLocation();
        }

        return result;
    }

    /// <summary>
    /// Validation constants for the type.
    /// </summary>
    public static partial class CorvusValidation
    {
        /// <summary>
        /// Core type validation.
        /// </summary>
        /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
        /// <param name="validationContext">The current validation context.</param>
        /// <param name="level">The current validation level.</param>
        /// <returns>The resulting validation context after validation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static ValidationContext TypeValidationHandler(
            JsonValueKind valueKind,
            in ValidationContext validationContext,
            ValidationLevel level = ValidationLevel.Flag)
        {
            return Corvus.Json.ValidateWithoutCoreType.TypeObject(valueKind, validationContext, level, "type");
        }

        /// <summary>
        /// Object validation.
        /// </summary>
        /// <param name="value">The value to validate.</param>
        /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
        /// <param name="validationContext">The current validation context.</param>
        /// <param name="level">The current validation level.</param>
        /// <returns>The resulting validation context after validation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static ValidationContext ObjectValidationHandler(
            in Ogmios value,
            JsonValueKind valueKind,
            in ValidationContext validationContext,
            ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            if (valueKind != JsonValueKind.Object)
            {
                if (level == ValidationLevel.Verbose)
                {
                    ValidationContext ignoredResult = validationContext;
                    ignoredResult = ignoredResult.WithResult(isValid: true, "Validation additionalProperties - ignored because the value is not an object", "additionalProperties");
                    ignoredResult = ignoredResult.WithResult(isValid: true, "Validation properties - ignored because the value is not an object", "properties");
                    ignoredResult = ignoredResult.WithResult(isValid: true, "Validation required - ignored because the value is not an object", "required");

                    return ignoredResult;
                }

                return validationContext;
            }

            bool hasSeenAcquireLedgerStateValue = false;
            bool hasSeenAcquireLedgerStateResponse = false;
            bool hasSeenAcquireMempoolValue = false;
            bool hasSeenAcquireMempoolResponseValue = false;
            bool hasSeenEvaluateTransactionValue = false;
            bool hasSeenEvaluateTransactionResponse = false;
            bool hasSeenFindIntersectionValue = false;
            bool hasSeenFindIntersectionResponse = false;
            bool hasSeenHasTransactionValue = false;
            bool hasSeenHasTransactionResponse = false;
            bool hasSeenNextBlockValue = false;
            bool hasSeenNextBlockResponseValue = false;
            bool hasSeenNextTransactionValue = false;
            bool hasSeenNextTransactionResponse = false;
            bool hasSeenQueryLedgerStateConstitutionValue = false;
            bool hasSeenQueryLedgerStateConstitutionalCommitteeValue = false;
            bool hasSeenQueryLedgerStateConstitutionalCommitteeResponse = false;
            bool hasSeenQueryLedgerStateConstitutionResponse = false;
            bool hasSeenQueryLedgerStateDelegateRepresentativesValue = false;
            bool hasSeenQueryLedgerStateDelegateRepresentativesResponse = false;
            bool hasSeenQueryLedgerStateDumpValue = false;
            bool hasSeenQueryLedgerStateDumpResponse = false;
            bool hasSeenQueryLedgerStateEpochValue = false;
            bool hasSeenQueryLedgerStateEpochResponse = false;
            bool hasSeenQueryLedgerStateEraStartValue = false;
            bool hasSeenQueryLedgerStateEraStartResponse = false;
            bool hasSeenQueryLedgerStateEraSummariesValue = false;
            bool hasSeenQueryLedgerStateEraSummariesResponse = false;
            bool hasSeenQueryLedgerStateGovernanceProposalsValue = false;
            bool hasSeenQueryLedgerStateGovernanceProposalsResponse = false;
            bool hasSeenQueryLedgerStateLiveStakeDistributionValue = false;
            bool hasSeenQueryLedgerStateLiveStakeDistributionResponse = false;
            bool hasSeenQueryLedgerStateNoncesValue = false;
            bool hasSeenQueryLedgerStateNoncesResponse = false;
            bool hasSeenQueryLedgerStateOperationalCertificatesValue = false;
            bool hasSeenQueryLedgerStateOperationalCertificatesResponse = false;
            bool hasSeenQueryLedgerStateProjectedRewardsValue = false;
            bool hasSeenQueryLedgerStateProjectedRewardsResponse = false;
            bool hasSeenQueryLedgerStateProposedProtocolParametersValue = false;
            bool hasSeenQueryLedgerStateProposedProtocolParametersResponse = false;
            bool hasSeenQueryLedgerStateProtocolParametersValue = false;
            bool hasSeenQueryLedgerStateProtocolParametersResponse = false;
            bool hasSeenQueryLedgerStateRewardAccountSummariesValue = false;
            bool hasSeenQueryLedgerStateRewardAccountSummariesResponse = false;
            bool hasSeenQueryLedgerStateRewardsProvenanceValue = false;
            bool hasSeenQueryLedgerStateRewardsProvenanceResponse = false;
            bool hasSeenQueryLedgerStateStakePoolsValue = false;
            bool hasSeenQueryLedgerStateStakePoolsResponse = false;
            bool hasSeenQueryLedgerStateTipValue = false;
            bool hasSeenQueryLedgerStateTipResponse = false;
            bool hasSeenQueryLedgerStateTreasuryAndReservesValue = false;
            bool hasSeenQueryLedgerStateTreasuryAndReservesResponse = false;
            bool hasSeenQueryLedgerStateUtxoValue = false;
            bool hasSeenQueryLedgerStateUtxoResponse = false;
            bool hasSeenQueryNetworkBlockHeightValue = false;
            bool hasSeenQueryNetworkBlockHeightResponseValue = false;
            bool hasSeenQueryNetworkGenesisConfigurationValue = false;
            bool hasSeenQueryNetworkGenesisConfigurationResponseValue = false;
            bool hasSeenQueryNetworkStartTimeValue = false;
            bool hasSeenQueryNetworkStartTimeResponseValue = false;
            bool hasSeenQueryNetworkTipValue = false;
            bool hasSeenQueryNetworkTipResponseValue = false;
            bool hasSeenReleaseLedgerStateValue = false;
            bool hasSeenReleaseLedgerStateResponseValue = false;
            bool hasSeenReleaseMempoolValue = false;
            bool hasSeenReleaseMempoolResponse = false;
            bool hasSeenRpcErrorValue = false;
            bool hasSeenSizeAndCapacityResponse = false;
            bool hasSeenSizeOfMempoolValue = false;
            bool hasSeenSubmitTransactionValue = false;
            bool hasSeenSubmitTransactionResponse = false;

            int propertyCount = 0;
            foreach (JsonObjectProperty property in value.EnumerateObject())
            {
                string? propertyNameAsString = null;

                if (property.NameEquals(JsonPropertyNames.AcquireLedgerStateValueUtf8, JsonPropertyNames.AcquireLedgerStateValue))
                {
                    hasSeenAcquireLedgerStateValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/AcquireLedgerState"), JsonPropertyNames.AcquireLedgerStateValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.AcquireLedgerState>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.AcquireLedgerStateFailureValueUtf8, JsonPropertyNames.AcquireLedgerStateFailureValue))
                {
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/AcquireLedgerStateFailure"), JsonPropertyNames.AcquireLedgerStateFailureValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.AcquireLedgerStateFailure>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.AcquireLedgerStateResponseUtf8, JsonPropertyNames.AcquireLedgerStateResponse))
                {
                    hasSeenAcquireLedgerStateResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/AcquireLedgerStateResponse"), JsonPropertyNames.AcquireLedgerStateResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.AcquireLedgerStateResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.AcquireMempoolValueUtf8, JsonPropertyNames.AcquireMempoolValue))
                {
                    hasSeenAcquireMempoolValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/AcquireMempool"), JsonPropertyNames.AcquireMempoolValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.AcquireMempool>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.AcquireMempoolResponseValueUtf8, JsonPropertyNames.AcquireMempoolResponseValue))
                {
                    hasSeenAcquireMempoolResponseValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/AcquireMempoolResponse"), JsonPropertyNames.AcquireMempoolResponseValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.AcquireMempoolResponse>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.EvaluateTransactionValueUtf8, JsonPropertyNames.EvaluateTransactionValue))
                {
                    hasSeenEvaluateTransactionValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/EvaluateTransaction"), JsonPropertyNames.EvaluateTransactionValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.EvaluateTransaction>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.EvaluateTransactionResponseUtf8, JsonPropertyNames.EvaluateTransactionResponse))
                {
                    hasSeenEvaluateTransactionResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/EvaluateTransactionResponse"), JsonPropertyNames.EvaluateTransactionResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.EvaluateTransactionResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.FindIntersectionValueUtf8, JsonPropertyNames.FindIntersectionValue))
                {
                    hasSeenFindIntersectionValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/FindIntersection"), JsonPropertyNames.FindIntersectionValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.FindIntersection>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.FindIntersectionResponseUtf8, JsonPropertyNames.FindIntersectionResponse))
                {
                    hasSeenFindIntersectionResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/FindIntersectionResponse"), JsonPropertyNames.FindIntersectionResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.FindIntersectionResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.HasTransactionValueUtf8, JsonPropertyNames.HasTransactionValue))
                {
                    hasSeenHasTransactionValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/HasTransaction"), JsonPropertyNames.HasTransactionValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.HasTransaction>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.HasTransactionResponseUtf8, JsonPropertyNames.HasTransactionResponse))
                {
                    hasSeenHasTransactionResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/HasTransactionResponse"), JsonPropertyNames.HasTransactionResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.HasTransactionResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.MustAcquireMempoolFirstValueUtf8, JsonPropertyNames.MustAcquireMempoolFirstValue))
                {
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/MustAcquireMempoolFirst"), JsonPropertyNames.MustAcquireMempoolFirstValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.MustAcquireMempoolFirst>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.NextBlockValueUtf8, JsonPropertyNames.NextBlockValue))
                {
                    hasSeenNextBlockValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/NextBlock"), JsonPropertyNames.NextBlockValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.NextBlock>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.NextBlockResponseValueUtf8, JsonPropertyNames.NextBlockResponseValue))
                {
                    hasSeenNextBlockResponseValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/NextBlockResponse"), JsonPropertyNames.NextBlockResponseValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.NextBlockResponse>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.NextTransactionValueUtf8, JsonPropertyNames.NextTransactionValue))
                {
                    hasSeenNextTransactionValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/NextTransaction"), JsonPropertyNames.NextTransactionValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.NextTransaction>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.NextTransactionResponseUtf8, JsonPropertyNames.NextTransactionResponse))
                {
                    hasSeenNextTransactionResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/NextTransactionResponse"), JsonPropertyNames.NextTransactionResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.NextTransactionResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateAcquiredExpiredValueUtf8, JsonPropertyNames.QueryLedgerStateAcquiredExpiredValue))
                {
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateAcquiredExpired"), JsonPropertyNames.QueryLedgerStateAcquiredExpiredValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateAcquiredExpired>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateConstitutionValueUtf8, JsonPropertyNames.QueryLedgerStateConstitutionValue))
                {
                    hasSeenQueryLedgerStateConstitutionValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateConstitution"), JsonPropertyNames.QueryLedgerStateConstitutionValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateConstitution>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateConstitutionalCommitteeValueUtf8, JsonPropertyNames.QueryLedgerStateConstitutionalCommitteeValue))
                {
                    hasSeenQueryLedgerStateConstitutionalCommitteeValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateConstitutionalCommittee"), JsonPropertyNames.QueryLedgerStateConstitutionalCommitteeValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateConstitutionalCommittee>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateConstitutionalCommitteeResponseUtf8, JsonPropertyNames.QueryLedgerStateConstitutionalCommitteeResponse))
                {
                    hasSeenQueryLedgerStateConstitutionalCommitteeResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateConstitutionalCommitteeResponse"), JsonPropertyNames.QueryLedgerStateConstitutionalCommitteeResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateConstitutionalCommitteeResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateConstitutionResponseUtf8, JsonPropertyNames.QueryLedgerStateConstitutionResponse))
                {
                    hasSeenQueryLedgerStateConstitutionResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateConstitutionResponse"), JsonPropertyNames.QueryLedgerStateConstitutionResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateConstitutionResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateDelegateRepresentativesValueUtf8, JsonPropertyNames.QueryLedgerStateDelegateRepresentativesValue))
                {
                    hasSeenQueryLedgerStateDelegateRepresentativesValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateDelegateRepresentatives"), JsonPropertyNames.QueryLedgerStateDelegateRepresentativesValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateDelegateRepresentatives>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateDelegateRepresentativesResponseUtf8, JsonPropertyNames.QueryLedgerStateDelegateRepresentativesResponse))
                {
                    hasSeenQueryLedgerStateDelegateRepresentativesResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateDelegateRepresentativesResponse"), JsonPropertyNames.QueryLedgerStateDelegateRepresentativesResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateDelegateRepresentativesResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateDumpValueUtf8, JsonPropertyNames.QueryLedgerStateDumpValue))
                {
                    hasSeenQueryLedgerStateDumpValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateDump"), JsonPropertyNames.QueryLedgerStateDumpValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateDump>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateDumpResponseUtf8, JsonPropertyNames.QueryLedgerStateDumpResponse))
                {
                    hasSeenQueryLedgerStateDumpResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateDumpResponse"), JsonPropertyNames.QueryLedgerStateDumpResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateDumpResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateEpochValueUtf8, JsonPropertyNames.QueryLedgerStateEpochValue))
                {
                    hasSeenQueryLedgerStateEpochValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateEpoch"), JsonPropertyNames.QueryLedgerStateEpochValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateEpoch>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateEpochResponseUtf8, JsonPropertyNames.QueryLedgerStateEpochResponse))
                {
                    hasSeenQueryLedgerStateEpochResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateEpochResponse"), JsonPropertyNames.QueryLedgerStateEpochResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateEpochResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateEraMismatchValueUtf8, JsonPropertyNames.QueryLedgerStateEraMismatchValue))
                {
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateEraMismatch"), JsonPropertyNames.QueryLedgerStateEraMismatchValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateEraMismatch>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateEraStartValueUtf8, JsonPropertyNames.QueryLedgerStateEraStartValue))
                {
                    hasSeenQueryLedgerStateEraStartValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateEraStart"), JsonPropertyNames.QueryLedgerStateEraStartValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateEraStart>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateEraStartResponseUtf8, JsonPropertyNames.QueryLedgerStateEraStartResponse))
                {
                    hasSeenQueryLedgerStateEraStartResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateEraStartResponse"), JsonPropertyNames.QueryLedgerStateEraStartResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateEraStartResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateEraSummariesValueUtf8, JsonPropertyNames.QueryLedgerStateEraSummariesValue))
                {
                    hasSeenQueryLedgerStateEraSummariesValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateEraSummaries"), JsonPropertyNames.QueryLedgerStateEraSummariesValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateEraSummaries>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateEraSummariesResponseUtf8, JsonPropertyNames.QueryLedgerStateEraSummariesResponse))
                {
                    hasSeenQueryLedgerStateEraSummariesResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateEraSummariesResponse"), JsonPropertyNames.QueryLedgerStateEraSummariesResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateEraSummariesResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateGovernanceProposalsValueUtf8, JsonPropertyNames.QueryLedgerStateGovernanceProposalsValue))
                {
                    hasSeenQueryLedgerStateGovernanceProposalsValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateGovernanceProposals"), JsonPropertyNames.QueryLedgerStateGovernanceProposalsValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateGovernanceProposals>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateGovernanceProposalsResponseUtf8, JsonPropertyNames.QueryLedgerStateGovernanceProposalsResponse))
                {
                    hasSeenQueryLedgerStateGovernanceProposalsResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateGovernanceProposalsResponse"), JsonPropertyNames.QueryLedgerStateGovernanceProposalsResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateGovernanceProposalsResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateLiveStakeDistributionValueUtf8, JsonPropertyNames.QueryLedgerStateLiveStakeDistributionValue))
                {
                    hasSeenQueryLedgerStateLiveStakeDistributionValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateLiveStakeDistribution"), JsonPropertyNames.QueryLedgerStateLiveStakeDistributionValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateLiveStakeDistribution>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateLiveStakeDistributionResponseUtf8, JsonPropertyNames.QueryLedgerStateLiveStakeDistributionResponse))
                {
                    hasSeenQueryLedgerStateLiveStakeDistributionResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateLiveStakeDistributionResponse"), JsonPropertyNames.QueryLedgerStateLiveStakeDistributionResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateLiveStakeDistributionResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateNoncesValueUtf8, JsonPropertyNames.QueryLedgerStateNoncesValue))
                {
                    hasSeenQueryLedgerStateNoncesValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateNonces"), JsonPropertyNames.QueryLedgerStateNoncesValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateNonces>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateNoncesResponseUtf8, JsonPropertyNames.QueryLedgerStateNoncesResponse))
                {
                    hasSeenQueryLedgerStateNoncesResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateNoncesResponse"), JsonPropertyNames.QueryLedgerStateNoncesResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateNoncesResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateOperationalCertificatesValueUtf8, JsonPropertyNames.QueryLedgerStateOperationalCertificatesValue))
                {
                    hasSeenQueryLedgerStateOperationalCertificatesValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateOperationalCertificates"), JsonPropertyNames.QueryLedgerStateOperationalCertificatesValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateOperationalCertificates>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateOperationalCertificatesResponseUtf8, JsonPropertyNames.QueryLedgerStateOperationalCertificatesResponse))
                {
                    hasSeenQueryLedgerStateOperationalCertificatesResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateOperationalCertificatesResponse"), JsonPropertyNames.QueryLedgerStateOperationalCertificatesResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateOperationalCertificatesResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateProjectedRewardsValueUtf8, JsonPropertyNames.QueryLedgerStateProjectedRewardsValue))
                {
                    hasSeenQueryLedgerStateProjectedRewardsValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateProjectedRewards"), JsonPropertyNames.QueryLedgerStateProjectedRewardsValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateProjectedRewards>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateProjectedRewardsResponseUtf8, JsonPropertyNames.QueryLedgerStateProjectedRewardsResponse))
                {
                    hasSeenQueryLedgerStateProjectedRewardsResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateProjectedRewardsResponse"), JsonPropertyNames.QueryLedgerStateProjectedRewardsResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateProjectedRewardsResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateProposedProtocolParametersValueUtf8, JsonPropertyNames.QueryLedgerStateProposedProtocolParametersValue))
                {
                    hasSeenQueryLedgerStateProposedProtocolParametersValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateProposedProtocolParameters"), JsonPropertyNames.QueryLedgerStateProposedProtocolParametersValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateProposedProtocolParameters>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateProposedProtocolParametersResponseUtf8, JsonPropertyNames.QueryLedgerStateProposedProtocolParametersResponse))
                {
                    hasSeenQueryLedgerStateProposedProtocolParametersResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateProposedProtocolParametersResponse"), JsonPropertyNames.QueryLedgerStateProposedProtocolParametersResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateProposedProtocolParametersResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateProtocolParametersValueUtf8, JsonPropertyNames.QueryLedgerStateProtocolParametersValue))
                {
                    hasSeenQueryLedgerStateProtocolParametersValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateProtocolParameters"), JsonPropertyNames.QueryLedgerStateProtocolParametersValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateProtocolParameters>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateProtocolParametersResponseUtf8, JsonPropertyNames.QueryLedgerStateProtocolParametersResponse))
                {
                    hasSeenQueryLedgerStateProtocolParametersResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateProtocolParametersResponse"), JsonPropertyNames.QueryLedgerStateProtocolParametersResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateProtocolParametersResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateRewardAccountSummariesValueUtf8, JsonPropertyNames.QueryLedgerStateRewardAccountSummariesValue))
                {
                    hasSeenQueryLedgerStateRewardAccountSummariesValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateRewardAccountSummaries"), JsonPropertyNames.QueryLedgerStateRewardAccountSummariesValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateRewardAccountSummaries>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateRewardAccountSummariesResponseUtf8, JsonPropertyNames.QueryLedgerStateRewardAccountSummariesResponse))
                {
                    hasSeenQueryLedgerStateRewardAccountSummariesResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateRewardAccountSummariesResponse"), JsonPropertyNames.QueryLedgerStateRewardAccountSummariesResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateRewardAccountSummariesResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateRewardsProvenanceValueUtf8, JsonPropertyNames.QueryLedgerStateRewardsProvenanceValue))
                {
                    hasSeenQueryLedgerStateRewardsProvenanceValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateRewardsProvenance"), JsonPropertyNames.QueryLedgerStateRewardsProvenanceValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateRewardsProvenance>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateRewardsProvenanceResponseUtf8, JsonPropertyNames.QueryLedgerStateRewardsProvenanceResponse))
                {
                    hasSeenQueryLedgerStateRewardsProvenanceResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateRewardsProvenanceResponse"), JsonPropertyNames.QueryLedgerStateRewardsProvenanceResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateRewardsProvenanceResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateStakePoolsValueUtf8, JsonPropertyNames.QueryLedgerStateStakePoolsValue))
                {
                    hasSeenQueryLedgerStateStakePoolsValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateStakePools"), JsonPropertyNames.QueryLedgerStateStakePoolsValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateStakePools>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateStakePoolsResponseUtf8, JsonPropertyNames.QueryLedgerStateStakePoolsResponse))
                {
                    hasSeenQueryLedgerStateStakePoolsResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateStakePoolsResponse"), JsonPropertyNames.QueryLedgerStateStakePoolsResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateStakePoolsResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateTipValueUtf8, JsonPropertyNames.QueryLedgerStateTipValue))
                {
                    hasSeenQueryLedgerStateTipValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateTip"), JsonPropertyNames.QueryLedgerStateTipValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateTip>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateTipResponseUtf8, JsonPropertyNames.QueryLedgerStateTipResponse))
                {
                    hasSeenQueryLedgerStateTipResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateTipResponse"), JsonPropertyNames.QueryLedgerStateTipResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateTipResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateTreasuryAndReservesValueUtf8, JsonPropertyNames.QueryLedgerStateTreasuryAndReservesValue))
                {
                    hasSeenQueryLedgerStateTreasuryAndReservesValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateTreasuryAndReserves"), JsonPropertyNames.QueryLedgerStateTreasuryAndReservesValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateTreasuryAndReserves>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateTreasuryAndReservesResponseUtf8, JsonPropertyNames.QueryLedgerStateTreasuryAndReservesResponse))
                {
                    hasSeenQueryLedgerStateTreasuryAndReservesResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateTreasuryAndReservesResponse"), JsonPropertyNames.QueryLedgerStateTreasuryAndReservesResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateTreasuryAndReservesResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateUnavailableInCurrentEraValueUtf8, JsonPropertyNames.QueryLedgerStateUnavailableInCurrentEraValue))
                {
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateUnavailableInCurrentEra"), JsonPropertyNames.QueryLedgerStateUnavailableInCurrentEraValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateUnavailableInCurrentEra>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateUtxoValueUtf8, JsonPropertyNames.QueryLedgerStateUtxoValue))
                {
                    hasSeenQueryLedgerStateUtxoValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateUtxo"), JsonPropertyNames.QueryLedgerStateUtxoValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateUtxo>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryLedgerStateUtxoResponseUtf8, JsonPropertyNames.QueryLedgerStateUtxoResponse))
                {
                    hasSeenQueryLedgerStateUtxoResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryLedgerStateUtxoResponse"), JsonPropertyNames.QueryLedgerStateUtxoResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryLedgerStateUtxoResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryNetworkBlockHeightValueUtf8, JsonPropertyNames.QueryNetworkBlockHeightValue))
                {
                    hasSeenQueryNetworkBlockHeightValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryNetworkBlockHeight"), JsonPropertyNames.QueryNetworkBlockHeightValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryNetworkBlockHeight>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryNetworkBlockHeightResponseValueUtf8, JsonPropertyNames.QueryNetworkBlockHeightResponseValue))
                {
                    hasSeenQueryNetworkBlockHeightResponseValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryNetworkBlockHeightResponse"), JsonPropertyNames.QueryNetworkBlockHeightResponseValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryNetworkBlockHeightResponse>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryNetworkGenesisConfigurationValueUtf8, JsonPropertyNames.QueryNetworkGenesisConfigurationValue))
                {
                    hasSeenQueryNetworkGenesisConfigurationValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryNetworkGenesisConfiguration"), JsonPropertyNames.QueryNetworkGenesisConfigurationValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryNetworkGenesisConfiguration>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryNetworkGenesisConfigurationResponseValueUtf8, JsonPropertyNames.QueryNetworkGenesisConfigurationResponseValue))
                {
                    hasSeenQueryNetworkGenesisConfigurationResponseValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryNetworkGenesisConfigurationResponse"), JsonPropertyNames.QueryNetworkGenesisConfigurationResponseValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryNetworkGenesisConfigurationResponse>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryNetworkInvalidGenesisValueUtf8, JsonPropertyNames.QueryNetworkInvalidGenesisValue))
                {
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryNetworkInvalidGenesis"), JsonPropertyNames.QueryNetworkInvalidGenesisValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryNetworkInvalidGenesis>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryNetworkStartTimeValueUtf8, JsonPropertyNames.QueryNetworkStartTimeValue))
                {
                    hasSeenQueryNetworkStartTimeValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryNetworkStartTime"), JsonPropertyNames.QueryNetworkStartTimeValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryNetworkStartTime>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryNetworkStartTimeResponseValueUtf8, JsonPropertyNames.QueryNetworkStartTimeResponseValue))
                {
                    hasSeenQueryNetworkStartTimeResponseValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryNetworkStartTimeResponse"), JsonPropertyNames.QueryNetworkStartTimeResponseValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryNetworkStartTimeResponse>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryNetworkTipValueUtf8, JsonPropertyNames.QueryNetworkTipValue))
                {
                    hasSeenQueryNetworkTipValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryNetworkTip"), JsonPropertyNames.QueryNetworkTipValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryNetworkTip>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.QueryNetworkTipResponseValueUtf8, JsonPropertyNames.QueryNetworkTipResponseValue))
                {
                    hasSeenQueryNetworkTipResponseValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/QueryNetworkTipResponse"), JsonPropertyNames.QueryNetworkTipResponseValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.QueryNetworkTipResponse>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.ReleaseLedgerStateValueUtf8, JsonPropertyNames.ReleaseLedgerStateValue))
                {
                    hasSeenReleaseLedgerStateValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/ReleaseLedgerState"), JsonPropertyNames.ReleaseLedgerStateValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.ReleaseLedgerState>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.ReleaseLedgerStateResponseValueUtf8, JsonPropertyNames.ReleaseLedgerStateResponseValue))
                {
                    hasSeenReleaseLedgerStateResponseValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/ReleaseLedgerStateResponse"), JsonPropertyNames.ReleaseLedgerStateResponseValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.ReleaseLedgerStateResponse>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.ReleaseMempoolValueUtf8, JsonPropertyNames.ReleaseMempoolValue))
                {
                    hasSeenReleaseMempoolValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/ReleaseMempool"), JsonPropertyNames.ReleaseMempoolValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.ReleaseMempool>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.ReleaseMempoolResponseUtf8, JsonPropertyNames.ReleaseMempoolResponse))
                {
                    hasSeenReleaseMempoolResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/ReleaseMempoolResponse"), JsonPropertyNames.ReleaseMempoolResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.ReleaseMempoolResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.RpcErrorValueUtf8, JsonPropertyNames.RpcErrorValue))
                {
                    hasSeenRpcErrorValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/RpcError"), JsonPropertyNames.RpcErrorValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.RpcError>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.SizeAndCapacityResponseUtf8, JsonPropertyNames.SizeAndCapacityResponse))
                {
                    hasSeenSizeAndCapacityResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new(""), JsonPropertyNames.SizeAndCapacityResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Corvus.Json.JsonAny>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.SizeOfMempoolValueUtf8, JsonPropertyNames.SizeOfMempoolValue))
                {
                    hasSeenSizeOfMempoolValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/SizeOfMempool"), JsonPropertyNames.SizeOfMempoolValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.SizeOfMempool>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.SizeOfMempoolResponseUtf8, JsonPropertyNames.SizeOfMempoolResponse))
                {
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/SizeOfMempoolResponse"), JsonPropertyNames.SizeOfMempoolResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.SizeOfMempoolResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.SubmitTransactionValueUtf8, JsonPropertyNames.SubmitTransactionValue))
                {
                    hasSeenSubmitTransactionValue = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/SubmitTransaction"), JsonPropertyNames.SubmitTransactionValue);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.SubmitTransaction>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.SubmitTransactionResponseUtf8, JsonPropertyNames.SubmitTransactionResponse))
                {
                    hasSeenSubmitTransactionResponse = true;
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/SubmitTransactionResponse"), JsonPropertyNames.SubmitTransactionResponse);
                    }

                    ValidationContext propertyResult = property.Value.As<Generated.Ogmios.SubmitTransactionResponseEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                if (!result.HasEvaluatedLocalProperty(propertyCount))
                {
                    if (level > ValidationLevel.Basic)
                    {
                        string localEvaluatedPropertyName = (propertyNameAsString ??= property.Name.GetString());
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new JsonReference("#/additionalProperties").AppendUnencodedPropertyNameToFragment(localEvaluatedPropertyName), localEvaluatedPropertyName);
                    }

                    ValidationContext propertyResult = property.Value.As<Corvus.Json.JsonNotAny>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }

                    result = result.WithLocalProperty(propertyCount);
                }

                propertyCount++;
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/8"));
            }

            if (!hasSeenAcquireLedgerStateValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'AcquireLedgerState' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'AcquireLedgerState' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/9"));
            }

            if (!hasSeenAcquireLedgerStateResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'AcquireLedgerStateResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'AcquireLedgerStateResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/60"));
            }

            if (!hasSeenAcquireMempoolValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'AcquireMempool' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'AcquireMempool' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/61"));
            }

            if (!hasSeenAcquireMempoolResponseValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'AcquireMempoolResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'AcquireMempoolResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/6"));
            }

            if (!hasSeenEvaluateTransactionValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'EvaluateTransaction' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'EvaluateTransaction' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/7"));
            }

            if (!hasSeenEvaluateTransactionResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'EvaluateTransactionResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'EvaluateTransactionResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/0"));
            }

            if (!hasSeenFindIntersectionValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'FindIntersection' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'FindIntersection' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/1"));
            }

            if (!hasSeenFindIntersectionResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'FindIntersectionResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'FindIntersectionResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/64"));
            }

            if (!hasSeenHasTransactionValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'HasTransaction' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'HasTransaction' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/65"));
            }

            if (!hasSeenHasTransactionResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'HasTransactionResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'HasTransactionResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/2"));
            }

            if (!hasSeenNextBlockValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'NextBlock' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'NextBlock' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/3"));
            }

            if (!hasSeenNextBlockResponseValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'NextBlockResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'NextBlockResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/62"));
            }

            if (!hasSeenNextTransactionValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'NextTransaction' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'NextTransaction' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/63"));
            }

            if (!hasSeenNextTransactionResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'NextTransactionResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'NextTransactionResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/10"));
            }

            if (!hasSeenQueryLedgerStateConstitutionValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateConstitution' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateConstitution' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/12"));
            }

            if (!hasSeenQueryLedgerStateConstitutionalCommitteeValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateConstitutionalCommittee' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateConstitutionalCommittee' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/13"));
            }

            if (!hasSeenQueryLedgerStateConstitutionalCommitteeResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateConstitutionalCommitteeResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateConstitutionalCommitteeResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/11"));
            }

            if (!hasSeenQueryLedgerStateConstitutionResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateConstitutionResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateConstitutionResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/16"));
            }

            if (!hasSeenQueryLedgerStateDelegateRepresentativesValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateDelegateRepresentatives' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateDelegateRepresentatives' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/17"));
            }

            if (!hasSeenQueryLedgerStateDelegateRepresentativesResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateDelegateRepresentativesResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateDelegateRepresentativesResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/14"));
            }

            if (!hasSeenQueryLedgerStateDumpValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateDump' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateDump' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/15"));
            }

            if (!hasSeenQueryLedgerStateDumpResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateDumpResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateDumpResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/18"));
            }

            if (!hasSeenQueryLedgerStateEpochValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateEpoch' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateEpoch' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/19"));
            }

            if (!hasSeenQueryLedgerStateEpochResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateEpochResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateEpochResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/20"));
            }

            if (!hasSeenQueryLedgerStateEraStartValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateEraStart' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateEraStart' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/21"));
            }

            if (!hasSeenQueryLedgerStateEraStartResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateEraStartResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateEraStartResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/22"));
            }

            if (!hasSeenQueryLedgerStateEraSummariesValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateEraSummaries' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateEraSummaries' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/23"));
            }

            if (!hasSeenQueryLedgerStateEraSummariesResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateEraSummariesResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateEraSummariesResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/24"));
            }

            if (!hasSeenQueryLedgerStateGovernanceProposalsValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateGovernanceProposals' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateGovernanceProposals' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/25"));
            }

            if (!hasSeenQueryLedgerStateGovernanceProposalsResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateGovernanceProposalsResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateGovernanceProposalsResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/26"));
            }

            if (!hasSeenQueryLedgerStateLiveStakeDistributionValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateLiveStakeDistribution' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateLiveStakeDistribution' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/27"));
            }

            if (!hasSeenQueryLedgerStateLiveStakeDistributionResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateLiveStakeDistributionResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateLiveStakeDistributionResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/28"));
            }

            if (!hasSeenQueryLedgerStateNoncesValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateNonces' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateNonces' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/29"));
            }

            if (!hasSeenQueryLedgerStateNoncesResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateNoncesResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateNoncesResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/30"));
            }

            if (!hasSeenQueryLedgerStateOperationalCertificatesValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateOperationalCertificates' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateOperationalCertificates' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/31"));
            }

            if (!hasSeenQueryLedgerStateOperationalCertificatesResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateOperationalCertificatesResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateOperationalCertificatesResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/32"));
            }

            if (!hasSeenQueryLedgerStateProjectedRewardsValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateProjectedRewards' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateProjectedRewards' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/33"));
            }

            if (!hasSeenQueryLedgerStateProjectedRewardsResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateProjectedRewardsResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateProjectedRewardsResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/34"));
            }

            if (!hasSeenQueryLedgerStateProposedProtocolParametersValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateProposedProtocolParameters' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateProposedProtocolParameters' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/35"));
            }

            if (!hasSeenQueryLedgerStateProposedProtocolParametersResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateProposedProtocolParametersResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateProposedProtocolParametersResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/36"));
            }

            if (!hasSeenQueryLedgerStateProtocolParametersValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateProtocolParameters' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateProtocolParameters' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/37"));
            }

            if (!hasSeenQueryLedgerStateProtocolParametersResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateProtocolParametersResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateProtocolParametersResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/38"));
            }

            if (!hasSeenQueryLedgerStateRewardAccountSummariesValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateRewardAccountSummaries' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateRewardAccountSummaries' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/39"));
            }

            if (!hasSeenQueryLedgerStateRewardAccountSummariesResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateRewardAccountSummariesResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateRewardAccountSummariesResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/40"));
            }

            if (!hasSeenQueryLedgerStateRewardsProvenanceValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateRewardsProvenance' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateRewardsProvenance' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/41"));
            }

            if (!hasSeenQueryLedgerStateRewardsProvenanceResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateRewardsProvenanceResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateRewardsProvenanceResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/42"));
            }

            if (!hasSeenQueryLedgerStateStakePoolsValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateStakePools' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateStakePools' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/43"));
            }

            if (!hasSeenQueryLedgerStateStakePoolsResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateStakePoolsResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateStakePoolsResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/44"));
            }

            if (!hasSeenQueryLedgerStateTipValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateTip' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateTip' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/45"));
            }

            if (!hasSeenQueryLedgerStateTipResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateTipResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateTipResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/46"));
            }

            if (!hasSeenQueryLedgerStateTreasuryAndReservesValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateTreasuryAndReserves' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateTreasuryAndReserves' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/47"));
            }

            if (!hasSeenQueryLedgerStateTreasuryAndReservesResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateTreasuryAndReservesResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateTreasuryAndReservesResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/48"));
            }

            if (!hasSeenQueryLedgerStateUtxoValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateUtxo' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateUtxo' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/49"));
            }

            if (!hasSeenQueryLedgerStateUtxoResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryLedgerStateUtxoResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryLedgerStateUtxoResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/50"));
            }

            if (!hasSeenQueryNetworkBlockHeightValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryNetworkBlockHeight' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryNetworkBlockHeight' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/51"));
            }

            if (!hasSeenQueryNetworkBlockHeightResponseValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryNetworkBlockHeightResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryNetworkBlockHeightResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/52"));
            }

            if (!hasSeenQueryNetworkGenesisConfigurationValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryNetworkGenesisConfiguration' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryNetworkGenesisConfiguration' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/53"));
            }

            if (!hasSeenQueryNetworkGenesisConfigurationResponseValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryNetworkGenesisConfigurationResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryNetworkGenesisConfigurationResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/54"));
            }

            if (!hasSeenQueryNetworkStartTimeValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryNetworkStartTime' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryNetworkStartTime' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/55"));
            }

            if (!hasSeenQueryNetworkStartTimeResponseValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryNetworkStartTimeResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryNetworkStartTimeResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/56"));
            }

            if (!hasSeenQueryNetworkTipValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryNetworkTip' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryNetworkTip' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/57"));
            }

            if (!hasSeenQueryNetworkTipResponseValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'QueryNetworkTipResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'QueryNetworkTipResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/58"));
            }

            if (!hasSeenReleaseLedgerStateValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'ReleaseLedgerState' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'ReleaseLedgerState' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/59"));
            }

            if (!hasSeenReleaseLedgerStateResponseValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'ReleaseLedgerStateResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'ReleaseLedgerStateResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/68"));
            }

            if (!hasSeenReleaseMempoolValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'ReleaseMempool' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'ReleaseMempool' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/69"));
            }

            if (!hasSeenReleaseMempoolResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'ReleaseMempoolResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'ReleaseMempoolResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/70"));
            }

            if (!hasSeenRpcErrorValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'RpcError' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'RpcError' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/67"));
            }

            if (!hasSeenSizeAndCapacityResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation required - the required property 'SizeAndCapacityResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation required - the required property 'SizeAndCapacityResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/66"));
            }

            if (!hasSeenSizeOfMempoolValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'SizeOfMempool' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'SizeOfMempool' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/4"));
            }

            if (!hasSeenSubmitTransactionValue)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'SubmitTransaction' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'SubmitTransaction' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationReducedPathModifier(new("#/required/5"));
            }

            if (!hasSeenSubmitTransactionResponse)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation properties - the required property 'SubmitTransactionResponse' was not present.");
                }
                else
                {
                    return ValidationContext.InvalidContext;
                }
            }
            else if (level == ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation properties - the required property 'SubmitTransactionResponse' was present.");
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            return result;
        }
    }
}
