//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Generated;

/// <summary>
/// ogmios
/// </summary>
public readonly partial struct Ogmios
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct NextTransactionResponseEntity
    {
        /// <summary>
        /// NextTransactionResponse
        /// </summary>
        /// <remarks>
        /// <para>
        /// Response to a &#39;nextTransaction&#39; request.
        /// </para>
        /// </remarks>
        public readonly partial struct NextTransactionResponse
        {
            /// <summary>
            /// Generated from JSON Schema.
            /// </summary>
            /// <remarks>
            /// <para>
            /// A transaction (or id) or an empty object if there&#39;s no more transactions.
            /// </para>
            /// </remarks>
            public readonly partial struct RequiredTransaction
            {
                /// <summary>
                /// Generated from JSON Schema.
                /// </summary>
                public readonly partial struct TransactionEntity
                {
                    /// <inheritdoc/>
                    public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext;
                        if (level > ValidationLevel.Flag && !result.IsUsingResults)
                        {
                            result = result.UsingResults();
                        }

                        if (level > ValidationLevel.Basic)
                        {
                            if (!result.IsUsingStack)
                            {
                                result = result.UsingStack();
                            }

                            result = result.PushSchemaLocation("OgmiosDotnet/src/Ogmios.Schema/Ogmios/v6.11/Source/ogmios.json#/properties/NextTransactionResponse/oneOf/0/properties/result/properties/transaction");
                        }

                        result = CorvusValidation.CompositionAnyOfValidationHandler(this, result, level);

                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PopLocation();
                        }

                        return result;
                    }

                    /// <summary>
                    /// Validation constants for the type.
                    /// </summary>
                    public static partial class CorvusValidation
                    {
                        /// <summary>
                        /// Composition validation (any-of).
                        /// </summary>
                        /// <param name="value">The value to validate.</param>
                        /// <param name="validationContext">The current validation context.</param>
                        /// <param name="level">The current validation level.</param>
                        /// <returns>The resulting validation context after validation.</returns>
                        [MethodImpl(MethodImplOptions.AggressiveInlining)]
                        internal static ValidationContext CompositionAnyOfValidationHandler(
                            in TransactionEntity value,
                            in ValidationContext validationContext,
                            ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext;

                            bool anyOfFoundValid = false;

                            ValidationContext anyOfChildContext0 = validationContext.CreateChildContext();
                            if (level > ValidationLevel.Basic)
                            {
                                anyOfChildContext0 = anyOfChildContext0.PushValidationLocationReducedPathModifier(new("#/anyOf/0"));
                            }

                            ValidationContext anyOfResult0 = value.As<Generated.Ogmios.NextTransactionResponseEntity.NextTransactionResponse.RequiredTransaction.TransactionEntity.RequiredId>().Validate(anyOfChildContext0, level);

                            if (anyOfResult0.IsValid)
                            {
                                if (level == ValidationLevel.Flag)
                                {
                                    return result;
                                }
                                else
                                {
                                    result = result.MergeChildContext(anyOfResult0, level >= ValidationLevel.Verbose);
                                    anyOfFoundValid = true;
                                }
                            }
                            else
                            {
                                if (level >= ValidationLevel.Verbose)
                                {
                                    result = result.MergeResults(result.IsValid, level, anyOfResult0);
                                }
                            }

                            ValidationContext anyOfChildContext1 = validationContext.CreateChildContext();
                            if (level > ValidationLevel.Basic)
                            {
                                anyOfChildContext1 = anyOfChildContext1.PushValidationLocationReducedPathModifier(new("#/anyOf/1/$ref"));
                            }

                            ValidationContext anyOfResult1 = value.As<Generated.Transaction>().Validate(anyOfChildContext1, level);

                            if (anyOfResult1.IsValid)
                            {
                                if (level == ValidationLevel.Flag)
                                {
                                    return result;
                                }
                                else
                                {
                                    result = result.MergeChildContext(anyOfResult1, level >= ValidationLevel.Verbose);
                                    anyOfFoundValid = true;
                                }
                            }
                            else
                            {
                                if (level >= ValidationLevel.Verbose)
                                {
                                    result = result.MergeResults(result.IsValid, level, anyOfResult1);
                                }
                            }

                            ValidationContext anyOfChildContext2 = validationContext.CreateChildContext();
                            if (level > ValidationLevel.Basic)
                            {
                                anyOfChildContext2 = anyOfChildContext2.PushValidationLocationReducedPathModifier(new("#/anyOf/2"));
                            }

                            ValidationContext anyOfResult2 = value.As<Corvus.Json.JsonNull>().Validate(anyOfChildContext2, level);

                            if (anyOfResult2.IsValid)
                            {
                                if (level == ValidationLevel.Flag)
                                {
                                    return result;
                                }
                                else
                                {
                                    result = result.MergeChildContext(anyOfResult2, level >= ValidationLevel.Verbose);
                                    anyOfFoundValid = true;
                                }
                            }
                            else
                            {
                                if (level >= ValidationLevel.Verbose)
                                {
                                    result = result.MergeResults(result.IsValid, level, anyOfResult2);
                                }
                            }

                            if (anyOfFoundValid)
                            {
                                if (level >= ValidationLevel.Verbose)
                                {
                                    result = result.WithResult(isValid: true, "Validation anyOf - validated against the schema.", "anyOf");
                                }
                            }
                            else
                            {
                                if (level == ValidationLevel.Flag)
                                {
                                    result = result.WithResult(isValid: false);
                                }
                                else
                                {
                                    result = result.WithResult(isValid: false, "Validation anyOf - did not validate against the schema.", "anyOf");
                                }
                            }

                            return result;
                        }
                    }
                }
            }
        }
    }
}
