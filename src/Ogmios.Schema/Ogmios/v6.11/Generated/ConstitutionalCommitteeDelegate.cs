//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Buffers;
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Generated;
/// <summary>
/// ConstitutionalCommitteeDelegate
/// </summary>
[System.Text.Json.Serialization.JsonConverter(typeof(Corvus.Json.Internal.JsonValueConverter<ConstitutionalCommitteeDelegate>))]
public readonly partial struct ConstitutionalCommitteeDelegate
    : IJsonValue<Generated.ConstitutionalCommitteeDelegate>
{
    private readonly Backing backing;
    private readonly JsonElement jsonElementBacking;
    private readonly ImmutableList<JsonObjectProperty> objectBacking;

    /// <summary>
    /// Initializes a new instance of the <see cref="ConstitutionalCommitteeDelegate"/> struct.
    /// </summary>
    public ConstitutionalCommitteeDelegate()
    {
        this.jsonElementBacking = default;
        this.backing = Backing.JsonElement;
        this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConstitutionalCommitteeDelegate"/> struct.
    /// </summary>
    /// <param name="value">The value from which to construct the instance.</param>
    public ConstitutionalCommitteeDelegate(in JsonElement value)
    {
        this.jsonElementBacking = value;
        this.backing = Backing.JsonElement;
        this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConstitutionalCommitteeDelegate"/> struct.
    /// </summary>
    /// <param name="value">The value from which to construct the instance.</param>
    public ConstitutionalCommitteeDelegate(ImmutableList<JsonObjectProperty> value)
    {
        this.backing = Backing.Object;
        this.jsonElementBacking = default;
        this.objectBacking = value;
    }

    /// <summary>
    /// Gets the schema location from which this type was generated.
    /// </summary>
    public static string SchemaLocation { get; } = "OgmiosDotnet/src/Ogmios.Schema/Ogmios/v6.11/Source/cardano.json#/definitions/ConstitutionalCommitteeDelegate";

    /// <summary>
    /// Gets a Null instance.
    /// </summary>
    public static ConstitutionalCommitteeDelegate Null { get; } = new(JsonValueHelpers.NullElement);

    /// <summary>
    /// Gets an Undefined instance.
    /// </summary>
    public static ConstitutionalCommitteeDelegate Undefined { get; }

    /// <summary>
    /// Gets the default instance.
    /// </summary>
    public static ConstitutionalCommitteeDelegate DefaultInstance { get; }

    /// <inheritdoc/>
    public JsonAny AsAny
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return new(this.objectBacking);
            }

            if ((this.backing & Backing.Null) != 0)
            {
                return JsonAny.Null;
            }

            return JsonAny.Undefined;
        }
    }

    /// <inheritdoc/>
    public JsonElement AsJsonElement
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return JsonValueHelpers.ObjectToJsonElement(this.objectBacking);
            }

            if ((this.backing & Backing.Null) != 0)
            {
                return JsonValueHelpers.NullElement;
            }

            return default;
        }
    }

    /// <inheritdoc/>
    JsonString IJsonValue.AsString
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    JsonBoolean IJsonValue.AsBoolean
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    JsonNumber IJsonValue.AsNumber
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    public JsonObject AsObject
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return new(this.objectBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    JsonArray IJsonValue.AsArray
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus" />.
    /// </summary>
    public Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus AsRequiredFromAndIdAndStatus
    {
        get
        {
            return this.As<Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus" />.
    /// </summary>
    public bool IsRequiredFromAndIdAndStatus
    {
        get
        {
            return this.As<Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.ConstitutionalCommitteeDelegate.RequiredStatus" />.
    /// </summary>
    public Generated.ConstitutionalCommitteeDelegate.RequiredStatus AsRequiredStatus
    {
        get
        {
            return this.As<Generated.ConstitutionalCommitteeDelegate.RequiredStatus>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.ConstitutionalCommitteeDelegate.RequiredStatus" />.
    /// </summary>
    public bool IsRequiredStatus
    {
        get
        {
            return this.As<Generated.ConstitutionalCommitteeDelegate.RequiredStatus>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus" />.
    /// </summary>
    public Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus AsConstitutionalCommitteeDelegateRequiredStatus
    {
        get
        {
            return this.As<Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus" />.
    /// </summary>
    public bool IsConstitutionalCommitteeDelegateRequiredStatus
    {
        get
        {
            return this.As<Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus>().IsValid();
        }
    }

    /// <inheritdoc/>
    public bool HasJsonElementBacking
    {
        get
        {
            return (this.backing & Backing.JsonElement) != 0;
        }
    }

    /// <inheritdoc/>
    public bool HasDotnetBacking
    {
        get
        {
            return (this.backing & Backing.Dotnet) != 0;
        }
    }

    /// <inheritdoc/>
    public JsonValueKind ValueKind
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking.ValueKind;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return JsonValueKind.Object;
            }

            return JsonValueKind.Undefined;
        }
    }

    /// <summary>
    /// Conversion from JsonAny.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator ConstitutionalCommitteeDelegate(JsonAny value)
    {
        return value.As<ConstitutionalCommitteeDelegate>();
    }

    /// <summary>
    /// Conversion to JsonAny.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator JsonAny(ConstitutionalCommitteeDelegate value)
    {
        return value.AsAny;
    }

    /// <summary>
    /// Conversion to <see cref="Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus(ConstitutionalCommitteeDelegate value)
    {
        return value.As<Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator ConstitutionalCommitteeDelegate(Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus value)
    {
        return value.As<ConstitutionalCommitteeDelegate>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.ConstitutionalCommitteeDelegate.RequiredStatus"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.ConstitutionalCommitteeDelegate.RequiredStatus(ConstitutionalCommitteeDelegate value)
    {
        return value.As<Generated.ConstitutionalCommitteeDelegate.RequiredStatus>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.ConstitutionalCommitteeDelegate.RequiredStatus"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator ConstitutionalCommitteeDelegate(Generated.ConstitutionalCommitteeDelegate.RequiredStatus value)
    {
        return value.As<ConstitutionalCommitteeDelegate>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus(ConstitutionalCommitteeDelegate value)
    {
        return value.As<Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator ConstitutionalCommitteeDelegate(Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus value)
    {
        return value.As<ConstitutionalCommitteeDelegate>();
    }

    /// <summary>
    /// Operator ==.
    /// </summary>
    /// <param name="left">The lhs of the operator.</param>
    /// <param name="right">The rhs of the operator.</param>
    /// <returns>
    /// <c>True</c> if the values are equal.
    /// </returns>
    public static bool operator ==(in ConstitutionalCommitteeDelegate left, in ConstitutionalCommitteeDelegate right)
    {
        return left.Equals(right);
    }

    /// <summary>
    /// Operator !=.
    /// </summary>
    /// <param name="left">The lhs of the operator.</param>
    /// <param name="right">The rhs of the operator.</param>
    /// <returns>
    /// <c>True</c> if the values are not equal.
    /// </returns>
    public static bool operator !=(in ConstitutionalCommitteeDelegate left, in ConstitutionalCommitteeDelegate right)
    {
        return !left.Equals(right);
    }

    /// <summary>
    /// Gets an instance of the JSON value from a <see cref="JsonElement"/> value.
    /// </summary>
    /// <param name="value">The <see cref="JsonElement"/> value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the <see cref="JsonElement"/>.</returns>
    /// <remarks>The returned value will have a <see cref = "IJsonValue.ValueKind"/> of <see cref = "JsonValueKind.Undefined"/> if the
    /// value cannot be constructed from the given instance (e.g. because they have an incompatible .NET backing type).
    /// </remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ConstitutionalCommitteeDelegate FromJson(in JsonElement value)
    {
        return new(value);
    }

    /// <summary>
    /// Gets an instance of the JSON value from a <see cref="JsonAny"/> value.
    /// </summary>
    /// <param name="value">The <see cref="JsonAny"/> value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the <see cref="JsonAny"/> value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ConstitutionalCommitteeDelegate FromAny(in JsonAny value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsObject.AsPropertyBacking()),
            JsonValueKind.Null => Null,
            _ => Undefined,
        };
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static ConstitutionalCommitteeDelegate IJsonValue<ConstitutionalCommitteeDelegate>.FromBoolean<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static ConstitutionalCommitteeDelegate IJsonValue<ConstitutionalCommitteeDelegate>.FromString<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static ConstitutionalCommitteeDelegate IJsonValue<ConstitutionalCommitteeDelegate>.FromNumber<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ConstitutionalCommitteeDelegate FromObject<TValue>(in TValue value)
        where TValue : struct, IJsonObject<TValue>
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            JsonValueKind.Null => Null,
            _ => Undefined,
        };
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static ConstitutionalCommitteeDelegate IJsonValue<ConstitutionalCommitteeDelegate>.FromArray<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

    /// <summary>
    /// Parses the ConstitutionalCommitteeDelegate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static ConstitutionalCommitteeDelegate Parse(string source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the ConstitutionalCommitteeDelegate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static ConstitutionalCommitteeDelegate Parse(Stream source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the ConstitutionalCommitteeDelegate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static ConstitutionalCommitteeDelegate Parse(ReadOnlyMemory<byte> source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the ConstitutionalCommitteeDelegate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static ConstitutionalCommitteeDelegate Parse(ReadOnlyMemory<char> source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the ConstitutionalCommitteeDelegate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static ConstitutionalCommitteeDelegate Parse(ReadOnlySequence<byte> source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the ConstitutionalCommitteeDelegate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static ConstitutionalCommitteeDelegate ParseValue(string source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<ConstitutionalCommitteeDelegate>.ParseValue(source);
#else
        return JsonValueHelpers.ParseValue<ConstitutionalCommitteeDelegate>(source.AsSpan());
#endif
    }

    /// <summary>
    /// Parses the ConstitutionalCommitteeDelegate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static ConstitutionalCommitteeDelegate ParseValue(ReadOnlySpan<char> source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<ConstitutionalCommitteeDelegate>.ParseValue(source);
#else
        return JsonValueHelpers.ParseValue<ConstitutionalCommitteeDelegate>(source);
#endif
    }

    /// <summary>
    /// Parses the ConstitutionalCommitteeDelegate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static ConstitutionalCommitteeDelegate ParseValue(ReadOnlySpan<byte> source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<ConstitutionalCommitteeDelegate>.ParseValue(source);
#else
        return JsonValueHelpers.ParseValue<ConstitutionalCommitteeDelegate>(source);
#endif
    }

    /// <summary>
    /// Parses the ConstitutionalCommitteeDelegate.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static ConstitutionalCommitteeDelegate ParseValue(ref Utf8JsonReader source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<ConstitutionalCommitteeDelegate>.ParseValue(ref source);
#else
        return JsonValueHelpers.ParseValue<ConstitutionalCommitteeDelegate>(ref source);
#endif
    }

    /// <summary>
    /// Gets the value as an instance of the target value.
    /// </summary>
    /// <typeparam name="TTarget">The type of the target.</typeparam>
    /// <returns>An instance of the target type.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public TTarget As<TTarget>()
        where TTarget : struct, IJsonValue<TTarget>
    {
#if NET8_0_OR_GREATER
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return TTarget.FromJson(this.jsonElementBacking);
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return TTarget.FromObject(this.AsObject);
        }

        if ((this.backing & Backing.Null) != 0)
        {
            return TTarget.Null;
        }

        return TTarget.Undefined;
#else
        return this.As<ConstitutionalCommitteeDelegate, TTarget>();
#endif
    }

    /// <inheritdoc/>
    public override bool Equals(object? obj)
    {
        return
            (obj is IJsonValue jv && this.Equals(jv.As<ConstitutionalCommitteeDelegate>())) ||
            (obj is null && this.IsNull());
    }

    /// <inheritdoc/>
    public bool Equals<T>(in T other)
        where T : struct, IJsonValue<T>
    {
        return this.Equals(other.As<ConstitutionalCommitteeDelegate>());
    }

    /// <summary>
    /// Equality comparison.
    /// </summary>
    /// <param name="other">The other item with which to compare.</param>
    /// <returns><see langword="true"/> if the values were equal.</returns>
    public bool Equals(in ConstitutionalCommitteeDelegate other)
    {
        JsonValueKind thisKind = this.ValueKind;
        JsonValueKind otherKind = other.ValueKind;
        if (thisKind != otherKind)
        {
            return false;
        }

        if (thisKind == JsonValueKind.Null || thisKind == JsonValueKind.Undefined)
        {
            return true;
        }

        if (thisKind == JsonValueKind.Object)
        {
            JsonObject thisObject = this.AsObject;
            JsonObject otherObject = other.AsObject;
            int count = 0;
            foreach (JsonObjectProperty property in thisObject.EnumerateObject())
            {
                if (!otherObject.TryGetProperty(property.Name, out JsonAny value) || !property.Value.Equals(value))
                {
                    return false;
                }

                count++;
            }

            int otherCount = 0;
            foreach (JsonObjectProperty otherProperty in otherObject.EnumerateObject())
            {
                otherCount++;
                if (otherCount > count)
                {
                    return false;
                }
            }

            return count == otherCount;
        }

        return false;
    }

    /// <inheritdoc/>
    public void WriteTo(Utf8JsonWriter writer)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
            }

            return;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            JsonValueHelpers.WriteProperties(this.objectBacking, writer);

            return;
        }

        if ((this.backing & Backing.Null) != 0)
        {
            writer.WriteNullValue();

            return;
        }
    }

    /// <inheritdoc/>
    public override int GetHashCode()
    {
        return this.ValueKind switch
        {
            JsonValueKind.Array => JsonValueHelpers.GetArrayHashCode(((IJsonValue)this).AsArray),
            JsonValueKind.Object => JsonValueHelpers.GetObjectHashCode(this),
            JsonValueKind.Number => JsonValueHelpers.GetHashCodeForNumber(((IJsonValue)this).AsNumber),
            JsonValueKind.String => JsonValueHelpers.GetHashCodeForString(((IJsonValue)this).AsString),
            JsonValueKind.True => true.GetHashCode(),
            JsonValueKind.False => false.GetHashCode(),
            JsonValueKind.Null => JsonValueHelpers.NullHashCode,
            _ => JsonValueHelpers.UndefinedHashCode,
        };
    }

    /// <inheritdoc/>
    public override string ToString()
    {
        return this.Serialize();
    }

    /// <summary>
    /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <typeparam name="TIn">The immutable context to pass in to the match function.</typeparam>
    /// <typeparam name="TOut">The result of calling the match function.</typeparam>
    /// <param name="context">The context to pass to the match function.</param>
    /// <param name="matchRequiredFromAndIdAndStatus">Match a <see cref="Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus"/>.</param>
    /// <param name="matchRequiredStatus">Match a <see cref="Generated.ConstitutionalCommitteeDelegate.RequiredStatus"/>.</param>
    /// <param name="matchConstitutionalCommitteeDelegateRequiredStatus">Match a <see cref="Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus"/>.</param>
    /// <param name="defaultMatch">Match any other value.</param>
    /// <returns>An instance of the value returned by the match function.</returns>
    public TOut Match<TIn, TOut>(
        in TIn context,
        Matcher<Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus, TIn, TOut> matchRequiredFromAndIdAndStatus,
        Matcher<Generated.ConstitutionalCommitteeDelegate.RequiredStatus, TIn, TOut> matchRequiredStatus,
        Matcher<Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus, TIn, TOut> matchConstitutionalCommitteeDelegateRequiredStatus,
        Matcher<Generated.ConstitutionalCommitteeDelegate, TIn, TOut> defaultMatch)
    {
        Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus matchRequiredFromAndIdAndStatusValue = this.As<Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus>();
        if (matchRequiredFromAndIdAndStatusValue.IsValid())
        {
            return matchRequiredFromAndIdAndStatus(matchRequiredFromAndIdAndStatusValue, context);
        }

        Generated.ConstitutionalCommitteeDelegate.RequiredStatus matchRequiredStatusValue = this.As<Generated.ConstitutionalCommitteeDelegate.RequiredStatus>();
        if (matchRequiredStatusValue.IsValid())
        {
            return matchRequiredStatus(matchRequiredStatusValue, context);
        }

        Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus matchConstitutionalCommitteeDelegateRequiredStatusValue = this.As<Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus>();
        if (matchConstitutionalCommitteeDelegateRequiredStatusValue.IsValid())
        {
            return matchConstitutionalCommitteeDelegateRequiredStatus(matchConstitutionalCommitteeDelegateRequiredStatusValue, context);
        }

        return defaultMatch(this, context);
    }

    /// <summary>
    /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <typeparam name="TOut">The result of calling the match function.</typeparam>
    /// <param name="matchRequiredFromAndIdAndStatus">Match a <see cref="Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus"/>.</param>
    /// <param name="matchRequiredStatus">Match a <see cref="Generated.ConstitutionalCommitteeDelegate.RequiredStatus"/>.</param>
    /// <param name="matchConstitutionalCommitteeDelegateRequiredStatus">Match a <see cref="Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus"/>.</param>
    /// <param name="defaultMatch">Match any other value.</param>
    /// <returns>An instance of the value returned by the match function.</returns>
    public TOut Match<TOut>(
        Matcher<Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus, TOut> matchRequiredFromAndIdAndStatus,
        Matcher<Generated.ConstitutionalCommitteeDelegate.RequiredStatus, TOut> matchRequiredStatus,
        Matcher<Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus, TOut> matchConstitutionalCommitteeDelegateRequiredStatus,
        Matcher<Generated.ConstitutionalCommitteeDelegate, TOut> defaultMatch)
    {
        Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus matchRequiredFromAndIdAndStatusValue = this.As<Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus>();
        if (matchRequiredFromAndIdAndStatusValue.IsValid())
        {
            return matchRequiredFromAndIdAndStatus(matchRequiredFromAndIdAndStatusValue);
        }

        Generated.ConstitutionalCommitteeDelegate.RequiredStatus matchRequiredStatusValue = this.As<Generated.ConstitutionalCommitteeDelegate.RequiredStatus>();
        if (matchRequiredStatusValue.IsValid())
        {
            return matchRequiredStatus(matchRequiredStatusValue);
        }

        Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus matchConstitutionalCommitteeDelegateRequiredStatusValue = this.As<Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus>();
        if (matchConstitutionalCommitteeDelegateRequiredStatusValue.IsValid())
        {
            return matchConstitutionalCommitteeDelegateRequiredStatus(matchConstitutionalCommitteeDelegateRequiredStatusValue);
        }

        return defaultMatch(this);
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsRequiredFromAndIdAndStatus(out Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus result)
    {
        result = this.As<Generated.ConstitutionalCommitteeDelegate.RequiredFromAndIdAndStatus>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.ConstitutionalCommitteeDelegate.RequiredStatus" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsRequiredStatus(out Generated.ConstitutionalCommitteeDelegate.RequiredStatus result)
    {
        result = this.As<Generated.ConstitutionalCommitteeDelegate.RequiredStatus>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsConstitutionalCommitteeDelegateRequiredStatus(out Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus result)
    {
        result = this.As<Generated.ConstitutionalCommitteeDelegate.ConstitutionalCommitteeDelegateRequiredStatus>();
        return result.IsValid();
    }
}
