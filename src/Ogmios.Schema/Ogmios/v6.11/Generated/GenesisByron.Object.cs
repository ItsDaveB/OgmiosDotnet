//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Generated;
/// <summary>
/// Genesis&lt;Byron&gt;
/// </summary>
/// <remarks>
/// <para>
/// A Byron genesis configuration, with information used to bootstrap the era. Some parameters are also updatable across the era.
/// </para>
/// </remarks>
public readonly partial struct GenesisByron
    : IJsonObject<Generated.GenesisByron>
{
    /// <summary>
    /// Conversion from <see cref="ImmutableList{JsonObjectProperty}"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator GenesisByron(ImmutableList<JsonObjectProperty> value)
    {
        return new(value);
    }

    /// <summary>
    /// Conversion to <see cref="ImmutableList{JsonObjectProperty}"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator ImmutableList<JsonObjectProperty>(GenesisByron value)
    {
        return
            __CorvusObjectHelpers.GetPropertyBacking(value);
    }

    /// <summary>
    /// Conversion from JsonObject.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator GenesisByron(JsonObject value)
    {
        if (value.HasDotnetBacking && value.ValueKind == JsonValueKind.Object)
        {
            return new(
                __CorvusObjectHelpers.GetPropertyBacking(value));
        }

        return new(value.AsJsonElement);
    }

    /// <summary>
    /// Conversion to JsonObject.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator JsonObject(GenesisByron value)
    {
        return
            value.AsObject;
    }

    /// <inheritdoc/>
    public Corvus.Json.JsonAny this[in JsonPropertyName name]
    {
        get
        {
            if (this.TryGetProperty(name, out Corvus.Json.JsonAny result))
            {
                return result;
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the number of properties in the object.
    /// </summary>
    public int Count
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking.GetPropertyCount();
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return this.objectBacking.Count;
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the <c>era</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.GenesisByron.EraEntity Era
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.EraUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Era, out JsonAny result))
                {
                    return result.As<Generated.GenesisByron.EraEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>genesisDelegations</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.GenesisByron.GenesisDelegationsEntity GenesisDelegations
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.GenesisDelegationsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.GenesisDelegations, out JsonAny result))
                {
                    return result.As<Generated.GenesisByron.GenesisDelegationsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>genesisKeyHashes</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.GenesisByron.DigestBlake2b224Array GenesisKeyHashes
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.GenesisKeyHashesUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.GenesisKeyHashes, out JsonAny result))
                {
                    return result.As<Generated.GenesisByron.DigestBlake2b224Array>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>initialFunds</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.GenesisByron.InitialFundsEntity InitialFunds
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.InitialFundsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.InitialFunds, out JsonAny result))
                {
                    return result.As<Generated.GenesisByron.InitialFundsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>initialVouchers</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.GenesisByron.InitialVouchersEntity InitialVouchers
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.InitialVouchersUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.InitialVouchers, out JsonAny result))
                {
                    return result.As<Generated.GenesisByron.InitialVouchersEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>networkMagic</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// <para>
    /// A magic number for telling networks apart. (e.g. 764824073)
    /// </para>
    /// </remarks>
    public Generated.NetworkMagic NetworkMagic
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NetworkMagicUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.NetworkMagic, out JsonAny result))
                {
                    return result.As<Generated.NetworkMagic>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>protocolParameters</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>, but may be <see cref="JsonValueKind.Null"/>.
    /// </para>
    /// </remarks>
    public Corvus.Json.JsonAny ProtocolParameters
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ProtocolParametersUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ProtocolParameters, out JsonAny result))
                {
                    return result;
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>securityParameter</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.UInt64 SecurityParameter
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.SecurityParameterUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.SecurityParameter, out JsonAny result))
                {
                    return result.As<Generated.UInt64>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>startTime</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.UtcTime StartTime
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.StartTimeUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.StartTime, out JsonAny result))
                {
                    return result.As<Generated.UtcTime>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>updatableParameters</c> property.
    /// </summary>
    public Generated.ProtocolParameters UpdatableParameters
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.UpdatableParametersUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.UpdatableParameters, out JsonAny result))
                {
                    return result.As<Generated.ProtocolParameters>();
                }
            }

            return default;
        }
    }

    /// <inheritdoc/>
    public static GenesisByron FromProperties(IDictionary<JsonPropertyName, JsonAny> source)
    {
        return new(source.Select(kvp => new JsonObjectProperty(kvp.Key, kvp.Value)).ToImmutableList());
    }

    /// <inheritdoc/>
    public static GenesisByron FromProperties(params (JsonPropertyName Name, JsonAny Value)[] source)
    {
        return new(source.Select(s => new JsonObjectProperty(s.Name, s.Value.AsAny)).ToImmutableList());
    }

    /// <summary>
    /// Creates an instance of the type from the given immutable list of properties.
    /// </summary>
    /// <param name="source">The list of properties.</param>
    /// <returns>An instance of the type initialized from the list of properties.</returns>
    public static GenesisByron FromProperties(ImmutableList<JsonObjectProperty> source)
    {
        return new(source);
    }

    /// <summary>
    /// Creates an instance of a <see cref="GenesisByron"/>.
    /// </summary>
    public static GenesisByron Create(
        in Generated.GenesisByron.EraEntity era,
        in Generated.GenesisByron.GenesisDelegationsEntity genesisDelegations,
        in Generated.GenesisByron.DigestBlake2b224Array genesisKeyHashes,
        in Generated.GenesisByron.InitialFundsEntity initialFunds,
        in Generated.GenesisByron.InitialVouchersEntity initialVouchers,
        in Generated.NetworkMagic networkMagic,
        in Corvus.Json.JsonAny protocolParameters,
        in Generated.UInt64 securityParameter,
        in Generated.UtcTime startTime,
        in Generated.ProtocolParameters? updatableParameters = null)
    {
        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
        builder.Add(JsonPropertyNames.Era, era.AsAny);
        builder.Add(JsonPropertyNames.GenesisDelegations, genesisDelegations.AsAny);
        builder.Add(JsonPropertyNames.GenesisKeyHashes, genesisKeyHashes.AsAny);
        builder.Add(JsonPropertyNames.InitialFunds, initialFunds.AsAny);
        builder.Add(JsonPropertyNames.InitialVouchers, initialVouchers.AsAny);
        builder.Add(JsonPropertyNames.NetworkMagic, networkMagic.AsAny);
        builder.Add(JsonPropertyNames.ProtocolParameters, protocolParameters.AsAny);
        builder.Add(JsonPropertyNames.SecurityParameter, securityParameter.AsAny);
        builder.Add(JsonPropertyNames.StartTime, startTime.AsAny);

        if (updatableParameters is not null)
        {
            builder.Add(JsonPropertyNames.UpdatableParameters, updatableParameters.Value.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <inheritdoc/>
    public ImmutableList<JsonObjectProperty> AsPropertyBacking()
    {
        return __CorvusObjectHelpers.GetPropertyBacking(this);
    }
    /// <inheritdoc/>
    public ImmutableList<JsonObjectProperty>.Builder AsPropertyBackingBuilder()
    {
        return __CorvusObjectHelpers.GetPropertyBacking(this).ToBuilder();
    }

    /// <inheritdoc/>
    public JsonObjectEnumerator EnumerateObject()
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return new(this.jsonElementBacking);
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return new(this.objectBacking);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc/>
    public bool HasProperties()
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.Count > 0;
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            using JsonElement.ObjectEnumerator enumerator = this.jsonElementBacking.EnumerateObject();
            return enumerator.MoveNext();
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(in JsonPropertyName name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return name.TryGetProperty(this.jsonElementBacking, out JsonElement _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(string name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(ReadOnlySpan<char> name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(ReadOnlySpan<byte> name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Sets the <c>era</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public GenesisByron WithEra(in Generated.GenesisByron.EraEntity value)
    {
        return this.SetProperty(JsonPropertyNames.Era, value);
    }

    /// <summary>
    /// Sets the <c>genesisDelegations</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public GenesisByron WithGenesisDelegations(in Generated.GenesisByron.GenesisDelegationsEntity value)
    {
        return this.SetProperty(JsonPropertyNames.GenesisDelegations, value);
    }

    /// <summary>
    /// Sets the <c>genesisKeyHashes</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public GenesisByron WithGenesisKeyHashes(in Generated.GenesisByron.DigestBlake2b224Array value)
    {
        return this.SetProperty(JsonPropertyNames.GenesisKeyHashes, value);
    }

    /// <summary>
    /// Sets the <c>initialFunds</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public GenesisByron WithInitialFunds(in Generated.GenesisByron.InitialFundsEntity value)
    {
        return this.SetProperty(JsonPropertyNames.InitialFunds, value);
    }

    /// <summary>
    /// Sets the <c>initialVouchers</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public GenesisByron WithInitialVouchers(in Generated.GenesisByron.InitialVouchersEntity value)
    {
        return this.SetProperty(JsonPropertyNames.InitialVouchers, value);
    }

    /// <summary>
    /// Sets the <c>networkMagic</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    /// <remarks>
    /// <para>
    /// A magic number for telling networks apart. (e.g. 764824073)
    /// </para>
    /// </remarks>
    public GenesisByron WithNetworkMagic(in Generated.NetworkMagic value)
    {
        return this.SetProperty(JsonPropertyNames.NetworkMagic, value);
    }

    /// <summary>
    /// Sets the <c>protocolParameters</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public GenesisByron WithProtocolParameters(in Corvus.Json.JsonAny value)
    {
        return this.SetProperty(JsonPropertyNames.ProtocolParameters, value);
    }

    /// <summary>
    /// Sets the <c>securityParameter</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public GenesisByron WithSecurityParameter(in Generated.UInt64 value)
    {
        return this.SetProperty(JsonPropertyNames.SecurityParameter, value);
    }

    /// <summary>
    /// Sets the <c>startTime</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public GenesisByron WithStartTime(in Generated.UtcTime value)
    {
        return this.SetProperty(JsonPropertyNames.StartTime, value);
    }

    /// <summary>
    /// Sets the (optional) <c>updatableParameters</c> property.
    /// </summary>
    /// <param name="value">The new property value</param>
    /// <returns>The instance with the property set.</returns>
    public GenesisByron WithUpdatableParameters(in Generated.ProtocolParameters value)
    {
        return this.SetProperty(JsonPropertyNames.UpdatableParameters, value);
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(in JsonPropertyName name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(string name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(ReadOnlySpan<byte> name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(in JsonPropertyName name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(string name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(ReadOnlySpan<char> name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(ReadOnlySpan<byte> name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public GenesisByron SetProperty<TValue>(in JsonPropertyName name, TValue value)
        where TValue : struct, IJsonValue
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWith(this, name, value.AsAny));
    }

    /// <inheritdoc />
    public GenesisByron RemoveProperty(in JsonPropertyName name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public GenesisByron RemoveProperty(string name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public GenesisByron RemoveProperty(ReadOnlySpan<char> name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public GenesisByron RemoveProperty(ReadOnlySpan<byte> name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <summary>
    /// Provides UTF8 and string versions of the JSON property names on the object.
    /// </summary>
    public static class JsonPropertyNames
    {
        /// <summary>
        /// Gets the JSON property name for <see cref="Era"/>.
        /// </summary>
        public const string Era = "era";

        /// <summary>
        /// Gets the JSON property name for <see cref="GenesisDelegations"/>.
        /// </summary>
        public const string GenesisDelegations = "genesisDelegations";

        /// <summary>
        /// Gets the JSON property name for <see cref="GenesisKeyHashes"/>.
        /// </summary>
        public const string GenesisKeyHashes = "genesisKeyHashes";

        /// <summary>
        /// Gets the JSON property name for <see cref="InitialFunds"/>.
        /// </summary>
        public const string InitialFunds = "initialFunds";

        /// <summary>
        /// Gets the JSON property name for <see cref="InitialVouchers"/>.
        /// </summary>
        public const string InitialVouchers = "initialVouchers";

        /// <summary>
        /// Gets the JSON property name for <see cref="NetworkMagic"/>.
        /// </summary>
        public const string NetworkMagic = "networkMagic";

        /// <summary>
        /// Gets the JSON property name for <see cref="ProtocolParameters"/>.
        /// </summary>
        public const string ProtocolParameters = "protocolParameters";

        /// <summary>
        /// Gets the JSON property name for <see cref="SecurityParameter"/>.
        /// </summary>
        public const string SecurityParameter = "securityParameter";

        /// <summary>
        /// Gets the JSON property name for <see cref="StartTime"/>.
        /// </summary>
        public const string StartTime = "startTime";

        /// <summary>
        /// Gets the JSON property name for <see cref="UpdatableParameters"/>.
        /// </summary>
        public const string UpdatableParameters = "updatableParameters";

        /// <summary>
        /// Gets the JSON property name for <see cref="Era"/>.
        /// </summary>
        public static ReadOnlySpan<byte> EraUtf8 => "era"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="GenesisDelegations"/>.
        /// </summary>
        public static ReadOnlySpan<byte> GenesisDelegationsUtf8 => "genesisDelegations"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="GenesisKeyHashes"/>.
        /// </summary>
        public static ReadOnlySpan<byte> GenesisKeyHashesUtf8 => "genesisKeyHashes"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="InitialFunds"/>.
        /// </summary>
        public static ReadOnlySpan<byte> InitialFundsUtf8 => "initialFunds"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="InitialVouchers"/>.
        /// </summary>
        public static ReadOnlySpan<byte> InitialVouchersUtf8 => "initialVouchers"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="NetworkMagic"/>.
        /// </summary>
        public static ReadOnlySpan<byte> NetworkMagicUtf8 => "networkMagic"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="ProtocolParameters"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ProtocolParametersUtf8 => "protocolParameters"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="SecurityParameter"/>.
        /// </summary>
        public static ReadOnlySpan<byte> SecurityParameterUtf8 => "securityParameter"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="StartTime"/>.
        /// </summary>
        public static ReadOnlySpan<byte> StartTimeUtf8 => "startTime"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="UpdatableParameters"/>.
        /// </summary>
        public static ReadOnlySpan<byte> UpdatableParametersUtf8 => "updatableParameters"u8;
    }

    private static class __CorvusObjectHelpers
    {
        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonAny"/> built from the object.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBacking(in GenesisByron that)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking;
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilder(that.jsonElementBacking).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in GenesisByron that, in JsonPropertyName name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in GenesisByron that, ReadOnlySpan<char> name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in GenesisByron that, ReadOnlySpan<byte> name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in GenesisByron that, string name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, with the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWith(in GenesisByron that, in JsonPropertyName name, in JsonAny value)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.SetItem(name, value);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderReplacing(that.jsonElementBacking, name, value).ToImmutable();
            }

            throw new InvalidOperationException();
        }
    }
}
