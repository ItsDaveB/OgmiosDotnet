//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Buffers;
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Generated;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
[System.Text.Json.Serialization.JsonConverter(typeof(Corvus.Json.Internal.JsonValueConverter<GovernanceAction>))]
public readonly partial struct GovernanceAction
    : IJsonValue<Generated.GovernanceAction>
{
    private readonly Backing backing;
    private readonly JsonElement jsonElementBacking;
    private readonly ImmutableList<JsonObjectProperty> objectBacking;

    /// <summary>
    /// Initializes a new instance of the <see cref="GovernanceAction"/> struct.
    /// </summary>
    public GovernanceAction()
    {
        this.jsonElementBacking = default;
        this.backing = Backing.JsonElement;
        this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="GovernanceAction"/> struct.
    /// </summary>
    /// <param name="value">The value from which to construct the instance.</param>
    public GovernanceAction(in JsonElement value)
    {
        this.jsonElementBacking = value;
        this.backing = Backing.JsonElement;
        this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="GovernanceAction"/> struct.
    /// </summary>
    /// <param name="value">The value from which to construct the instance.</param>
    public GovernanceAction(ImmutableList<JsonObjectProperty> value)
    {
        this.backing = Backing.Object;
        this.jsonElementBacking = default;
        this.objectBacking = value;
    }

    /// <summary>
    /// Gets the schema location from which this type was generated.
    /// </summary>
    public static string SchemaLocation { get; } = "OgmiosDotnet/src/Ogmios.Schema/Ogmios/v6.11/Source/cardano.json#/definitions/GovernanceAction";

    /// <summary>
    /// Gets a Null instance.
    /// </summary>
    public static GovernanceAction Null { get; } = new(JsonValueHelpers.NullElement);

    /// <summary>
    /// Gets an Undefined instance.
    /// </summary>
    public static GovernanceAction Undefined { get; }

    /// <summary>
    /// Gets the default instance.
    /// </summary>
    public static GovernanceAction DefaultInstance { get; }

    /// <inheritdoc/>
    public JsonAny AsAny
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return new(this.objectBacking);
            }

            if ((this.backing & Backing.Null) != 0)
            {
                return JsonAny.Null;
            }

            return JsonAny.Undefined;
        }
    }

    /// <inheritdoc/>
    public JsonElement AsJsonElement
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return JsonValueHelpers.ObjectToJsonElement(this.objectBacking);
            }

            if ((this.backing & Backing.Null) != 0)
            {
                return JsonValueHelpers.NullElement;
            }

            return default;
        }
    }

    /// <inheritdoc/>
    JsonString IJsonValue.AsString
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    JsonBoolean IJsonValue.AsBoolean
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    JsonNumber IJsonValue.AsNumber
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    public JsonObject AsObject
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return new(this.objectBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    JsonArray IJsonValue.AsArray
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate" />.
    /// </summary>
    public Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate AsGovernanceActionProtocolParametersUpdate
    {
        get
        {
            return this.As<Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate" />.
    /// </summary>
    public bool IsGovernanceActionProtocolParametersUpdate
    {
        get
        {
            return this.As<Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.GovernanceAction.GovernanceActionHardForkInitiation" />.
    /// </summary>
    public Generated.GovernanceAction.GovernanceActionHardForkInitiation AsGovernanceActionHardForkInitiation
    {
        get
        {
            return this.As<Generated.GovernanceAction.GovernanceActionHardForkInitiation>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.GovernanceAction.GovernanceActionHardForkInitiation" />.
    /// </summary>
    public bool IsGovernanceActionHardForkInitiation
    {
        get
        {
            return this.As<Generated.GovernanceAction.GovernanceActionHardForkInitiation>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.GovernanceAction.GovernanceActionTreasuryTransfer" />.
    /// </summary>
    public Generated.GovernanceAction.GovernanceActionTreasuryTransfer AsGovernanceActionTreasuryTransfer
    {
        get
        {
            return this.As<Generated.GovernanceAction.GovernanceActionTreasuryTransfer>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.GovernanceAction.GovernanceActionTreasuryTransfer" />.
    /// </summary>
    public bool IsGovernanceActionTreasuryTransfer
    {
        get
        {
            return this.As<Generated.GovernanceAction.GovernanceActionTreasuryTransfer>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals" />.
    /// </summary>
    public Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals AsGovernanceActionTreasuryWithdrawals
    {
        get
        {
            return this.As<Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals" />.
    /// </summary>
    public bool IsGovernanceActionTreasuryWithdrawals
    {
        get
        {
            return this.As<Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.GovernanceAction.GovernanceActionConstitutionalCommittee" />.
    /// </summary>
    public Generated.GovernanceAction.GovernanceActionConstitutionalCommittee AsGovernanceActionConstitutionalCommittee
    {
        get
        {
            return this.As<Generated.GovernanceAction.GovernanceActionConstitutionalCommittee>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.GovernanceAction.GovernanceActionConstitutionalCommittee" />.
    /// </summary>
    public bool IsGovernanceActionConstitutionalCommittee
    {
        get
        {
            return this.As<Generated.GovernanceAction.GovernanceActionConstitutionalCommittee>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.GovernanceAction.GovernanceActionConstitution" />.
    /// </summary>
    public Generated.GovernanceAction.GovernanceActionConstitution AsGovernanceActionConstitution
    {
        get
        {
            return this.As<Generated.GovernanceAction.GovernanceActionConstitution>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.GovernanceAction.GovernanceActionConstitution" />.
    /// </summary>
    public bool IsGovernanceActionConstitution
    {
        get
        {
            return this.As<Generated.GovernanceAction.GovernanceActionConstitution>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.GovernanceAction.GovernanceActionNoConfidence" />.
    /// </summary>
    public Generated.GovernanceAction.GovernanceActionNoConfidence AsGovernanceActionNoConfidence
    {
        get
        {
            return this.As<Generated.GovernanceAction.GovernanceActionNoConfidence>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.GovernanceAction.GovernanceActionNoConfidence" />.
    /// </summary>
    public bool IsGovernanceActionNoConfidence
    {
        get
        {
            return this.As<Generated.GovernanceAction.GovernanceActionNoConfidence>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Generated.GovernanceAction.GovernanceActionInformation" />.
    /// </summary>
    public Generated.GovernanceAction.GovernanceActionInformation AsGovernanceActionInformation
    {
        get
        {
            return this.As<Generated.GovernanceAction.GovernanceActionInformation>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Generated.GovernanceAction.GovernanceActionInformation" />.
    /// </summary>
    public bool IsGovernanceActionInformation
    {
        get
        {
            return this.As<Generated.GovernanceAction.GovernanceActionInformation>().IsValid();
        }
    }

    /// <inheritdoc/>
    public bool HasJsonElementBacking
    {
        get
        {
            return (this.backing & Backing.JsonElement) != 0;
        }
    }

    /// <inheritdoc/>
    public bool HasDotnetBacking
    {
        get
        {
            return (this.backing & Backing.Dotnet) != 0;
        }
    }

    /// <inheritdoc/>
    public JsonValueKind ValueKind
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking.ValueKind;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return JsonValueKind.Object;
            }

            return JsonValueKind.Undefined;
        }
    }

    /// <summary>
    /// Conversion from JsonAny.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator GovernanceAction(JsonAny value)
    {
        return value.As<GovernanceAction>();
    }

    /// <summary>
    /// Conversion to JsonAny.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator JsonAny(GovernanceAction value)
    {
        return value.AsAny;
    }

    /// <summary>
    /// Conversion to <see cref="Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate(GovernanceAction value)
    {
        return value.As<Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator GovernanceAction(Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate value)
    {
        return value.As<GovernanceAction>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.GovernanceAction.GovernanceActionHardForkInitiation"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.GovernanceAction.GovernanceActionHardForkInitiation(GovernanceAction value)
    {
        return value.As<Generated.GovernanceAction.GovernanceActionHardForkInitiation>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.GovernanceAction.GovernanceActionHardForkInitiation"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator GovernanceAction(Generated.GovernanceAction.GovernanceActionHardForkInitiation value)
    {
        return value.As<GovernanceAction>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.GovernanceAction.GovernanceActionTreasuryTransfer"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.GovernanceAction.GovernanceActionTreasuryTransfer(GovernanceAction value)
    {
        return value.As<Generated.GovernanceAction.GovernanceActionTreasuryTransfer>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.GovernanceAction.GovernanceActionTreasuryTransfer"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator GovernanceAction(Generated.GovernanceAction.GovernanceActionTreasuryTransfer value)
    {
        return value.As<GovernanceAction>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals(GovernanceAction value)
    {
        return value.As<Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator GovernanceAction(Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals value)
    {
        return value.As<GovernanceAction>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.GovernanceAction.GovernanceActionConstitutionalCommittee"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.GovernanceAction.GovernanceActionConstitutionalCommittee(GovernanceAction value)
    {
        return value.As<Generated.GovernanceAction.GovernanceActionConstitutionalCommittee>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.GovernanceAction.GovernanceActionConstitutionalCommittee"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator GovernanceAction(Generated.GovernanceAction.GovernanceActionConstitutionalCommittee value)
    {
        return value.As<GovernanceAction>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.GovernanceAction.GovernanceActionConstitution"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.GovernanceAction.GovernanceActionConstitution(GovernanceAction value)
    {
        return value.As<Generated.GovernanceAction.GovernanceActionConstitution>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.GovernanceAction.GovernanceActionConstitution"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator GovernanceAction(Generated.GovernanceAction.GovernanceActionConstitution value)
    {
        return value.As<GovernanceAction>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.GovernanceAction.GovernanceActionNoConfidence"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.GovernanceAction.GovernanceActionNoConfidence(GovernanceAction value)
    {
        return value.As<Generated.GovernanceAction.GovernanceActionNoConfidence>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.GovernanceAction.GovernanceActionNoConfidence"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator GovernanceAction(Generated.GovernanceAction.GovernanceActionNoConfidence value)
    {
        return value.As<GovernanceAction>();
    }

    /// <summary>
    /// Conversion to <see cref="Generated.GovernanceAction.GovernanceActionInformation"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Generated.GovernanceAction.GovernanceActionInformation(GovernanceAction value)
    {
        return value.As<Generated.GovernanceAction.GovernanceActionInformation>();
    }

    /// <summary>
    /// Conversion from <see cref="Generated.GovernanceAction.GovernanceActionInformation"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator GovernanceAction(Generated.GovernanceAction.GovernanceActionInformation value)
    {
        return value.As<GovernanceAction>();
    }

    /// <summary>
    /// Operator ==.
    /// </summary>
    /// <param name="left">The lhs of the operator.</param>
    /// <param name="right">The rhs of the operator.</param>
    /// <returns>
    /// <c>True</c> if the values are equal.
    /// </returns>
    public static bool operator ==(in GovernanceAction left, in GovernanceAction right)
    {
        return left.Equals(right);
    }

    /// <summary>
    /// Operator !=.
    /// </summary>
    /// <param name="left">The lhs of the operator.</param>
    /// <param name="right">The rhs of the operator.</param>
    /// <returns>
    /// <c>True</c> if the values are not equal.
    /// </returns>
    public static bool operator !=(in GovernanceAction left, in GovernanceAction right)
    {
        return !left.Equals(right);
    }

    /// <summary>
    /// Gets an instance of the JSON value from a <see cref="JsonElement"/> value.
    /// </summary>
    /// <param name="value">The <see cref="JsonElement"/> value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the <see cref="JsonElement"/>.</returns>
    /// <remarks>The returned value will have a <see cref = "IJsonValue.ValueKind"/> of <see cref = "JsonValueKind.Undefined"/> if the
    /// value cannot be constructed from the given instance (e.g. because they have an incompatible .NET backing type).
    /// </remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static GovernanceAction FromJson(in JsonElement value)
    {
        return new(value);
    }

    /// <summary>
    /// Gets an instance of the JSON value from a <see cref="JsonAny"/> value.
    /// </summary>
    /// <param name="value">The <see cref="JsonAny"/> value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the <see cref="JsonAny"/> value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static GovernanceAction FromAny(in JsonAny value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsObject.AsPropertyBacking()),
            JsonValueKind.Null => Null,
            _ => Undefined,
        };
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static GovernanceAction IJsonValue<GovernanceAction>.FromBoolean<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static GovernanceAction IJsonValue<GovernanceAction>.FromString<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static GovernanceAction IJsonValue<GovernanceAction>.FromNumber<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static GovernanceAction FromObject<TValue>(in TValue value)
        where TValue : struct, IJsonObject<TValue>
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            JsonValueKind.Null => Null,
            _ => Undefined,
        };
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static GovernanceAction IJsonValue<GovernanceAction>.FromArray<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

    /// <summary>
    /// Parses the GovernanceAction.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static GovernanceAction Parse(string source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the GovernanceAction.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static GovernanceAction Parse(Stream source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the GovernanceAction.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static GovernanceAction Parse(ReadOnlyMemory<byte> source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the GovernanceAction.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static GovernanceAction Parse(ReadOnlyMemory<char> source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the GovernanceAction.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static GovernanceAction Parse(ReadOnlySequence<byte> source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the GovernanceAction.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static GovernanceAction ParseValue(string source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<GovernanceAction>.ParseValue(source);
#else
        return JsonValueHelpers.ParseValue<GovernanceAction>(source.AsSpan());
#endif
    }

    /// <summary>
    /// Parses the GovernanceAction.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static GovernanceAction ParseValue(ReadOnlySpan<char> source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<GovernanceAction>.ParseValue(source);
#else
        return JsonValueHelpers.ParseValue<GovernanceAction>(source);
#endif
    }

    /// <summary>
    /// Parses the GovernanceAction.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static GovernanceAction ParseValue(ReadOnlySpan<byte> source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<GovernanceAction>.ParseValue(source);
#else
        return JsonValueHelpers.ParseValue<GovernanceAction>(source);
#endif
    }

    /// <summary>
    /// Parses the GovernanceAction.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static GovernanceAction ParseValue(ref Utf8JsonReader source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<GovernanceAction>.ParseValue(ref source);
#else
        return JsonValueHelpers.ParseValue<GovernanceAction>(ref source);
#endif
    }

    /// <summary>
    /// Gets the value as an instance of the target value.
    /// </summary>
    /// <typeparam name="TTarget">The type of the target.</typeparam>
    /// <returns>An instance of the target type.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public TTarget As<TTarget>()
        where TTarget : struct, IJsonValue<TTarget>
    {
#if NET8_0_OR_GREATER
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return TTarget.FromJson(this.jsonElementBacking);
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return TTarget.FromObject(this.AsObject);
        }

        if ((this.backing & Backing.Null) != 0)
        {
            return TTarget.Null;
        }

        return TTarget.Undefined;
#else
        return this.As<GovernanceAction, TTarget>();
#endif
    }

    /// <inheritdoc/>
    public override bool Equals(object? obj)
    {
        return
            (obj is IJsonValue jv && this.Equals(jv.As<GovernanceAction>())) ||
            (obj is null && this.IsNull());
    }

    /// <inheritdoc/>
    public bool Equals<T>(in T other)
        where T : struct, IJsonValue<T>
    {
        return this.Equals(other.As<GovernanceAction>());
    }

    /// <summary>
    /// Equality comparison.
    /// </summary>
    /// <param name="other">The other item with which to compare.</param>
    /// <returns><see langword="true"/> if the values were equal.</returns>
    public bool Equals(in GovernanceAction other)
    {
        JsonValueKind thisKind = this.ValueKind;
        JsonValueKind otherKind = other.ValueKind;
        if (thisKind != otherKind)
        {
            return false;
        }

        if (thisKind == JsonValueKind.Null || thisKind == JsonValueKind.Undefined)
        {
            return true;
        }

        if (thisKind == JsonValueKind.Object)
        {
            JsonObject thisObject = this.AsObject;
            JsonObject otherObject = other.AsObject;
            int count = 0;
            foreach (JsonObjectProperty property in thisObject.EnumerateObject())
            {
                if (!otherObject.TryGetProperty(property.Name, out JsonAny value) || !property.Value.Equals(value))
                {
                    return false;
                }

                count++;
            }

            int otherCount = 0;
            foreach (JsonObjectProperty otherProperty in otherObject.EnumerateObject())
            {
                otherCount++;
                if (otherCount > count)
                {
                    return false;
                }
            }

            return count == otherCount;
        }

        return false;
    }

    /// <inheritdoc/>
    public void WriteTo(Utf8JsonWriter writer)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
            }

            return;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            JsonValueHelpers.WriteProperties(this.objectBacking, writer);

            return;
        }

        if ((this.backing & Backing.Null) != 0)
        {
            writer.WriteNullValue();

            return;
        }
    }

    /// <inheritdoc/>
    public override int GetHashCode()
    {
        return this.ValueKind switch
        {
            JsonValueKind.Array => JsonValueHelpers.GetArrayHashCode(((IJsonValue)this).AsArray),
            JsonValueKind.Object => JsonValueHelpers.GetObjectHashCode(this),
            JsonValueKind.Number => JsonValueHelpers.GetHashCodeForNumber(((IJsonValue)this).AsNumber),
            JsonValueKind.String => JsonValueHelpers.GetHashCodeForString(((IJsonValue)this).AsString),
            JsonValueKind.True => true.GetHashCode(),
            JsonValueKind.False => false.GetHashCode(),
            JsonValueKind.Null => JsonValueHelpers.NullHashCode,
            _ => JsonValueHelpers.UndefinedHashCode,
        };
    }

    /// <inheritdoc/>
    public override string ToString()
    {
        return this.Serialize();
    }

    /// <summary>
    /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <typeparam name="TIn">The immutable context to pass in to the match function.</typeparam>
    /// <typeparam name="TOut">The result of calling the match function.</typeparam>
    /// <param name="context">The context to pass to the match function.</param>
    /// <param name="matchGovernanceActionProtocolParametersUpdate">Match a <see cref="Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate"/>.</param>
    /// <param name="matchGovernanceActionHardForkInitiation">Match a <see cref="Generated.GovernanceAction.GovernanceActionHardForkInitiation"/>.</param>
    /// <param name="matchGovernanceActionTreasuryTransfer">Match a <see cref="Generated.GovernanceAction.GovernanceActionTreasuryTransfer"/>.</param>
    /// <param name="matchGovernanceActionTreasuryWithdrawals">Match a <see cref="Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals"/>.</param>
    /// <param name="matchGovernanceActionConstitutionalCommittee">Match a <see cref="Generated.GovernanceAction.GovernanceActionConstitutionalCommittee"/>.</param>
    /// <param name="matchGovernanceActionConstitution">Match a <see cref="Generated.GovernanceAction.GovernanceActionConstitution"/>.</param>
    /// <param name="matchGovernanceActionNoConfidence">Match a <see cref="Generated.GovernanceAction.GovernanceActionNoConfidence"/>.</param>
    /// <param name="matchGovernanceActionInformation">Match a <see cref="Generated.GovernanceAction.GovernanceActionInformation"/>.</param>
    /// <param name="defaultMatch">Match any other value.</param>
    /// <returns>An instance of the value returned by the match function.</returns>
    public TOut Match<TIn, TOut>(
        in TIn context,
        Matcher<Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate, TIn, TOut> matchGovernanceActionProtocolParametersUpdate,
        Matcher<Generated.GovernanceAction.GovernanceActionHardForkInitiation, TIn, TOut> matchGovernanceActionHardForkInitiation,
        Matcher<Generated.GovernanceAction.GovernanceActionTreasuryTransfer, TIn, TOut> matchGovernanceActionTreasuryTransfer,
        Matcher<Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals, TIn, TOut> matchGovernanceActionTreasuryWithdrawals,
        Matcher<Generated.GovernanceAction.GovernanceActionConstitutionalCommittee, TIn, TOut> matchGovernanceActionConstitutionalCommittee,
        Matcher<Generated.GovernanceAction.GovernanceActionConstitution, TIn, TOut> matchGovernanceActionConstitution,
        Matcher<Generated.GovernanceAction.GovernanceActionNoConfidence, TIn, TOut> matchGovernanceActionNoConfidence,
        Matcher<Generated.GovernanceAction.GovernanceActionInformation, TIn, TOut> matchGovernanceActionInformation,
        Matcher<Generated.GovernanceAction, TIn, TOut> defaultMatch)
    {
        Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate matchGovernanceActionProtocolParametersUpdateValue = this.As<Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate>();
        if (matchGovernanceActionProtocolParametersUpdateValue.IsValid())
        {
            return matchGovernanceActionProtocolParametersUpdate(matchGovernanceActionProtocolParametersUpdateValue, context);
        }

        Generated.GovernanceAction.GovernanceActionHardForkInitiation matchGovernanceActionHardForkInitiationValue = this.As<Generated.GovernanceAction.GovernanceActionHardForkInitiation>();
        if (matchGovernanceActionHardForkInitiationValue.IsValid())
        {
            return matchGovernanceActionHardForkInitiation(matchGovernanceActionHardForkInitiationValue, context);
        }

        Generated.GovernanceAction.GovernanceActionTreasuryTransfer matchGovernanceActionTreasuryTransferValue = this.As<Generated.GovernanceAction.GovernanceActionTreasuryTransfer>();
        if (matchGovernanceActionTreasuryTransferValue.IsValid())
        {
            return matchGovernanceActionTreasuryTransfer(matchGovernanceActionTreasuryTransferValue, context);
        }

        Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals matchGovernanceActionTreasuryWithdrawalsValue = this.As<Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals>();
        if (matchGovernanceActionTreasuryWithdrawalsValue.IsValid())
        {
            return matchGovernanceActionTreasuryWithdrawals(matchGovernanceActionTreasuryWithdrawalsValue, context);
        }

        Generated.GovernanceAction.GovernanceActionConstitutionalCommittee matchGovernanceActionConstitutionalCommitteeValue = this.As<Generated.GovernanceAction.GovernanceActionConstitutionalCommittee>();
        if (matchGovernanceActionConstitutionalCommitteeValue.IsValid())
        {
            return matchGovernanceActionConstitutionalCommittee(matchGovernanceActionConstitutionalCommitteeValue, context);
        }

        Generated.GovernanceAction.GovernanceActionConstitution matchGovernanceActionConstitutionValue = this.As<Generated.GovernanceAction.GovernanceActionConstitution>();
        if (matchGovernanceActionConstitutionValue.IsValid())
        {
            return matchGovernanceActionConstitution(matchGovernanceActionConstitutionValue, context);
        }

        Generated.GovernanceAction.GovernanceActionNoConfidence matchGovernanceActionNoConfidenceValue = this.As<Generated.GovernanceAction.GovernanceActionNoConfidence>();
        if (matchGovernanceActionNoConfidenceValue.IsValid())
        {
            return matchGovernanceActionNoConfidence(matchGovernanceActionNoConfidenceValue, context);
        }

        Generated.GovernanceAction.GovernanceActionInformation matchGovernanceActionInformationValue = this.As<Generated.GovernanceAction.GovernanceActionInformation>();
        if (matchGovernanceActionInformationValue.IsValid())
        {
            return matchGovernanceActionInformation(matchGovernanceActionInformationValue, context);
        }

        return defaultMatch(this, context);
    }

    /// <summary>
    /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <typeparam name="TOut">The result of calling the match function.</typeparam>
    /// <param name="matchGovernanceActionProtocolParametersUpdate">Match a <see cref="Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate"/>.</param>
    /// <param name="matchGovernanceActionHardForkInitiation">Match a <see cref="Generated.GovernanceAction.GovernanceActionHardForkInitiation"/>.</param>
    /// <param name="matchGovernanceActionTreasuryTransfer">Match a <see cref="Generated.GovernanceAction.GovernanceActionTreasuryTransfer"/>.</param>
    /// <param name="matchGovernanceActionTreasuryWithdrawals">Match a <see cref="Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals"/>.</param>
    /// <param name="matchGovernanceActionConstitutionalCommittee">Match a <see cref="Generated.GovernanceAction.GovernanceActionConstitutionalCommittee"/>.</param>
    /// <param name="matchGovernanceActionConstitution">Match a <see cref="Generated.GovernanceAction.GovernanceActionConstitution"/>.</param>
    /// <param name="matchGovernanceActionNoConfidence">Match a <see cref="Generated.GovernanceAction.GovernanceActionNoConfidence"/>.</param>
    /// <param name="matchGovernanceActionInformation">Match a <see cref="Generated.GovernanceAction.GovernanceActionInformation"/>.</param>
    /// <param name="defaultMatch">Match any other value.</param>
    /// <returns>An instance of the value returned by the match function.</returns>
    public TOut Match<TOut>(
        Matcher<Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate, TOut> matchGovernanceActionProtocolParametersUpdate,
        Matcher<Generated.GovernanceAction.GovernanceActionHardForkInitiation, TOut> matchGovernanceActionHardForkInitiation,
        Matcher<Generated.GovernanceAction.GovernanceActionTreasuryTransfer, TOut> matchGovernanceActionTreasuryTransfer,
        Matcher<Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals, TOut> matchGovernanceActionTreasuryWithdrawals,
        Matcher<Generated.GovernanceAction.GovernanceActionConstitutionalCommittee, TOut> matchGovernanceActionConstitutionalCommittee,
        Matcher<Generated.GovernanceAction.GovernanceActionConstitution, TOut> matchGovernanceActionConstitution,
        Matcher<Generated.GovernanceAction.GovernanceActionNoConfidence, TOut> matchGovernanceActionNoConfidence,
        Matcher<Generated.GovernanceAction.GovernanceActionInformation, TOut> matchGovernanceActionInformation,
        Matcher<Generated.GovernanceAction, TOut> defaultMatch)
    {
        Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate matchGovernanceActionProtocolParametersUpdateValue = this.As<Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate>();
        if (matchGovernanceActionProtocolParametersUpdateValue.IsValid())
        {
            return matchGovernanceActionProtocolParametersUpdate(matchGovernanceActionProtocolParametersUpdateValue);
        }

        Generated.GovernanceAction.GovernanceActionHardForkInitiation matchGovernanceActionHardForkInitiationValue = this.As<Generated.GovernanceAction.GovernanceActionHardForkInitiation>();
        if (matchGovernanceActionHardForkInitiationValue.IsValid())
        {
            return matchGovernanceActionHardForkInitiation(matchGovernanceActionHardForkInitiationValue);
        }

        Generated.GovernanceAction.GovernanceActionTreasuryTransfer matchGovernanceActionTreasuryTransferValue = this.As<Generated.GovernanceAction.GovernanceActionTreasuryTransfer>();
        if (matchGovernanceActionTreasuryTransferValue.IsValid())
        {
            return matchGovernanceActionTreasuryTransfer(matchGovernanceActionTreasuryTransferValue);
        }

        Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals matchGovernanceActionTreasuryWithdrawalsValue = this.As<Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals>();
        if (matchGovernanceActionTreasuryWithdrawalsValue.IsValid())
        {
            return matchGovernanceActionTreasuryWithdrawals(matchGovernanceActionTreasuryWithdrawalsValue);
        }

        Generated.GovernanceAction.GovernanceActionConstitutionalCommittee matchGovernanceActionConstitutionalCommitteeValue = this.As<Generated.GovernanceAction.GovernanceActionConstitutionalCommittee>();
        if (matchGovernanceActionConstitutionalCommitteeValue.IsValid())
        {
            return matchGovernanceActionConstitutionalCommittee(matchGovernanceActionConstitutionalCommitteeValue);
        }

        Generated.GovernanceAction.GovernanceActionConstitution matchGovernanceActionConstitutionValue = this.As<Generated.GovernanceAction.GovernanceActionConstitution>();
        if (matchGovernanceActionConstitutionValue.IsValid())
        {
            return matchGovernanceActionConstitution(matchGovernanceActionConstitutionValue);
        }

        Generated.GovernanceAction.GovernanceActionNoConfidence matchGovernanceActionNoConfidenceValue = this.As<Generated.GovernanceAction.GovernanceActionNoConfidence>();
        if (matchGovernanceActionNoConfidenceValue.IsValid())
        {
            return matchGovernanceActionNoConfidence(matchGovernanceActionNoConfidenceValue);
        }

        Generated.GovernanceAction.GovernanceActionInformation matchGovernanceActionInformationValue = this.As<Generated.GovernanceAction.GovernanceActionInformation>();
        if (matchGovernanceActionInformationValue.IsValid())
        {
            return matchGovernanceActionInformation(matchGovernanceActionInformationValue);
        }

        return defaultMatch(this);
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsGovernanceActionProtocolParametersUpdate(out Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate result)
    {
        result = this.As<Generated.GovernanceAction.GovernanceActionProtocolParametersUpdate>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.GovernanceAction.GovernanceActionHardForkInitiation" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsGovernanceActionHardForkInitiation(out Generated.GovernanceAction.GovernanceActionHardForkInitiation result)
    {
        result = this.As<Generated.GovernanceAction.GovernanceActionHardForkInitiation>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.GovernanceAction.GovernanceActionTreasuryTransfer" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsGovernanceActionTreasuryTransfer(out Generated.GovernanceAction.GovernanceActionTreasuryTransfer result)
    {
        result = this.As<Generated.GovernanceAction.GovernanceActionTreasuryTransfer>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsGovernanceActionTreasuryWithdrawals(out Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals result)
    {
        result = this.As<Generated.GovernanceAction.GovernanceActionTreasuryWithdrawals>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.GovernanceAction.GovernanceActionConstitutionalCommittee" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsGovernanceActionConstitutionalCommittee(out Generated.GovernanceAction.GovernanceActionConstitutionalCommittee result)
    {
        result = this.As<Generated.GovernanceAction.GovernanceActionConstitutionalCommittee>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.GovernanceAction.GovernanceActionConstitution" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsGovernanceActionConstitution(out Generated.GovernanceAction.GovernanceActionConstitution result)
    {
        result = this.As<Generated.GovernanceAction.GovernanceActionConstitution>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.GovernanceAction.GovernanceActionNoConfidence" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsGovernanceActionNoConfidence(out Generated.GovernanceAction.GovernanceActionNoConfidence result)
    {
        result = this.As<Generated.GovernanceAction.GovernanceActionNoConfidence>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Generated.GovernanceAction.GovernanceActionInformation" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsGovernanceActionInformation(out Generated.GovernanceAction.GovernanceActionInformation result)
    {
        result = this.As<Generated.GovernanceAction.GovernanceActionInformation>();
        return result.IsValid();
    }
}
