//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Generated;
/// <summary>
/// BootstrapProtocolParameters
/// </summary>
public readonly partial struct BootstrapProtocolParameters
    : IJsonObject<Generated.BootstrapProtocolParameters>
{
    /// <summary>
    /// Conversion from <see cref="ImmutableList{JsonObjectProperty}"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator BootstrapProtocolParameters(ImmutableList<JsonObjectProperty> value)
    {
        return new(value);
    }

    /// <summary>
    /// Conversion to <see cref="ImmutableList{JsonObjectProperty}"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator ImmutableList<JsonObjectProperty>(BootstrapProtocolParameters value)
    {
        return
            __CorvusObjectHelpers.GetPropertyBacking(value);
    }

    /// <summary>
    /// Conversion from JsonObject.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator BootstrapProtocolParameters(JsonObject value)
    {
        if (value.HasDotnetBacking && value.ValueKind == JsonValueKind.Object)
        {
            return new(
                __CorvusObjectHelpers.GetPropertyBacking(value));
        }

        return new(value.AsJsonElement);
    }

    /// <summary>
    /// Conversion to JsonObject.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator JsonObject(BootstrapProtocolParameters value)
    {
        return
            value.AsObject;
    }

    /// <inheritdoc/>
    public Corvus.Json.JsonAny this[in JsonPropertyName name]
    {
        get
        {
            if (this.TryGetProperty(name, out Corvus.Json.JsonAny result))
            {
                return result;
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the number of properties in the object.
    /// </summary>
    public int Count
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking.GetPropertyCount();
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return this.objectBacking.Count;
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the (optional) <c>heavyDelegationThreshold</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A ratio of two integers, to express exact fractions.
    /// </para>
    /// </remarks>
    public Generated.Ratio HeavyDelegationThreshold
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.HeavyDelegationThresholdUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.HeavyDelegationThreshold, out JsonAny result))
                {
                    return result.As<Generated.Ratio>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxBlockBodySize</c> property.
    /// </summary>
    public Generated.NumberOfBytes MaxBlockBodySize
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxBlockBodySizeUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxBlockBodySize, out JsonAny result))
                {
                    return result.As<Generated.NumberOfBytes>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxBlockHeaderSize</c> property.
    /// </summary>
    public Generated.NumberOfBytes MaxBlockHeaderSize
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxBlockHeaderSizeUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxBlockHeaderSize, out JsonAny result))
                {
                    return result.As<Generated.NumberOfBytes>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxTransactionSize</c> property.
    /// </summary>
    public Generated.NumberOfBytes MaxTransactionSize
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxTransactionSizeUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxTransactionSize, out JsonAny result))
                {
                    return result.As<Generated.NumberOfBytes>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxUpdateProposalSize</c> property.
    /// </summary>
    public Generated.NumberOfBytes MaxUpdateProposalSize
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxUpdateProposalSizeUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxUpdateProposalSize, out JsonAny result))
                {
                    return result.As<Generated.NumberOfBytes>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>minFeeCoefficient</c> property.
    /// </summary>
    public Generated.UInt64 MinFeeCoefficient
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinFeeCoefficientUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MinFeeCoefficient, out JsonAny result))
                {
                    return result.As<Generated.UInt64>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>minFeeConstant</c> property.
    /// </summary>
    public Generated.ValueAdaOnly MinFeeConstant
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinFeeConstantUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MinFeeConstant, out JsonAny result))
                {
                    return result.As<Generated.ValueAdaOnly>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>multiPartyComputationThreshold</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A ratio of two integers, to express exact fractions.
    /// </para>
    /// </remarks>
    public Generated.Ratio MultiPartyComputationThreshold
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MultiPartyComputationThresholdUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MultiPartyComputationThreshold, out JsonAny result))
                {
                    return result.As<Generated.Ratio>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>scriptVersion</c> property.
    /// </summary>
    public Generated.UInt64 ScriptVersion
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ScriptVersionUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ScriptVersion, out JsonAny result))
                {
                    return result.As<Generated.UInt64>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>slotDuration</c> property.
    /// </summary>
    public Generated.UInt64 SlotDuration
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.SlotDurationUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.SlotDuration, out JsonAny result))
                {
                    return result.As<Generated.UInt64>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>softForkDecrementThreshold</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A ratio of two integers, to express exact fractions.
    /// </para>
    /// </remarks>
    public Generated.Ratio SoftForkDecrementThreshold
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.SoftForkDecrementThresholdUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.SoftForkDecrementThreshold, out JsonAny result))
                {
                    return result.As<Generated.Ratio>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>softForkInitThreshold</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A ratio of two integers, to express exact fractions.
    /// </para>
    /// </remarks>
    public Generated.Ratio SoftForkInitThreshold
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.SoftForkInitThresholdUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.SoftForkInitThreshold, out JsonAny result))
                {
                    return result.As<Generated.Ratio>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>softForkMinThreshold</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A ratio of two integers, to express exact fractions.
    /// </para>
    /// </remarks>
    public Generated.Ratio SoftForkMinThreshold
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.SoftForkMinThresholdUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.SoftForkMinThreshold, out JsonAny result))
                {
                    return result.As<Generated.Ratio>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>unlockStakeEpoch</c> property.
    /// </summary>
    public Generated.UInt64 UnlockStakeEpoch
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.UnlockStakeEpochUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.UnlockStakeEpoch, out JsonAny result))
                {
                    return result.As<Generated.UInt64>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>updateProposalThreshold</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A ratio of two integers, to express exact fractions.
    /// </para>
    /// </remarks>
    public Generated.Ratio UpdateProposalThreshold
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.UpdateProposalThresholdUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.UpdateProposalThreshold, out JsonAny result))
                {
                    return result.As<Generated.Ratio>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>updateProposalTimeToLive</c> property.
    /// </summary>
    public Generated.UInt64 UpdateProposalTimeToLive
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.UpdateProposalTimeToLiveUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.UpdateProposalTimeToLive, out JsonAny result))
                {
                    return result.As<Generated.UInt64>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>updateVoteThreshold</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A ratio of two integers, to express exact fractions.
    /// </para>
    /// </remarks>
    public Generated.Ratio UpdateVoteThreshold
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.UpdateVoteThresholdUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.UpdateVoteThreshold, out JsonAny result))
                {
                    return result.As<Generated.Ratio>();
                }
            }

            return default;
        }
    }

    /// <inheritdoc/>
    public static BootstrapProtocolParameters FromProperties(IDictionary<JsonPropertyName, JsonAny> source)
    {
        return new(source.Select(kvp => new JsonObjectProperty(kvp.Key, kvp.Value)).ToImmutableList());
    }

    /// <inheritdoc/>
    public static BootstrapProtocolParameters FromProperties(params (JsonPropertyName Name, JsonAny Value)[] source)
    {
        return new(source.Select(s => new JsonObjectProperty(s.Name, s.Value.AsAny)).ToImmutableList());
    }

    /// <summary>
    /// Creates an instance of the type from the given immutable list of properties.
    /// </summary>
    /// <param name="source">The list of properties.</param>
    /// <returns>An instance of the type initialized from the list of properties.</returns>
    public static BootstrapProtocolParameters FromProperties(ImmutableList<JsonObjectProperty> source)
    {
        return new(source);
    }

    /// <summary>
    /// Creates an instance of a <see cref="BootstrapProtocolParameters"/>.
    /// </summary>
    public static BootstrapProtocolParameters Create(
        in Generated.Ratio? heavyDelegationThreshold = null,
        in Generated.NumberOfBytes? maxBlockBodySize = null,
        in Generated.NumberOfBytes? maxBlockHeaderSize = null,
        in Generated.NumberOfBytes? maxTransactionSize = null,
        in Generated.NumberOfBytes? maxUpdateProposalSize = null,
        in Generated.UInt64? minFeeCoefficient = null,
        in Generated.ValueAdaOnly? minFeeConstant = null,
        in Generated.Ratio? multiPartyComputationThreshold = null,
        in Generated.UInt64? scriptVersion = null,
        in Generated.UInt64? slotDuration = null,
        in Generated.Ratio? softForkDecrementThreshold = null,
        in Generated.Ratio? softForkInitThreshold = null,
        in Generated.Ratio? softForkMinThreshold = null,
        in Generated.UInt64? unlockStakeEpoch = null,
        in Generated.Ratio? updateProposalThreshold = null,
        in Generated.UInt64? updateProposalTimeToLive = null,
        in Generated.Ratio? updateVoteThreshold = null)
    {
        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();

        if (heavyDelegationThreshold is not null)
        {
            builder.Add(JsonPropertyNames.HeavyDelegationThreshold, heavyDelegationThreshold.Value.AsAny);
        }

        if (maxBlockBodySize is not null)
        {
            builder.Add(JsonPropertyNames.MaxBlockBodySize, maxBlockBodySize.Value.AsAny);
        }

        if (maxBlockHeaderSize is not null)
        {
            builder.Add(JsonPropertyNames.MaxBlockHeaderSize, maxBlockHeaderSize.Value.AsAny);
        }

        if (maxTransactionSize is not null)
        {
            builder.Add(JsonPropertyNames.MaxTransactionSize, maxTransactionSize.Value.AsAny);
        }

        if (maxUpdateProposalSize is not null)
        {
            builder.Add(JsonPropertyNames.MaxUpdateProposalSize, maxUpdateProposalSize.Value.AsAny);
        }

        if (minFeeCoefficient is not null)
        {
            builder.Add(JsonPropertyNames.MinFeeCoefficient, minFeeCoefficient.Value.AsAny);
        }

        if (minFeeConstant is not null)
        {
            builder.Add(JsonPropertyNames.MinFeeConstant, minFeeConstant.Value.AsAny);
        }

        if (multiPartyComputationThreshold is not null)
        {
            builder.Add(JsonPropertyNames.MultiPartyComputationThreshold, multiPartyComputationThreshold.Value.AsAny);
        }

        if (scriptVersion is not null)
        {
            builder.Add(JsonPropertyNames.ScriptVersion, scriptVersion.Value.AsAny);
        }

        if (slotDuration is not null)
        {
            builder.Add(JsonPropertyNames.SlotDuration, slotDuration.Value.AsAny);
        }

        if (softForkDecrementThreshold is not null)
        {
            builder.Add(JsonPropertyNames.SoftForkDecrementThreshold, softForkDecrementThreshold.Value.AsAny);
        }

        if (softForkInitThreshold is not null)
        {
            builder.Add(JsonPropertyNames.SoftForkInitThreshold, softForkInitThreshold.Value.AsAny);
        }

        if (softForkMinThreshold is not null)
        {
            builder.Add(JsonPropertyNames.SoftForkMinThreshold, softForkMinThreshold.Value.AsAny);
        }

        if (unlockStakeEpoch is not null)
        {
            builder.Add(JsonPropertyNames.UnlockStakeEpoch, unlockStakeEpoch.Value.AsAny);
        }

        if (updateProposalThreshold is not null)
        {
            builder.Add(JsonPropertyNames.UpdateProposalThreshold, updateProposalThreshold.Value.AsAny);
        }

        if (updateProposalTimeToLive is not null)
        {
            builder.Add(JsonPropertyNames.UpdateProposalTimeToLive, updateProposalTimeToLive.Value.AsAny);
        }

        if (updateVoteThreshold is not null)
        {
            builder.Add(JsonPropertyNames.UpdateVoteThreshold, updateVoteThreshold.Value.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <inheritdoc/>
    public ImmutableList<JsonObjectProperty> AsPropertyBacking()
    {
        return __CorvusObjectHelpers.GetPropertyBacking(this);
    }
    /// <inheritdoc/>
    public ImmutableList<JsonObjectProperty>.Builder AsPropertyBackingBuilder()
    {
        return __CorvusObjectHelpers.GetPropertyBacking(this).ToBuilder();
    }

    /// <inheritdoc/>
    public JsonObjectEnumerator EnumerateObject()
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return new(this.jsonElementBacking);
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return new(this.objectBacking);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc/>
    public bool HasProperties()
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.Count > 0;
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            using JsonElement.ObjectEnumerator enumerator = this.jsonElementBacking.EnumerateObject();
            return enumerator.MoveNext();
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(in JsonPropertyName name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return name.TryGetProperty(this.jsonElementBacking, out JsonElement _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(string name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(ReadOnlySpan<char> name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(ReadOnlySpan<byte> name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(in JsonPropertyName name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(string name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(ReadOnlySpan<byte> name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(in JsonPropertyName name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(string name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(ReadOnlySpan<char> name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(ReadOnlySpan<byte> name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public BootstrapProtocolParameters SetProperty<TValue>(in JsonPropertyName name, TValue value)
        where TValue : struct, IJsonValue
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWith(this, name, value.AsAny));
    }

    /// <inheritdoc />
    public BootstrapProtocolParameters RemoveProperty(in JsonPropertyName name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public BootstrapProtocolParameters RemoveProperty(string name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public BootstrapProtocolParameters RemoveProperty(ReadOnlySpan<char> name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public BootstrapProtocolParameters RemoveProperty(ReadOnlySpan<byte> name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <summary>
    /// Provides UTF8 and string versions of the JSON property names on the object.
    /// </summary>
    public static class JsonPropertyNames
    {
        /// <summary>
        /// Gets the JSON property name for <see cref="HeavyDelegationThreshold"/>.
        /// </summary>
        public const string HeavyDelegationThreshold = "heavyDelegationThreshold";

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxBlockBodySize"/>.
        /// </summary>
        public const string MaxBlockBodySize = "maxBlockBodySize";

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxBlockHeaderSize"/>.
        /// </summary>
        public const string MaxBlockHeaderSize = "maxBlockHeaderSize";

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxTransactionSize"/>.
        /// </summary>
        public const string MaxTransactionSize = "maxTransactionSize";

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxUpdateProposalSize"/>.
        /// </summary>
        public const string MaxUpdateProposalSize = "maxUpdateProposalSize";

        /// <summary>
        /// Gets the JSON property name for <see cref="MinFeeCoefficient"/>.
        /// </summary>
        public const string MinFeeCoefficient = "minFeeCoefficient";

        /// <summary>
        /// Gets the JSON property name for <see cref="MinFeeConstant"/>.
        /// </summary>
        public const string MinFeeConstant = "minFeeConstant";

        /// <summary>
        /// Gets the JSON property name for <see cref="MultiPartyComputationThreshold"/>.
        /// </summary>
        public const string MultiPartyComputationThreshold = "multiPartyComputationThreshold";

        /// <summary>
        /// Gets the JSON property name for <see cref="ScriptVersion"/>.
        /// </summary>
        public const string ScriptVersion = "scriptVersion";

        /// <summary>
        /// Gets the JSON property name for <see cref="SlotDuration"/>.
        /// </summary>
        public const string SlotDuration = "slotDuration";

        /// <summary>
        /// Gets the JSON property name for <see cref="SoftForkDecrementThreshold"/>.
        /// </summary>
        public const string SoftForkDecrementThreshold = "softForkDecrementThreshold";

        /// <summary>
        /// Gets the JSON property name for <see cref="SoftForkInitThreshold"/>.
        /// </summary>
        public const string SoftForkInitThreshold = "softForkInitThreshold";

        /// <summary>
        /// Gets the JSON property name for <see cref="SoftForkMinThreshold"/>.
        /// </summary>
        public const string SoftForkMinThreshold = "softForkMinThreshold";

        /// <summary>
        /// Gets the JSON property name for <see cref="UnlockStakeEpoch"/>.
        /// </summary>
        public const string UnlockStakeEpoch = "unlockStakeEpoch";

        /// <summary>
        /// Gets the JSON property name for <see cref="UpdateProposalThreshold"/>.
        /// </summary>
        public const string UpdateProposalThreshold = "updateProposalThreshold";

        /// <summary>
        /// Gets the JSON property name for <see cref="UpdateProposalTimeToLive"/>.
        /// </summary>
        public const string UpdateProposalTimeToLive = "updateProposalTimeToLive";

        /// <summary>
        /// Gets the JSON property name for <see cref="UpdateVoteThreshold"/>.
        /// </summary>
        public const string UpdateVoteThreshold = "updateVoteThreshold";

        /// <summary>
        /// Gets the JSON property name for <see cref="HeavyDelegationThreshold"/>.
        /// </summary>
        public static ReadOnlySpan<byte> HeavyDelegationThresholdUtf8 => "heavyDelegationThreshold"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxBlockBodySize"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxBlockBodySizeUtf8 => "maxBlockBodySize"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxBlockHeaderSize"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxBlockHeaderSizeUtf8 => "maxBlockHeaderSize"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxTransactionSize"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxTransactionSizeUtf8 => "maxTransactionSize"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MaxUpdateProposalSize"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxUpdateProposalSizeUtf8 => "maxUpdateProposalSize"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MinFeeCoefficient"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinFeeCoefficientUtf8 => "minFeeCoefficient"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MinFeeConstant"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinFeeConstantUtf8 => "minFeeConstant"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="MultiPartyComputationThreshold"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MultiPartyComputationThresholdUtf8 => "multiPartyComputationThreshold"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="ScriptVersion"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ScriptVersionUtf8 => "scriptVersion"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="SlotDuration"/>.
        /// </summary>
        public static ReadOnlySpan<byte> SlotDurationUtf8 => "slotDuration"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="SoftForkDecrementThreshold"/>.
        /// </summary>
        public static ReadOnlySpan<byte> SoftForkDecrementThresholdUtf8 => "softForkDecrementThreshold"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="SoftForkInitThreshold"/>.
        /// </summary>
        public static ReadOnlySpan<byte> SoftForkInitThresholdUtf8 => "softForkInitThreshold"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="SoftForkMinThreshold"/>.
        /// </summary>
        public static ReadOnlySpan<byte> SoftForkMinThresholdUtf8 => "softForkMinThreshold"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="UnlockStakeEpoch"/>.
        /// </summary>
        public static ReadOnlySpan<byte> UnlockStakeEpochUtf8 => "unlockStakeEpoch"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="UpdateProposalThreshold"/>.
        /// </summary>
        public static ReadOnlySpan<byte> UpdateProposalThresholdUtf8 => "updateProposalThreshold"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="UpdateProposalTimeToLive"/>.
        /// </summary>
        public static ReadOnlySpan<byte> UpdateProposalTimeToLiveUtf8 => "updateProposalTimeToLive"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="UpdateVoteThreshold"/>.
        /// </summary>
        public static ReadOnlySpan<byte> UpdateVoteThresholdUtf8 => "updateVoteThreshold"u8;
    }

    private static class __CorvusObjectHelpers
    {
        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonAny"/> built from the object.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBacking(in BootstrapProtocolParameters that)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking;
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilder(that.jsonElementBacking).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in BootstrapProtocolParameters that, in JsonPropertyName name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in BootstrapProtocolParameters that, ReadOnlySpan<char> name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in BootstrapProtocolParameters that, ReadOnlySpan<byte> name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in BootstrapProtocolParameters that, string name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, with the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWith(in BootstrapProtocolParameters that, in JsonPropertyName name, in JsonAny value)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.SetItem(name, value);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderReplacing(that.jsonElementBacking, name, value).ToImmutable();
            }

            throw new InvalidOperationException();
        }
    }
}
