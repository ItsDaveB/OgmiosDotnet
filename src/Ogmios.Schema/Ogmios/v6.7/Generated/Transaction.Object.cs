//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Generated;
/// <summary>
/// Transaction
/// </summary>
public readonly partial struct Transaction
    : IJsonObject<Generated.Transaction>
{
    /// <summary>
    /// Conversion from <see cref="ImmutableList{JsonObjectProperty}"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Transaction(ImmutableList<JsonObjectProperty> value)
    {
        return new(value);
    }

    /// <summary>
    /// Conversion to <see cref="ImmutableList{JsonObjectProperty}"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator ImmutableList<JsonObjectProperty>(Transaction value)
    {
        return
            __CorvusObjectHelpers.GetPropertyBacking(value);
    }

    /// <summary>
    /// Conversion from JsonObject.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Transaction(JsonObject value)
    {
        if (value.HasDotnetBacking && value.ValueKind == JsonValueKind.Object)
        {
            return new(
                __CorvusObjectHelpers.GetPropertyBacking(value));
        }

        return new(value.AsJsonElement);
    }

    /// <summary>
    /// Conversion to JsonObject.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator JsonObject(Transaction value)
    {
        return
            value.AsObject;
    }

    /// <inheritdoc/>
    public Corvus.Json.JsonAny this[in JsonPropertyName name]
    {
        get
        {
            if (this.TryGetProperty(name, out Corvus.Json.JsonAny result))
            {
                return result;
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the number of properties in the object.
    /// </summary>
    public int Count
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking.GetPropertyCount();
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return this.objectBacking.Count;
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the (optional) <c>cbor</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// The raw serialized (CBOR) transaction, as found on-chain. Use --include-transaction-cbor to ALWAYS include the 'cbor' field. Omitted otherwise.
    /// </para>
    /// </remarks>
    public Corvus.Json.JsonString Cbor
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.CborUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Cbor, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>certificates</c> property.
    /// </summary>
    public Generated.Transaction.CertificateArray Certificates
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.CertificatesUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Certificates, out JsonAny result))
                {
                    return result.As<Generated.Transaction.CertificateArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>collateralReturn</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A transaction output. 'datum' and 'datumHash' are never present together.
    /// </para>
    /// </remarks>
    public Generated.TransactionOutput CollateralReturn
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.CollateralReturnUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.CollateralReturn, out JsonAny result))
                {
                    return result.As<Generated.TransactionOutput>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>collaterals</c> property.
    /// </summary>
    public Generated.Transaction.TransactionOutputReferenceArray Collaterals
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.CollateralsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Collaterals, out JsonAny result))
                {
                    return result.As<Generated.Transaction.TransactionOutputReferenceArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>datums</c> property.
    /// </summary>
    public Generated.Transaction.DatumsEntity Datums
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DatumsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Datums, out JsonAny result))
                {
                    return result.As<Generated.Transaction.DatumsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>fee</c> property.
    /// </summary>
    public Generated.ValueAdaOnly Fee
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.FeeUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Fee, out JsonAny result))
                {
                    return result.As<Generated.ValueAdaOnly>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>id</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// <para>
    /// A Blake2b 32-byte hash digest, encoded in base16.
    /// </para>
    /// </remarks>
    public Generated.DigestBlake2b256 Id
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.IdUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Id, out JsonAny result))
                {
                    return result.As<Generated.DigestBlake2b256>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>inputs</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.Transaction.InputsTransactionOutputRefArray Inputs
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.InputsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Inputs, out JsonAny result))
                {
                    return result.As<Generated.Transaction.InputsTransactionOutputRefArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>metadata</c> property.
    /// </summary>
    public Generated.Metadata Metadata
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MetadataUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Metadata, out JsonAny result))
                {
                    return result.As<Generated.Metadata>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>mint</c> property.
    /// </summary>
    public Generated.Assets Mint
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MintUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Mint, out JsonAny result))
                {
                    return result.As<Generated.Assets>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>network</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A network target, as defined since the Shelley era.
    /// </para>
    /// </remarks>
    public Generated.Network Network
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NetworkUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Network, out JsonAny result))
                {
                    return result.As<Generated.Network>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>outputs</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.Transaction.TransactionOutputArray Outputs
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.OutputsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Outputs, out JsonAny result))
                {
                    return result.As<Generated.Transaction.TransactionOutputArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>proposals</c> property.
    /// </summary>
    public Generated.Transaction.GovernanceProposalArray Proposals
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ProposalsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Proposals, out JsonAny result))
                {
                    return result.As<Generated.Transaction.GovernanceProposalArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>redeemers</c> property.
    /// </summary>
    public Generated.Transaction.RedeemerArray Redeemers
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RedeemersUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Redeemers, out JsonAny result))
                {
                    return result.As<Generated.Transaction.RedeemerArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>references</c> property.
    /// </summary>
    public Generated.Transaction.ReferencesTransactionOutpuArray References
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ReferencesUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.References, out JsonAny result))
                {
                    return result.As<Generated.Transaction.ReferencesTransactionOutpuArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>requiredExtraScripts</c> property.
    /// </summary>
    public Generated.Transaction.DigestBlake2b224Array RequiredExtraScripts
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RequiredExtraScriptsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.RequiredExtraScripts, out JsonAny result))
                {
                    return result.As<Generated.Transaction.DigestBlake2b224Array>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>requiredExtraSignatories</c> property.
    /// </summary>
    public Generated.Transaction.RequiredExtraSigArray RequiredExtraSignatories
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RequiredExtraSignatoriesUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.RequiredExtraSignatories, out JsonAny result))
                {
                    return result.As<Generated.Transaction.RequiredExtraSigArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>scriptIntegrityHash</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A Blake2b 32-byte hash digest, encoded in base16.
    /// </para>
    /// </remarks>
    public Generated.DigestBlake2b256 ScriptIntegrityHash
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ScriptIntegrityHashUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ScriptIntegrityHash, out JsonAny result))
                {
                    return result.As<Generated.DigestBlake2b256>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>scripts</c> property.
    /// </summary>
    public Generated.Transaction.ScriptsEntity Scripts
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ScriptsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Scripts, out JsonAny result))
                {
                    return result.As<Generated.Transaction.ScriptsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>signatories</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.Transaction.SignatoryArray Signatories
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.SignatoriesUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Signatories, out JsonAny result))
                {
                    return result.As<Generated.Transaction.SignatoryArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>spends</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// </remarks>
    public Generated.InputSource Spends
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.SpendsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Spends, out JsonAny result))
                {
                    return result.As<Generated.InputSource>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>totalCollateral</c> property.
    /// </summary>
    public Generated.ValueAdaOnly TotalCollateral
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.TotalCollateralUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.TotalCollateral, out JsonAny result))
                {
                    return result.As<Generated.ValueAdaOnly>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>treasury</c> property.
    /// </summary>
    public Generated.Transaction.TreasuryEntity Treasury
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.TreasuryUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Treasury, out JsonAny result))
                {
                    return result.As<Generated.Transaction.TreasuryEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>validityInterval</c> property.
    /// </summary>
    public Generated.ValidityInterval ValidityInterval
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ValidityIntervalUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ValidityInterval, out JsonAny result))
                {
                    return result.As<Generated.ValidityInterval>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>votes</c> property.
    /// </summary>
    public Generated.Transaction.GovernanceVoteArray Votes
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.VotesUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Votes, out JsonAny result))
                {
                    return result.As<Generated.Transaction.GovernanceVoteArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>withdrawals</c> property.
    /// </summary>
    public Generated.Withdrawals Withdrawals
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.WithdrawalsUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Withdrawals, out JsonAny result))
                {
                    return result.As<Generated.Withdrawals>();
                }
            }

            return default;
        }
    }

    /// <inheritdoc/>
    public static Transaction FromProperties(IDictionary<JsonPropertyName, JsonAny> source)
    {
        return new(source.Select(kvp => new JsonObjectProperty(kvp.Key, kvp.Value)).ToImmutableList());
    }

    /// <inheritdoc/>
    public static Transaction FromProperties(params (JsonPropertyName Name, JsonAny Value)[] source)
    {
        return new(source.Select(s => new JsonObjectProperty(s.Name, s.Value.AsAny)).ToImmutableList());
    }

    /// <summary>
    /// Creates an instance of the type from the given immutable list of properties.
    /// </summary>
    /// <param name="source">The list of properties.</param>
    /// <returns>An instance of the type initialized from the list of properties.</returns>
    public static Transaction FromProperties(ImmutableList<JsonObjectProperty> source)
    {
        return new(source);
    }

    /// <summary>
    /// Creates an instance of a <see cref="Transaction"/>.
    /// </summary>
    public static Transaction Create(
        in Generated.DigestBlake2b256 id,
        in Generated.Transaction.InputsTransactionOutputRefArray inputs,
        in Generated.Transaction.TransactionOutputArray outputs,
        in Generated.Transaction.SignatoryArray signatories,
        in Generated.InputSource spends,
        in Corvus.Json.JsonString? cbor = null,
        in Generated.Transaction.CertificateArray? certificates = null,
        in Generated.TransactionOutput? collateralReturn = null,
        in Generated.Transaction.TransactionOutputReferenceArray? collaterals = null,
        in Generated.Transaction.DatumsEntity? datums = null,
        in Generated.ValueAdaOnly? fee = null,
        in Generated.Metadata? metadata = null,
        in Generated.Assets? mint = null,
        in Generated.Network? network = null,
        in Generated.Transaction.GovernanceProposalArray? proposals = null,
        in Generated.Transaction.RedeemerArray? redeemers = null,
        in Generated.Transaction.ReferencesTransactionOutpuArray? references = null,
        in Generated.Transaction.DigestBlake2b224Array? requiredExtraScripts = null,
        in Generated.Transaction.RequiredExtraSigArray? requiredExtraSignatories = null,
        in Generated.DigestBlake2b256? scriptIntegrityHash = null,
        in Generated.Transaction.ScriptsEntity? scripts = null,
        in Generated.ValueAdaOnly? totalCollateral = null,
        in Generated.Transaction.TreasuryEntity? treasury = null,
        in Generated.ValidityInterval? validityInterval = null,
        in Generated.Transaction.GovernanceVoteArray? votes = null,
        in Generated.Withdrawals? withdrawals = null)
    {
        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
        builder.Add(JsonPropertyNames.Id, id.AsAny);
        builder.Add(JsonPropertyNames.Inputs, inputs.AsAny);
        builder.Add(JsonPropertyNames.Outputs, outputs.AsAny);
        builder.Add(JsonPropertyNames.Signatories, signatories.AsAny);
        builder.Add(JsonPropertyNames.Spends, spends.AsAny);

        if (cbor is not null)
        {
            builder.Add(JsonPropertyNames.Cbor, cbor.Value.AsAny);
        }

        if (certificates is not null)
        {
            builder.Add(JsonPropertyNames.Certificates, certificates.Value.AsAny);
        }

        if (collateralReturn is not null)
        {
            builder.Add(JsonPropertyNames.CollateralReturn, collateralReturn.Value.AsAny);
        }

        if (collaterals is not null)
        {
            builder.Add(JsonPropertyNames.Collaterals, collaterals.Value.AsAny);
        }

        if (datums is not null)
        {
            builder.Add(JsonPropertyNames.Datums, datums.Value.AsAny);
        }

        if (fee is not null)
        {
            builder.Add(JsonPropertyNames.Fee, fee.Value.AsAny);
        }

        if (metadata is not null)
        {
            builder.Add(JsonPropertyNames.Metadata, metadata.Value.AsAny);
        }

        if (mint is not null)
        {
            builder.Add(JsonPropertyNames.Mint, mint.Value.AsAny);
        }

        if (network is not null)
        {
            builder.Add(JsonPropertyNames.Network, network.Value.AsAny);
        }

        if (proposals is not null)
        {
            builder.Add(JsonPropertyNames.Proposals, proposals.Value.AsAny);
        }

        if (redeemers is not null)
        {
            builder.Add(JsonPropertyNames.Redeemers, redeemers.Value.AsAny);
        }

        if (references is not null)
        {
            builder.Add(JsonPropertyNames.References, references.Value.AsAny);
        }

        if (requiredExtraScripts is not null)
        {
            builder.Add(JsonPropertyNames.RequiredExtraScripts, requiredExtraScripts.Value.AsAny);
        }

        if (requiredExtraSignatories is not null)
        {
            builder.Add(JsonPropertyNames.RequiredExtraSignatories, requiredExtraSignatories.Value.AsAny);
        }

        if (scriptIntegrityHash is not null)
        {
            builder.Add(JsonPropertyNames.ScriptIntegrityHash, scriptIntegrityHash.Value.AsAny);
        }

        if (scripts is not null)
        {
            builder.Add(JsonPropertyNames.Scripts, scripts.Value.AsAny);
        }

        if (totalCollateral is not null)
        {
            builder.Add(JsonPropertyNames.TotalCollateral, totalCollateral.Value.AsAny);
        }

        if (treasury is not null)
        {
            builder.Add(JsonPropertyNames.Treasury, treasury.Value.AsAny);
        }

        if (validityInterval is not null)
        {
            builder.Add(JsonPropertyNames.ValidityInterval, validityInterval.Value.AsAny);
        }

        if (votes is not null)
        {
            builder.Add(JsonPropertyNames.Votes, votes.Value.AsAny);
        }

        if (withdrawals is not null)
        {
            builder.Add(JsonPropertyNames.Withdrawals, withdrawals.Value.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <inheritdoc/>
    public ImmutableList<JsonObjectProperty> AsPropertyBacking()
    {
        return __CorvusObjectHelpers.GetPropertyBacking(this);
    }
    /// <inheritdoc/>
    public ImmutableList<JsonObjectProperty>.Builder AsPropertyBackingBuilder()
    {
        return __CorvusObjectHelpers.GetPropertyBacking(this).ToBuilder();
    }

    /// <inheritdoc/>
    public JsonObjectEnumerator EnumerateObject()
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return new(this.jsonElementBacking);
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return new(this.objectBacking);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc/>
    public bool HasProperties()
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.Count > 0;
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            using JsonElement.ObjectEnumerator enumerator = this.jsonElementBacking.EnumerateObject();
            return enumerator.MoveNext();
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(in JsonPropertyName name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return name.TryGetProperty(this.jsonElementBacking, out JsonElement _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(string name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(ReadOnlySpan<char> name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(ReadOnlySpan<byte> name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(in JsonPropertyName name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(string name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(ReadOnlySpan<byte> name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(in JsonPropertyName name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(string name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(ReadOnlySpan<char> name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(ReadOnlySpan<byte> name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public Transaction SetProperty<TValue>(in JsonPropertyName name, TValue value)
        where TValue : struct, IJsonValue
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWith(this, name, value.AsAny));
    }

    /// <inheritdoc />
    public Transaction RemoveProperty(in JsonPropertyName name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public Transaction RemoveProperty(string name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public Transaction RemoveProperty(ReadOnlySpan<char> name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public Transaction RemoveProperty(ReadOnlySpan<byte> name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <summary>
    /// Provides UTF8 and string versions of the JSON property names on the object.
    /// </summary>
    public static class JsonPropertyNames
    {
        /// <summary>
        /// Gets the JSON property name for <see cref="Cbor"/>.
        /// </summary>
        public const string Cbor = "cbor";

        /// <summary>
        /// Gets the JSON property name for <see cref="Certificates"/>.
        /// </summary>
        public const string Certificates = "certificates";

        /// <summary>
        /// Gets the JSON property name for <see cref="CollateralReturn"/>.
        /// </summary>
        public const string CollateralReturn = "collateralReturn";

        /// <summary>
        /// Gets the JSON property name for <see cref="Collaterals"/>.
        /// </summary>
        public const string Collaterals = "collaterals";

        /// <summary>
        /// Gets the JSON property name for <see cref="Datums"/>.
        /// </summary>
        public const string Datums = "datums";

        /// <summary>
        /// Gets the JSON property name for <see cref="Fee"/>.
        /// </summary>
        public const string Fee = "fee";

        /// <summary>
        /// Gets the JSON property name for <see cref="Id"/>.
        /// </summary>
        public const string Id = "id";

        /// <summary>
        /// Gets the JSON property name for <see cref="Inputs"/>.
        /// </summary>
        public const string Inputs = "inputs";

        /// <summary>
        /// Gets the JSON property name for <see cref="Metadata"/>.
        /// </summary>
        public const string Metadata = "metadata";

        /// <summary>
        /// Gets the JSON property name for <see cref="Mint"/>.
        /// </summary>
        public const string Mint = "mint";

        /// <summary>
        /// Gets the JSON property name for <see cref="Network"/>.
        /// </summary>
        public const string Network = "network";

        /// <summary>
        /// Gets the JSON property name for <see cref="Outputs"/>.
        /// </summary>
        public const string Outputs = "outputs";

        /// <summary>
        /// Gets the JSON property name for <see cref="Proposals"/>.
        /// </summary>
        public const string Proposals = "proposals";

        /// <summary>
        /// Gets the JSON property name for <see cref="Redeemers"/>.
        /// </summary>
        public const string Redeemers = "redeemers";

        /// <summary>
        /// Gets the JSON property name for <see cref="References"/>.
        /// </summary>
        public const string References = "references";

        /// <summary>
        /// Gets the JSON property name for <see cref="RequiredExtraScripts"/>.
        /// </summary>
        public const string RequiredExtraScripts = "requiredExtraScripts";

        /// <summary>
        /// Gets the JSON property name for <see cref="RequiredExtraSignatories"/>.
        /// </summary>
        public const string RequiredExtraSignatories = "requiredExtraSignatories";

        /// <summary>
        /// Gets the JSON property name for <see cref="ScriptIntegrityHash"/>.
        /// </summary>
        public const string ScriptIntegrityHash = "scriptIntegrityHash";

        /// <summary>
        /// Gets the JSON property name for <see cref="Scripts"/>.
        /// </summary>
        public const string Scripts = "scripts";

        /// <summary>
        /// Gets the JSON property name for <see cref="Signatories"/>.
        /// </summary>
        public const string Signatories = "signatories";

        /// <summary>
        /// Gets the JSON property name for <see cref="Spends"/>.
        /// </summary>
        public const string Spends = "spends";

        /// <summary>
        /// Gets the JSON property name for <see cref="TotalCollateral"/>.
        /// </summary>
        public const string TotalCollateral = "totalCollateral";

        /// <summary>
        /// Gets the JSON property name for <see cref="Treasury"/>.
        /// </summary>
        public const string Treasury = "treasury";

        /// <summary>
        /// Gets the JSON property name for <see cref="ValidityInterval"/>.
        /// </summary>
        public const string ValidityInterval = "validityInterval";

        /// <summary>
        /// Gets the JSON property name for <see cref="Votes"/>.
        /// </summary>
        public const string Votes = "votes";

        /// <summary>
        /// Gets the JSON property name for <see cref="Withdrawals"/>.
        /// </summary>
        public const string Withdrawals = "withdrawals";

        /// <summary>
        /// Gets the JSON property name for <see cref="Cbor"/>.
        /// </summary>
        public static ReadOnlySpan<byte> CborUtf8 => "cbor"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Certificates"/>.
        /// </summary>
        public static ReadOnlySpan<byte> CertificatesUtf8 => "certificates"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="CollateralReturn"/>.
        /// </summary>
        public static ReadOnlySpan<byte> CollateralReturnUtf8 => "collateralReturn"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Collaterals"/>.
        /// </summary>
        public static ReadOnlySpan<byte> CollateralsUtf8 => "collaterals"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Datums"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DatumsUtf8 => "datums"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Fee"/>.
        /// </summary>
        public static ReadOnlySpan<byte> FeeUtf8 => "fee"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Id"/>.
        /// </summary>
        public static ReadOnlySpan<byte> IdUtf8 => "id"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Inputs"/>.
        /// </summary>
        public static ReadOnlySpan<byte> InputsUtf8 => "inputs"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Metadata"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MetadataUtf8 => "metadata"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Mint"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MintUtf8 => "mint"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Network"/>.
        /// </summary>
        public static ReadOnlySpan<byte> NetworkUtf8 => "network"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Outputs"/>.
        /// </summary>
        public static ReadOnlySpan<byte> OutputsUtf8 => "outputs"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Proposals"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ProposalsUtf8 => "proposals"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Redeemers"/>.
        /// </summary>
        public static ReadOnlySpan<byte> RedeemersUtf8 => "redeemers"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="References"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ReferencesUtf8 => "references"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="RequiredExtraScripts"/>.
        /// </summary>
        public static ReadOnlySpan<byte> RequiredExtraScriptsUtf8 => "requiredExtraScripts"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="RequiredExtraSignatories"/>.
        /// </summary>
        public static ReadOnlySpan<byte> RequiredExtraSignatoriesUtf8 => "requiredExtraSignatories"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="ScriptIntegrityHash"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ScriptIntegrityHashUtf8 => "scriptIntegrityHash"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Scripts"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ScriptsUtf8 => "scripts"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Signatories"/>.
        /// </summary>
        public static ReadOnlySpan<byte> SignatoriesUtf8 => "signatories"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Spends"/>.
        /// </summary>
        public static ReadOnlySpan<byte> SpendsUtf8 => "spends"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="TotalCollateral"/>.
        /// </summary>
        public static ReadOnlySpan<byte> TotalCollateralUtf8 => "totalCollateral"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Treasury"/>.
        /// </summary>
        public static ReadOnlySpan<byte> TreasuryUtf8 => "treasury"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="ValidityInterval"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ValidityIntervalUtf8 => "validityInterval"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Votes"/>.
        /// </summary>
        public static ReadOnlySpan<byte> VotesUtf8 => "votes"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Withdrawals"/>.
        /// </summary>
        public static ReadOnlySpan<byte> WithdrawalsUtf8 => "withdrawals"u8;
    }

    private static class __CorvusObjectHelpers
    {
        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonAny"/> built from the object.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBacking(in Transaction that)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking;
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilder(that.jsonElementBacking).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in Transaction that, in JsonPropertyName name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in Transaction that, ReadOnlySpan<char> name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in Transaction that, ReadOnlySpan<byte> name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in Transaction that, string name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, with the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWith(in Transaction that, in JsonPropertyName name, in JsonAny value)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.SetItem(name, value);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderReplacing(that.jsonElementBacking, name, value).ToImmutable();
            }

            throw new InvalidOperationException();
        }
    }
}
